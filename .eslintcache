[{"/home/nineleaps/Code/final/RedBank-Web/src/index.js":"1","/home/nineleaps/Code/final/RedBank-Web/src/App.js":"2","/home/nineleaps/Code/final/RedBank-Web/src/redux/store.js":"3","/home/nineleaps/Code/final/RedBank-Web/src/redux/Actions/login.js":"4","/home/nineleaps/Code/final/RedBank-Web/src/Components/Auth/Login.js":"5","/home/nineleaps/Code/final/RedBank-Web/src/Components/Auth/Options.js":"6","/home/nineleaps/Code/final/RedBank-Web/src/Components/Auth/ForgotPassword.js":"7","/home/nineleaps/Code/final/RedBank-Web/src/Components/Auth/VerifyCode.js":"8","/home/nineleaps/Code/final/RedBank-Web/src/Components/Auth/ResetPassword.js":"9","/home/nineleaps/Code/final/RedBank-Web/src/Components/Auth/terms.js":"10","/home/nineleaps/Code/final/RedBank-Web/src/Components/Auth/Test.js":"11","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/NotFound.js":"12","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/profile/index.js":"13","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/home/main.js":"14","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/MyDonationReq/inviteesList.js":"15","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/upcomingDrive/UpcomingDrive.js":"16","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/MyDonationReq/MyDonationReq.js":"17","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/buyBlood/product.js":"18","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/myCommitments/MyCommitments.js":"19","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/myPurchases/MyPurchases.js":"20","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/myDrives/myDrives.js":"21","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/myDrives/acceptedDonors.js":"22","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/myInventory/myInventory.js":"23","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/mysales/mySales.js":"24","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/myInvites/myInvites.js":"25","/home/nineleaps/Code/final/RedBank-Web/src/redux/Reducers/registerIndividualReducer.js":"26","/home/nineleaps/Code/final/RedBank-Web/src/redux/Reducers/registerBloodBankReducer.js":"27","/home/nineleaps/Code/final/RedBank-Web/src/redux/Reducers/registerHospitalReducer.js":"28","/home/nineleaps/Code/final/RedBank-Web/src/redux/Reducers/loggingInReducer.js":"29","/home/nineleaps/Code/final/RedBank-Web/src/Components/Auth/BloodBankRegistration.js":"30","/home/nineleaps/Code/final/RedBank-Web/src/Components/Auth/IndividualRegistration.js":"31","/home/nineleaps/Code/final/RedBank-Web/src/Components/Auth/HospitalRegistration.js":"32","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/about/about.js":"33","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/findDonors/FindDonors.js":"34","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/buyBlood/BuyBlood.js":"35","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/myanalytics/MyAnalytics.js":"36","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/conductDrive/conductDrive.js":"37","/home/nineleaps/Code/final/RedBank-Web/src/redux/Types/login.js":"38","/home/nineleaps/Code/final/RedBank-Web/src/redux/Types/registration.js":"39","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/mysales/table.js":"40","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/about/bloodCompatibilityTable.js":"41","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/myInvites/table.js":"42","/home/nineleaps/Code/final/RedBank-Web/src/Components/layouts/loggedoutNavbar.js":"43","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/myanalytics/PieChart.js":"44","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/myanalytics/lineChart.js":"45","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/myanalytics/barChart.js":"46","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/buyBlood/useTable.js":"47","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/findDonors/useTable.js":"48","/home/nineleaps/Code/final/RedBank-Web/src/Components/layouts/index.js":"49","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/myInventory/table.js":"50","/home/nineleaps/Code/final/RedBank-Web/src/redux/Actions/registerIndividual.js":"51","/home/nineleaps/Code/final/RedBank-Web/src/Components/layouts/footer.js":"52","/home/nineleaps/Code/final/RedBank-Web/src/Components/layouts/navbar.js":"53","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/myDrives/table.js":"54","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/myPurchases/table.js":"55","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/myCommitments/table.js":"56","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/MyDonationReq/useTable.js":"57","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/upcomingDrive/useTable.js":"58","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/home/serviceCard.js":"59","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/profile/pageHeader.js":"60","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/profile/profile.js":"61","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/home/services/Services.js":"62","/home/nineleaps/Code/final/RedBank-Web/src/redux/Actions/registerHospital.js":"63","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/profile/indProfile.js":"64","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/profile/hospProfile.js":"65","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/profile/bbProfile.js":"66","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/profile/useForm.js":"67"},{"size":365,"mtime":1614771978834,"results":"68","hashOfConfig":"69"},{"size":5276,"mtime":1614771987558,"results":"70","hashOfConfig":"69"},{"size":595,"mtime":1614771978834,"results":"71","hashOfConfig":"69"},{"size":233,"mtime":1614771987566,"results":"72","hashOfConfig":"69"},{"size":4960,"mtime":1614771987558,"results":"73","hashOfConfig":"69"},{"size":2368,"mtime":1614772623776,"results":"74","hashOfConfig":"69"},{"size":2998,"mtime":1614771987558,"results":"75","hashOfConfig":"69"},{"size":2826,"mtime":1614771987558,"results":"76","hashOfConfig":"69"},{"size":3903,"mtime":1614771987558,"results":"77","hashOfConfig":"69"},{"size":3328,"mtime":1614771978830,"results":"78","hashOfConfig":"69"},{"size":1255,"mtime":1614771987558,"results":"79","hashOfConfig":"69"},{"size":152,"mtime":1614771978830,"results":"80","hashOfConfig":"69"},{"size":960,"mtime":1614840401663,"results":"81","hashOfConfig":"69"},{"size":5417,"mtime":1614841005659,"results":"82","hashOfConfig":"69"},{"size":4438,"mtime":1614840626171,"results":"83","hashOfConfig":"69"},{"size":6692,"mtime":1614771987566,"results":"84","hashOfConfig":"69"},{"size":1338,"mtime":1614771987562,"results":"85","hashOfConfig":"69"},{"size":4734,"mtime":1614771987562,"results":"86","hashOfConfig":"69"},{"size":1925,"mtime":1614771987562,"results":"87","hashOfConfig":"69"},{"size":1902,"mtime":1614771987566,"results":"88","hashOfConfig":"69"},{"size":1429,"mtime":1614773354571,"results":"89","hashOfConfig":"69"},{"size":4089,"mtime":1614771987562,"results":"90","hashOfConfig":"69"},{"size":1270,"mtime":1614771987562,"results":"91","hashOfConfig":"69"},{"size":1862,"mtime":1614773380055,"results":"92","hashOfConfig":"69"},{"size":1413,"mtime":1614773332474,"results":"93","hashOfConfig":"69"},{"size":537,"mtime":1614771978834,"results":"94","hashOfConfig":"69"},{"size":528,"mtime":1614771978834,"results":"95","hashOfConfig":"69"},{"size":525,"mtime":1614771978834,"results":"96","hashOfConfig":"69"},{"size":458,"mtime":1614771987566,"results":"97","hashOfConfig":"69"},{"size":16097,"mtime":1614838696228,"results":"98","hashOfConfig":"69"},{"size":14629,"mtime":1614837412816,"results":"99","hashOfConfig":"69"},{"size":16090,"mtime":1614838683068,"results":"100","hashOfConfig":"69"},{"size":15511,"mtime":1614841141180,"results":"101","hashOfConfig":"69"},{"size":8948,"mtime":1614771987562,"results":"102","hashOfConfig":"69"},{"size":9920,"mtime":1614771987562,"results":"103","hashOfConfig":"69"},{"size":11270,"mtime":1614771987566,"results":"104","hashOfConfig":"69"},{"size":14130,"mtime":1614771987562,"results":"105","hashOfConfig":"69"},{"size":82,"mtime":1614771987566,"results":"106","hashOfConfig":"69"},{"size":168,"mtime":1614771978834,"results":"107","hashOfConfig":"69"},{"size":7267,"mtime":1614771987566,"results":"108","hashOfConfig":"69"},{"size":2368,"mtime":1614771978830,"results":"109","hashOfConfig":"69"},{"size":12967,"mtime":1614771987566,"results":"110","hashOfConfig":"69"},{"size":951,"mtime":1614771978830,"results":"111","hashOfConfig":"69"},{"size":615,"mtime":1614771987566,"results":"112","hashOfConfig":"69"},{"size":1035,"mtime":1614771978834,"results":"113","hashOfConfig":"69"},{"size":517,"mtime":1614771987566,"results":"114","hashOfConfig":"69"},{"size":8420,"mtime":1614771987562,"results":"115","hashOfConfig":"69"},{"size":11863,"mtime":1614771987562,"results":"116","hashOfConfig":"69"},{"size":91,"mtime":1614771978830,"results":"117","hashOfConfig":"69"},{"size":21387,"mtime":1614771987566,"results":"118","hashOfConfig":"69"},{"size":212,"mtime":1614771978834,"results":"119","hashOfConfig":"69"},{"size":2995,"mtime":1614837683946,"results":"120","hashOfConfig":"69"},{"size":26260,"mtime":1614771987558,"results":"121","hashOfConfig":"69"},{"size":6264,"mtime":1614771987562,"results":"122","hashOfConfig":"69"},{"size":7384,"mtime":1614771987566,"results":"123","hashOfConfig":"69"},{"size":8314,"mtime":1614771987562,"results":"124","hashOfConfig":"69"},{"size":9618,"mtime":1614771987562,"results":"125","hashOfConfig":"69"},{"size":9040,"mtime":1614771987566,"results":"126","hashOfConfig":"69"},{"size":1436,"mtime":1614771987558,"results":"127","hashOfConfig":"69"},{"size":962,"mtime":1614839785380,"results":"128","hashOfConfig":"69"},{"size":844,"mtime":1614771987562,"results":"129","hashOfConfig":"69"},{"size":5582,"mtime":1614771987558,"results":"130","hashOfConfig":"69"},{"size":204,"mtime":1614771978834,"results":"131","hashOfConfig":"69"},{"size":20379,"mtime":1614838519429,"results":"132","hashOfConfig":"69"},{"size":27933,"mtime":1614837923955,"results":"133","hashOfConfig":"69"},{"size":28327,"mtime":1614837919911,"results":"134","hashOfConfig":"69"},{"size":268,"mtime":1614771987562,"results":"135","hashOfConfig":"69"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},"1bqa65f",{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"138"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"138"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"138"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"138"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"138"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"138"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"169","messages":"170","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"171","messages":"172","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"138"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"138"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"138"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"138"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"138"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"138"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"138"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"138"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"138"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"138"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"213","messages":"214","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"215","messages":"216","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"217","messages":"218","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"219","messages":"220","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"138"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"138"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"138"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"138"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"138"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"138"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"138"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"138"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"138"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"138"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"138"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"268","messages":"269","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"138"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"138"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"138"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"138"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"138"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"138"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"138"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"291","messages":"292","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"138"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"300","messages":"301","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"302","messages":"303","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},"/home/nineleaps/Code/final/RedBank-Web/src/index.js",[],["306","307"],"/home/nineleaps/Code/final/RedBank-Web/src/App.js",["308"],"import React, { useEffect } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n\nimport Login from \"./Components/Auth/Login\";\nimport Options from \"./Components/Auth/Options\";\nimport ForgotPassword from \"./Components/Auth/ForgotPassword\";\nimport VerifyCode from \"./Components/Auth/VerifyCode\";\nimport ResetPassword from \"./Components/Auth/ResetPassword\";\nimport IndividualRegistration from \"./Components/Auth/IndividualRegistration\";\nimport HospitalRegistration from \"./Components/Auth/HospitalRegistration\";\nimport BloodBankRegistration from \"./Components/Auth/BloodBankRegistration\";\nimport Home from \"./Components/screen/home/main\";\nimport Terms from \"./Components/Auth/terms\";\nimport Test from \"./Components/Auth/Test\";\nimport Profile from \"./Components/screen/profile/index\";\nimport About from \"./Components/screen/about/about\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\n//profile pages\n// import MainIndividual from \"./Components/screen/profile/Individual/MainIndividual\";\n// import MainHospital from \"./Components/screen/profile/Hospital/MainHospital\";\n\n//services\nimport FindDonors from \"./Components/screen/services/findDonors/FindDonors\";\nimport InviteesList from \"./Components/screen/services/MyDonationReq/inviteesList\";\nimport UpcomingDrive from \"./Components/screen/services/upcomingDrive/UpcomingDrive\";\nimport BuyBlood from \"./Components/screen/services/buyBlood/BuyBlood\";\nimport Product from \"./Components/screen/services/buyBlood/product\";\nimport MyCommitments from \"./Components/screen/services/myCommitments/MyCommitments\";\nimport MyPurchases from \"./Components/screen/services/myPurchases/MyPurchases\";\nimport MyDonationReq from \"./Components/screen/services/MyDonationReq/MyDonationReq\";\nimport ConductDrive from \"./Components/screen/services/conductDrive/conductDrive\";\nimport MyDrives from \"./Components/screen/services/myDrives/myDrives\";\nimport MyInventory from \"./Components/screen/services/myInventory/myInventory\";\nimport MySales from \"./Components/screen/services/mysales/mySales\";\nimport MyInvites from \"./Components/screen/services/myInvites/myInvites\";\nimport AcceptedDonors from \"./Components/screen/services/myDrives/acceptedDonors\";\nimport MyAnalytics from \"./Components/screen/services/myanalytics/MyAnalytics\";\nimport NotFound from \"./Components/screen/NotFound\";\nimport { logging } from \"./redux/Actions/login\";\nimport Cookies from \"universal-cookie\";\n\nfunction App() {\n  const loggedIn = useSelector((state) => state.loggedIn);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const cookies = new Cookies();\n    const authObj = cookies.get(\"Auth\");\n    if (authObj) {\n      dispatch(logging(authObj));\n    }\n  }, [dispatch]);\n\n  return (\n    <>\n      <Switch>\n        {loggedIn.isLoggedIn ? (\n          <>\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path=\"/home\" component={Home} />\n            <Route exact path=\"/profile\" component={Profile} />\n            <Route exact path=\"/About\" component={About} />\n            <Route exact path=\"/MyDonationReq\" component={MyDonationReq} />\n            <Route exact path=\"/FindDonors\" component={FindDonors} />\n            <Route exact path=\"/UpcomingDrive\" component={UpcomingDrive} />\n            <Route exact path=\"/BuyBlood\" component={BuyBlood} />\n            <Route exact path=\"/BuyBlood/Product\" component={Product} />\n            <Route exact path=\"/MyCommitments\" component={MyCommitments} />\n            <Route exact path=\"/MyPurchases\" component={MyPurchases} />\n            <Route exact path=\"/ConductDrive\" component={ConductDrive} />\n            <Route exact path=\"/MyDrives\" component={MyDrives} />\n            <Route exact path=\"/AcceptedDonors\" component={AcceptedDonors} />\n            <Route exact path=\"/MyInventory\" component={MyInventory} />\n            <Route exact path=\"/MySales\" component={MySales} />\n            <Route exact path=\"/MyInvites\" component={MyInvites} />\n            <Route exact path=\"/MyAnalytics\" component={MyAnalytics} />\n            <Route exact path=\"/inviteesList\" component={InviteesList} />\n            {/* <Route component={NotFound} /> */}\n          </>\n        ) : (\n          <>\n            <Route exact path=\"/\" component={Login} />\n            <Route\n              exact\n              path=\"/BloodBankRegistration\"\n              component={BloodBankRegistration}\n            />\n            <Route exact path=\"/Login\" component={Login} />\n            <Route exact path=\"/terms\" component={Terms} />\n\n            <Route exact path=\"/ForgotPassword\" component={ForgotPassword} />\n            <Route exact path=\"/VerifyCode\" component={VerifyCode} />\n            <Route exact path=\"/ResetPassword\" component={ResetPassword} />\n            <Route exact path=\"/Options\" component={Options} />\n            <Route\n              exact\n              path=\"/IndividualRegistration\"\n              component={IndividualRegistration}\n            />\n            <Route\n              exact\n              path=\"/HospitalRegistration\"\n              component={HospitalRegistration}\n            />\n            <Route exact path=\"/Test\" component={Test} />\n            {/* <Route component={NotFound} /> */}\n          </>\n        )}\n      </Switch>\n    </>\n  );\n}\n\nexport default App;\n","/home/nineleaps/Code/final/RedBank-Web/src/redux/store.js",[],"/home/nineleaps/Code/final/RedBank-Web/src/redux/Actions/login.js",[],"/home/nineleaps/Code/final/RedBank-Web/src/Components/Auth/Login.js",["309"],"import React, { useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport login from \"./images/login.png\";\nimport avatar from \"./images/avatar.png\";\nimport { Grid, Paper, TextField, Button, Typography } from \"@material-ui/core\";\nimport LoggedOutNavbar from \"../layouts/loggedoutNavbar\";\nimport Joi from \"joi\";\nimport axios from \"axios\";\nimport Cookies from \"universal-cookie\";\nimport { useDispatch } from \"react-redux\";\nimport { logging } from \"../../redux/Actions/login\";\n\nfunction Login() {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const [errors, setErrors] = useState({});\n  const [data, setData] = useState({\n    email: \"\",\n    password: \"\",\n  });\n  const paperStyle = {\n    display: \"flex\",\n    width: 380,\n    flexDirection: \"column\",\n    padding: \"30px\",\n  };\n  const margin = { marginTop: \"20px\" };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const errors = validate();\n    setErrors(errors);\n    if (errors) return;\n\n    axios\n      .post(\"http://localhost:8080/authenticate\", {\n        email: data.email,\n        password: data.password,\n      })\n      .then(function (response) {\n        console.log(response);\n        dispatch(\n          logging({\n            userType: response.data.userType,\n            userToken: response.data.userToken,\n            userId: response.data.userId,\n          })\n        );\n        const cookies = new Cookies();\n        cookies.set(\n          \"Auth\",\n          {\n            userType: response.data.userType,\n            userToken: response.data.userToken,\n            userId: response.data.userId,\n          },\n          { path: \"/\" }\n        );\n\n        history.push(\"/home\");\n      })\n      .catch(function (error) {\n        setErrors({\n          email: \"Email / Password is invalid\",\n          password: \"Email / Password is invalid\",\n        });\n      });\n  };\n\n  const validate = () => {\n    const errors = {};\n\n    if (!/^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[A-Za-z]+$/.test(data.email.trim())) {\n      errors.email = \"Email is either empty or invalid\";\n    }\n    if (!data.password) {\n      errors.password = \"Password cannot be empty\";\n    }\n\n    return Object.keys(errors).length === 0 ? null : errors;\n  };\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    const updatedData = { ...data };\n    updatedData[name] = value;\n    setData(updatedData);\n  };\n\n  return (\n    <>\n      <LoggedOutNavbar />\n\n      <Grid\n        container\n        style={{ marginTop: \"100px\", backgroundColor: \"#E94364\" }}\n      >\n        <Grid\n          item\n          xs={false}\n          sm={6}\n          container\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <img src={login} alt=\"#\" />\n        </Grid>\n\n        <Grid\n          item\n          xs={12}\n          sm={6}\n          container\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <Paper style={paperStyle} elevation={5}>\n            <Grid align=\"center\">\n              <img alt=\"\" src={avatar} width=\"80px\" />\n              <h2 style={{ marginTop: \"10px\" }}>Sign In</h2>\n            </Grid>\n\n            <TextField\n              label=\"Email\"\n              placeholder=\"Enter your email\"\n              type=\"email\"\n              fullWidth\n              variant=\"outlined\"\n              style={margin}\n              name=\"email\"\n              value={data.email}\n              onChange={handleChange}\n              error={errors && errors.email}\n              helperText={errors && errors.email ? errors.email : null}\n            />\n\n            <TextField\n              label=\"Password\"\n              placeholder=\"Enter your password\"\n              type=\"password\"\n              fullWidth\n              variant=\"outlined\"\n              style={margin}\n              name=\"password\"\n              value={data.password}\n              onChange={handleChange}\n              error={errors && errors.password}\n              helperText={errors && errors.password ? errors.password : null}\n            />\n\n            <Typography style={margin} align=\"right\">\n              <Link to=\"/ForgotPassword\">Forgot password </Link>\n            </Typography>\n\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              fullWidth\n              style={{ marginTop: \"20px\", backgroundColor: \"#E94364\" }}\n              onClick={handleSubmit}\n            >\n              Login\n            </Button>\n\n            <Grid align=\"center\">\n              <Typography style={margin}>\n                <p>\n                  New user ? <Link to=\"/Options\">Sign up</Link>\n                </p>\n              </Typography>\n              {/* <h3 style={margin}>OR</h3>\n              <Typography style={margin}>\n                <Link to=\"/Options\">Sign in with google account</Link>\n              </Typography> */}\n            </Grid>\n          </Paper>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n\nexport default Login;\n","/home/nineleaps/Code/final/RedBank-Web/src/Components/Auth/Options.js",["310"],"import React, { useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { Grid, Paper, Typography, Divider, Button } from \"@material-ui/core\";\n\nimport LoggedOutNavbar from \"../layouts/loggedoutNavbar\";\n\nfunction Options() {\n  const paperStyle = {\n    display: \"flex\",\n    width: 380,\n    flexDirection: \"column\",\n    padding: \"30px\",\n  };\n  const margin = { marginTop: \"20px\" };\n\n  const history = useHistory();\n\n  const handleSet = (e, name) => {\n    var type = \"\";\n    if (name === \"individual\") {\n      type = \"1\";\n      history.push({ pathname: \"/IndividualRegistration\", type });\n    } else if (name === \"hospital\") {\n      type = \"2\";\n      history.push({ pathname: \"/HospitalRegistration\", type });\n    } else {\n      type = \"3\";\n      history.push({ pathname: \"/BloodBankRegistration\", type });\n    }\n  };\n\n  return (\n    <>\n      <LoggedOutNavbar />\n\n      <Grid\n        container\n        style={{ marginTop: \"100px\", backgroundColor: \"#E94364\" }}\n      >\n        <Grid item xs={12} container justify=\"center\" alignItems=\"center\">\n          <Paper elevation={5} style={paperStyle}>\n            <Grid align=\"center\">\n              <h2 style={{ marginTop: \"15px\" }}>Which type of user are you?</h2>\n              <Typography style={margin}>\n                <Button\n                  onClick={(e) => {\n                    handleSet(e, \"individual\");\n                  }}\n                >\n                  Individual\n                </Button>\n              </Typography>\n              <Typography style={margin}>\n                <Button\n                  onClick={(e) => {\n                    handleSet(e, \"bloodbank\");\n                  }}\n                >\n                  Blood-Bank\n                </Button>\n              </Typography>\n              <Typography style={margin}>\n                <Button\n                  onClick={(e) => {\n                    handleSet(e, \"hospital\");\n                  }}\n                >\n                  Hospital\n                </Button>\n              </Typography>\n              <Divider style={margin} />\n              <Typography style={margin}>\n                <p>\n                  Existing user ? <Link to=\"/\">Sign in</Link>\n                </p>\n              </Typography>\n            </Grid>\n          </Paper>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n\nexport default Options;","/home/nineleaps/Code/final/RedBank-Web/src/Components/Auth/ForgotPassword.js",["311","312"],"import React, { useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport forgotPwd from \"./images/forgotPwd.png\";\nimport LoggedOutNavbar from \"../layouts/loggedoutNavbar\";\nimport { Grid, Paper, TextField, Button } from \"@material-ui/core\";\nimport Joi from \"joi\";\nimport axios from \"axios\";\n\nfunction ForgotPassword() {\n  const history = useHistory();\n  const [recoveryEmail, setRecoveryEmail] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  const paperStyle = {\n    display: \"flex\",\n    width: 380,\n    flexDirection: \"column\",\n    padding: \"30px\",\n  };\n  const margin = { marginTop: \"20px\" };\n\n  const handleChange = (e) => {\n    setRecoveryEmail(e.target.value);\n  };\n\n  const validate = () => {\n    let error = \"\";\n    if (\n      new RegExp(/[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,15}/g).test(recoveryEmail)\n    )\n      error = \"\";\n    else error = \"Invalid email address\";\n\n    return error;\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const error = validate();\n    setError(error);\n    if (error) return;\n\n    axios\n      .post(\"http://localhost:8080/email/sendotp\", {\n        userEmail: recoveryEmail,\n      })\n      .then((response) => {\n        console.log(response);\n        if (response.data.success) {\n          history.push({\n            pathname: \"/VerifyCode\",\n            recoveryEmail,\n          });\n        } else {\n          setError(\"Sorry, email doesn't exist\");\n        }\n      });\n  };\n\n  return (\n    <>\n      <LoggedOutNavbar />\n      <Grid\n        container\n        style={{ marginTop: \"100px\", backgroundColor: \"#E94364\" }}\n      >\n        <Grid item xs={6} container justify=\"center\" alignItems=\"center\">\n          <img src={forgotPwd} alt=\"fgtpwd\" width=\"800px\" height=\"600px\" />\n        </Grid>\n\n        <Grid item xs={6} container justify=\"center\" alignItems=\"center\">\n          <form onSubmit={handleSubmit}>\n            <Paper elevation={5} style={paperStyle}>\n              <Grid align=\"center\">\n                <h2 style={{ marginTop: \"20px\" }}>Find your Account</h2>\n                <p style={margin}>\n                  Help us find your account by entering your registered email.\n                </p>\n                <TextField\n                  label=\"Recovery Email\"\n                  name=\"recoveryEmail\"\n                  type=\"email\"\n                  value={recoveryEmail}\n                  onChange={handleChange}\n                  fullWidth\n                  required\n                  style={margin}\n                  error={error ? true : false}\n                  helperText={error ? error : null}\n                />\n                <Button\n                  variant=\"contained\"\n                  type=\"submit\"\n                  style={{ marginTop: \"20px\", backgroundColor: \"#E94364\" }}\n                >\n                  Next\n                </Button>\n              </Grid>\n            </Paper>\n          </form>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n\nexport default ForgotPassword;\n","/home/nineleaps/Code/final/RedBank-Web/src/Components/Auth/VerifyCode.js",["313"],"import React, { useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport verifyCode from \"./images/verifyCode.png\";\nimport LoggedOutNavbar from \"../layouts/loggedoutNavbar\";\nimport { Grid, Paper, TextField, Button } from \"@material-ui/core\";\n\nimport axios from \"axios\";\n\nfunction VerifyCode(props) {\n  const { recoveryEmail } = props.location;\n  const paperStyle = {\n    display: \"flex\",\n    width: 380,\n    flexDirection: \"column\",\n    padding: \"30px\",\n  };\n  const margin = { marginTop: \"20px\" };\n\n  const [otp, setOtp] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const history = useHistory();\n\n  const handleChange = (e) => {\n    setOtp(e.target.value);\n  };\n\n  const handleClick = () => {\n    const error = validate();\n    setError(error);\n    if (error) return;\n\n    axios\n      .post(\"http://localhost:8080/email/verifyotp\", {\n        userEmail: recoveryEmail,\n        otp: otp,\n      })\n      .then((response) => {\n        console.log(response);\n        if (response.data.success) {\n          history.push({\n            pathname: \"/ResetPassword\",\n            recoveryEmail,\n          });\n        } else {\n          setError(\"Invalid Otp\");\n        }\n      });\n  };\n\n  const validate = () => {\n    let error = \"\";\n    if (otp.length !== 6) error = \"Otp should contain 6 digits\";\n    return error;\n  };\n\n  return (\n    <>\n      <LoggedOutNavbar />\n      <Grid\n        container\n        style={{ marginTop: \"100px\", backgroundColor: \"#E94364\" }}\n      >\n        <Grid item xs={6} container justify=\"center\" alignItems=\"center\">\n          <img src={verifyCode} alt=\"verify\" style={{ width: \"80%\" }} />\n        </Grid>\n\n        <Grid item xs={6} container justify=\"center\" alignItems=\"center\">\n          <Paper elevation={5} style={paperStyle}>\n            <Grid align=\"center\">\n              <h2 style={{ marginTop: \"20px\" }}>Enter the code</h2>\n              <p style={margin}>\n                If the entered email address matches any account registered with\n                us, we will send u a mail. So, Check your Mailbox\n              </p>\n              <TextField\n                label=\"Enter the code sent\"\n                fullWidth\n                required\n                style={margin}\n                name=\"otp\"\n                value={otp}\n                type=\"number\"\n                onChange={handleChange}\n                error={error ? true : false}\n                helperText={error ? error : null}\n              />\n              <Button\n                variant=\"contained\"\n                style={{ marginTop: \"20px\", backgroundColor: \"#E94364\" }}\n                onClick={handleClick}\n              >\n                Verify\n              </Button>\n            </Grid>\n          </Paper>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n\nexport default VerifyCode;\n","/home/nineleaps/Code/final/RedBank-Web/src/Components/Auth/ResetPassword.js",[],"/home/nineleaps/Code/final/RedBank-Web/src/Components/Auth/terms.js",[],"/home/nineleaps/Code/final/RedBank-Web/src/Components/Auth/Test.js",["314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335"],"import {\n  Grid,\n  Paper,\n  TextField,\n  Select,\n  MenuItem,\n  InputLabel,\n  FormControl,\n  Button,\n  FormControlLabel,\n  Checkbox,\n  Typography,\n  ButtonGroup,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport React, { useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport hospital from \"./images/hospital.jpg\";\nimport states from \"./states.json\";\nimport Joi from \"joi\";\nimport LoggedOutNavbar from \"../layouts/loggedoutNavbar\";\nimport axios from \"axios\";\nimport logging from \"../../redux/Actions/login\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport registerHospital from \"../../redux/Actions/registerHospital\";\n\nconst useStyles = makeStyles((theme) => ({\n  Paper: {\n    width: \"auto\",\n    height: \"200px\",\n    padding: theme.spacing(3),\n  },\n}));\n\nfunction BloodBankRegistration(props) {\n  const classes = useStyles();\n\n  return (\n    <>\n      <LoggedOutNavbar />\n\n      <Grid container style={{ backgroundColor: \"red\" }}>\n        <Grid item xs={6}>\n          <TextField variant=\"outlined\" />\n        </Grid>\n        <Grid item xs={6}>\n          <TextField variant=\"outlined\" />\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n\nexport default BloodBankRegistration;\n","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/NotFound.js",[],"/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/profile/index.js",["336","337","338"],"/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/home/main.js",["339","340","341"],"/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/MyDonationReq/inviteesList.js",["342","343","344","345"],"/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/upcomingDrive/UpcomingDrive.js",["346"],"import React, { useState, useEffect } from \"react\";\nimport {\n  Container,\n  Grid,\n  makeStyles,\n  Paper,\n  FormControl,\n  InputLabel,\n  Select,\n  Divider,\n  Typography,\n  MenuItem,\n  TextField,\n  Button,\n} from \"@material-ui/core\";\nimport { Navbar, Footer } from \"../../../layouts\";\nimport statesData from \"../../../Auth/states.json\";\nimport Table from \"./useTable\";\nimport Joi from \"joi\";\nimport axios from \"axios\";\nimport { useSelector } from \"react-redux\";\n\nconst useStyles = makeStyles((theme) => ({\n  heading: {\n    marginBottom: theme.spacing(2),\n  },\n  paper: {\n    marginTop: theme.spacing(8),\n    padding: theme.spacing(5),\n    width: \"550px\",\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  papers: {\n    width: \"100%\",\n\n    flexDirection: \"column\",\n    margin: \"auto\",\n    padding: theme.spacing(4),\n  },\n  formControl: {\n    marginTop: theme.spacing(3),\n    minWidth: 250,\n  },\n  tableContainer: {\n    marginTop: theme.spacing(9),\n    marginBottom: theme.spacing(3),\n  },\n  tables: {\n    padding: theme.spacing(3),\n  },\n}));\n\nfunction UpcomingDrive() {\n  const [data, setData] = useState({\n    state: \"\",\n    district: \"\",\n    pincode: \"\",\n  });\n\n  const [driveList, setState] = useState([]);\n\n  const loggedInState = useSelector((state) => state.loggedIn);\n  const [errors, setErrors] = useState({});\n  const [enable, setEnable] = useState(true);\n  const [selectedStateIndex, setSelectedStateIndex] = useState(0);\n  const classes = useStyles();\n\n  const schema = {\n    state: Joi.string().required(),\n    district: Joi.string().required(),\n    pincode: Joi.required(),\n  };\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n\n    if (name === \"state\") {\n      setEnable(false);\n      setSelectedStateIndex(\n        statesData.states.findIndex((item) => item.state === value)\n      );\n    }\n\n    const allErrors = { ...errors };\n    const errorMsg = validateProperty(e.target);\n    if (errorMsg) {\n      allErrors[name] = errorMsg;\n    } else {\n      delete allErrors[name];\n    }\n    const updatedData = { ...data };\n    updatedData[name] = value;\n    setData(updatedData);\n    setErrors(allErrors);\n  };\n\n  const validateProperty = ({ name, value }) => {\n    const inputField = { [name]: value };\n    const fieldSchema = Joi.object({ [name]: schema[name] });\n    const { error } = fieldSchema.validate(inputField);\n    return error ? error.details[0].message : null;\n  };\n\n  const validate = () => {\n    const formSchema = Joi.object(schema);\n    const { error } = formSchema.validate(data, {\n      abortEarly: false,\n    });\n\n    if (!error) return null;\n\n    const allErrors = {};\n    for (let err of error.details) {\n      allErrors[err.path[0]] = err.message;\n    }\n    return allErrors;\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    axios\n      .post(\"http://localhost:8080/upcomingdrives/fetchdriveslist\", data, {\n        headers: {\n          Authorization: \"Bearer \" + loggedInState.userToken,\n        },\n      })\n      .then(function (response) {\n        console.log(response);\n        setState(response.data);\n      });\n  };\n\n  return (\n    <>\n      <Navbar />\n      <Paper square elevation={5} className={classes.papers}>\n        <Typography variant=\"h4\" className={classes.heading}>\n          Find Upcoming Drives\n        </Typography>\n        <Divider className={classes.heading} />\n        <Typography variant=\"h6\" className={classes.heading}>\n          Here you can search upcoming blood donation drives. Fill the\n          parameters and click on search.\n        </Typography>\n      </Paper>\n      <Container maxWidth=\"lg\">\n        <Grid container justify=\"center\">\n          <Grid item>\n            <form onSubmit={handleSubmit}>\n              <Paper className={classes.paper} elevation={5}>\n                <FormControl variant=\"outlined\" className={classes.formControl}>\n                  <InputLabel>Select your State</InputLabel>\n                  <Select\n                    name=\"state\"\n                    value={data.state}\n                    onChange={handleChange}\n                    label=\"Select your State\"\n                    error={errors && errors.state ? true : false}\n                    helperText={errors && errors.state ? errors.state : null}\n                  >\n                    {statesData.states.map((item, id) => (\n                      <MenuItem key={id} value={item.state}>\n                        {item.state}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n\n                <FormControl variant=\"outlined\" className={classes.formControl}>\n                  <InputLabel>Select your District</InputLabel>\n                  <Select\n                    inputProps={{ readOnly: enable }}\n                    name=\"district\"\n                    value={data.district}\n                    onChange={handleChange}\n                    label=\"Select your District\"\n                    error={errors && errors.district ? true : false}\n                    helperText={\n                      errors && errors.district ? errors.district : null\n                    }\n                  >\n                    {statesData.states[selectedStateIndex].districts.map(\n                      (item, id) => (\n                        <MenuItem key={id} value={item}>\n                          {item}\n                        </MenuItem>\n                      )\n                    )}\n                  </Select>\n                </FormControl>\n\n                <TextField\n                  className={classes.formControl}\n                  label=\"Enter your Pincode\"\n                  type=\"text\"\n                  name=\"pincode\"\n                  value={data.pincode}\n                  variant=\"outlined\"\n                  onChange={handleChange}\n                  inputProps={{ maxLength: 6 }}\n                  error={errors && errors.pincode ? true : false}\n                  helperText={errors && errors.pincode ? errors.pincode : null}\n                />\n                <Button\n                  type=\"submit\"\n                  variant=\"contained\"\n                  className={classes.formControl}\n                  disabled={validate()}\n                >\n                  Search\n                </Button>\n              </Paper>\n            </form>\n          </Grid>\n          <Grid item xs={12} className={classes.tableContainer}>\n            {driveList.length === 0 ? (\n              <h3 align=\"center\">Results will be displayed here</h3>\n            ) : (\n              <Table list={driveList} />\n            )}\n          </Grid>\n        </Grid>\n      </Container>\n      <Footer />\n    </>\n  );\n}\n\nexport default UpcomingDrive;\n","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/MyDonationReq/MyDonationReq.js",["347","348","349"],"import React, { useState, useEffect } from \"react\";\nimport {\n  Container,\n  Grid,\n  makeStyles,\n  Paper,\n  Typography,\n  Divider,\n} from \"@material-ui/core\";\nimport { Navbar, Footer } from \"../../../layouts\";\nimport axios from \"axios\";\n\nimport Table from \"./useTable\";\n\nconst useStyles = makeStyles((theme) => ({\n  heading: {\n    marginBottom: theme.spacing(2),\n  },\n  paper: {\n    width: \"100%\",\n\n    flexDirection: \"column\",\n    margin: \"auto\",\n    padding: theme.spacing(4),\n  },\n  table: {\n    margin: theme.spacing(3),\n  },\n}));\n\nfunction MyDonationReq() {\n  const classes = useStyles();\n\n  return (\n    <>\n      <Navbar />\n      <Paper square elevation={5} className={classes.paper}>\n        <Typography variant=\"h4\" className={classes.heading}>\n          My Donation Request\n        </Typography>\n        <Divider className={classes.heading} />\n        <Typography variant=\"h6\" className={classes.heading}>\n          Here you can view all your sent request for donors\n        </Typography>\n      </Paper>\n      <Container maxWidth=\"xl\">\n        <Grid container justify=\"center\" className={classes.table}>\n          <Grid item xs={12}>\n            <Table />\n          </Grid>\n        </Grid>\n      </Container>\n      <Container style={{ height: \"220px\" }}></Container>\n      <Footer />\n    </>\n  );\n}\n\nexport default MyDonationReq;\n","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/buyBlood/product.js",["350","351"],"import React from \"react\";\nimport { Navbar, Footer } from \"../../../layouts/\";\nimport {\n  Container,\n  Grid,\n  makeStyles,\n  Paper,\n  Typography,\n  Button,\n  Divider,\n} from \"@material-ui/core\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { useHistory } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    // position:'fixed',\n    width: \"100%\",\n\n    flexDirection: \"column\",\n    margin: \"auto\",\n    padding: theme.spacing(4),\n  },\n  typo: {\n    fontWeight: \"bold\",\n    padding: \"10px\",\n  },\n  table: {\n    margin: theme.spacing(10),\n    width: \"80%\",\n  },\n}));\n\n// function Product({ iota }) {\nconst Product = (props) => {\n  const { bg, component, price, units, bbId } = props.location;\n  const history = useHistory();\n  const loggedInState = useSelector((state) => state.loggedIn);\n\n  console.log(props);\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClosed = () => {\n    setOpen(false);\n  };\n\n  const handleSubmit = () => {\n    axios\n      .post(\n        \"http://localhost:8080/buyblood/confirmbuy\",\n        {\n          customerId: loggedInState.userId,\n          sellerId: bbId,\n          date: new Date().toISOString(),\n          bloodGroup: bg,\n          component: component,\n          price: price,\n          units: units,\n        },\n        {\n          headers: {\n            Authorization: \"Bearer \" + loggedInState.userToken,\n          },\n        }\n      )\n      .then((response) => {\n        if (response.data.success) {\n          console.log(response);\n          handleClosed();\n          window.alert(\n            \" Check 'My Purchases' section for more info about the transaction \"\n          );\n          history.push(\"/home\");\n        }\n      })\n      .catch();\n  };\n\n  const classes = useStyles();\n  return (\n    <>\n      <Navbar />\n      <Paper square elevation={5} className={classes.paper}>\n        <Typography variant=\"h4\">Selected Product</Typography>\n        <Divider />\n        <Typography variant=\"h6\" style={{}}>\n          Details about the selected product, press Buy button to confirm your\n          order\n        </Typography>\n      </Paper>\n      <Container maxWidth=\"lg\">\n        <Grid\n          container\n          alignContent=\"center\"\n          justify=\"center\"\n          className={classes.table}\n        >\n          <Grid item xs={12} style={{}}>\n            <Paper align=\"center\" square style={{ padding: \"50px\" }}>\n              <Container className={classes.typo}>\n                <Typography className={classes.typo} variant=\"h6\">\n                  Blood Group : {bg}\n                </Typography>\n                <Typography className={classes.typo} variant=\"h6\">\n                  Component :{component}\n                </Typography>\n                <Typography className={classes.typo} variant=\"h6\">\n                  Units Required :{units}\n                </Typography>\n                <Typography className={classes.typo} variant=\"h6\">\n                  Total Amount to be paid :{price * units}\n                </Typography>\n                <Button\n                  className={classes.typo}\n                  type=\"button\"\n                  onClick={handleClickOpen}\n                  variant=\"contained\"\n                >\n                  Buy\n                </Button>\n                <Dialog\n                  open={open}\n                  onClose={handleClosed}\n                  aria-labelledby=\"alert-dialog-title\"\n                  aria-describedby=\"alert-dialog-description\"\n                >\n                  <DialogTitle id=\"alert-dialog-title\">\n                    {\"Are You Sure?\"}\n                  </DialogTitle>\n                  <DialogContent></DialogContent>\n                  <DialogActions>\n                    <Button onClick={handleClosed} color=\"inherit\">\n                      No\n                    </Button>\n                    <Button\n                      color=\"inherit\"\n                      onClick={(e) => {\n                        handleSubmit();\n                      }}\n                      autoFocus\n                    >\n                      Yes\n                    </Button>\n                  </DialogActions>\n                </Dialog>\n              </Container>\n            </Paper>\n          </Grid>\n        </Grid>\n      </Container>\n\n      <Footer />\n    </>\n  );\n};\n\nexport default Product;\n","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/myCommitments/MyCommitments.js",["352","353"],"import React, { useState, useEffect } from \"react\";\nimport {\n  Container,\n  Grid,\n  makeStyles,\n  Paper,\n  Typography,\n  Divider,\n} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { Navbar, Footer } from \"../../../layouts\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport Table from \"./table\";\n\nconst useStyles = makeStyles((theme) => ({\n  heading: {\n    marginBottom: theme.spacing(2),\n  },\n  paper: {\n    width: \"100%\",\n\n    flexDirection: \"column\",\n    margin: \"auto\",\n    padding: theme.spacing(4),\n  },\n  table: {\n    margin: theme.spacing(3),\n  },\n}));\n\nfunction MyCommitments() {\n  const classes = useStyles();\n  const [commitmentsList, setList] = useState([]);\n  const loggedInState = useSelector((state) => state.loggedIn);\n  useEffect(() => {\n    axios\n      .get(\"http://localhost:8080/commitment\", {\n        headers: {\n          Authorization: \"Bearer \" + loggedInState.userToken,\n        },\n      })\n      .then((response) => {\n        // if (response.data.success) {\n        console.log(response);\n        setList(response.data);\n        // }\n      })\n      .catch();\n  }, []);\n\n  return (\n    <>\n      <Navbar />\n      <Paper square elevation={5} className={classes.paper}>\n        <Typography variant=\"h4\" className={classes.heading}>\n          My Commitments\n        </Typography>\n        <Divider className={classes.heading} />\n        <Typography variant=\"h6\" className={classes.heading}>\n          Here you can view all the types of donations you have done since your\n          registration\n        </Typography>\n      </Paper>\n      <Container maxWidth=\"xl\">\n        <Grid container justify=\"center\" className={classes.table}>\n          <Grid item xs={12}>\n            <Table list={commitmentsList} />\n          </Grid>\n        </Grid>\n      </Container>\n      <Container style={{ height: \"220px\" }}></Container>\n      <Footer />\n    </>\n  );\n}\n\nexport default MyCommitments;\n","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/myPurchases/MyPurchases.js",["354"],"import React, { useState, useEffect } from \"react\";\nimport {\n  Container,\n  Grid,\n  makeStyles,\n  Paper,\n  Typography,\n  Divider,\n} from \"@material-ui/core\";\nimport { Navbar, Footer } from \"../../../layouts\";\nimport axios from \"axios\";\nimport { useSelector } from \"react-redux\";\n\nimport Table from \"./table\";\n\nconst useStyles = makeStyles((theme) => ({\n  heading: {\n    marginBottom: theme.spacing(2),\n  },\n  paper: {\n    width: \"100%\",\n    flexDirection: \"column\",\n    margin: \"auto\",\n    padding: theme.spacing(4),\n  },\n  table: {\n    margin: theme.spacing(3),\n  },\n}));\n\nfunction MyPurchase() {\n  const [purchase, setList] = useState([]);\n  const loggedInState = useSelector((state) => state.loggedIn);\n  useEffect(() => {\n    axios\n      .get(\"http://localhost:8080/transactions/fetchpurchaseslist\", {\n        headers: {\n          Authorization: \"Bearer \" + loggedInState.userToken,\n        },\n      })\n      .then((response) => {\n        // if (response.data.success) {\n        console.log(response);\n        setList(response.data);\n        // }\n      })\n      .catch();\n  }, []);\n\n  const classes = useStyles();\n\n  return (\n    <>\n      <Navbar />\n      <Paper square elevation={5} className={classes.paper}>\n        <Typography variant=\"h4\" className={classes.heading}>\n          My Purchases\n        </Typography>\n        <Divider className={classes.heading} />\n        <Typography variant=\"h6\" className={classes.heading}>\n          Here you can view all the purchases you have done since your\n          registration\n        </Typography>\n      </Paper>\n      <Container maxWidth=\"xl\">\n        <Grid container justify=\"center\" className={classes.table}>\n          <Grid item xs={12}>\n            <Table list={purchase} />\n          </Grid>\n        </Grid>\n      </Container>\n      <Container style={{ height: \"200px\" }}></Container>\n      <Footer />\n    </>\n  );\n}\n\nexport default MyPurchase;\n","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/myDrives/myDrives.js",["355","356","357"],"import React, { useState, useEffect } from \"react\";\nimport {\n  Container,\n  Grid,\n  makeStyles,\n  Paper,\n  Typography,\n  Divider,\n} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { Navbar, Footer } from \"../../../layouts\";\n\nimport Table from \"./table\";\n\nconst useStyles = makeStyles((theme) => ({\n  heading: {\n    marginBottom: theme.spacing(2),\n  },\n  paper: {\n    width: \"100%\",\n\n    flexDirection: \"column\",\n    margin: \"auto\",\n    padding: theme.spacing(4),\n  },\n  table: {\n    marginTop: theme.spacing(7),\n  },\n}));\n\nfunction MyBloodDonationDrives() {\n  const classes = useStyles();\n\n  return (\n    <>\n      <Navbar />\n      <Paper square elevation={5} className={classes.paper}>\n        <Typography variant=\"h4\" className={classes.heading}>\n          My Blood Donation Drives\n        </Typography>\n        <Divider className={classes.heading} />\n        <Typography variant=\"h6\" className={classes.heading}>\n          A section showing details of all the drives you have conducted, or\n          which are yet to happen in the near future.\n        </Typography>\n      </Paper>\n      <Container maxWidth=\"xl\">\n        <Grid container justify=\"center\" className={classes.table}>\n          <Grid item xs={12}>\n            <Table />\n          </Grid>\n        </Grid>\n      </Container>\n      <Container style={{ height: \"200px\" }}></Container>\n      <Footer />\n    </>\n  );\n}\n\nexport default MyBloodDonationDrives;\n","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/myDrives/acceptedDonors.js",["358","359"],"import { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport { Button, Container } from \"@material-ui/core/\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { Typography } from \"@material-ui/core/\";\nimport { Navbar, Footer } from \"../../../layouts\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport axios from \"axios\";\nimport React from \"react\";\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: theme.palette.common.white,\n    color: theme.palette.common.black,\n    fontWeight: \"bold\",\n    fontSize: 16,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\nconst useStyles = makeStyles((theme) => ({\n  heading: {\n    marginBottom: theme.spacing(2),\n  },\n  root: {\n    marginTop: theme.spacing(3),\n    padding: theme.spacing(3),\n  },\n  container: {\n    marginTop: theme.spacing(7),\n  },\n}));\n\nexport default function AcceptedDonors(props) {\n  const { donorsList, setDonors, driveId } = props.location;\n  const [newDonorsList, setNewDonorsList] = React.useState([...donorsList]);\n  const classes = useStyles();\n  const loggedInState = useSelector((state) => state.loggedIn);\n\n  const handleClick = (idx) => {\n    if (window.confirm(\"Are you sure ?\")) {\n      axios\n        .put(\n          \"http://localhost:8080/mydrives/drivedonorverification\",\n          {\n            driveId: driveId,\n            userId: newDonorsList[idx].userId,\n          },\n          {\n            headers: {\n              Authorization: \"Bearer \" + loggedInState.userToken,\n            },\n          }\n        )\n        .then((response) => {\n          console.log(response);\n          var updatedList = [...newDonorsList];\n          updatedList[idx].donationStatus = true;\n          setNewDonorsList(updatedList);\n        });\n    }\n  };\n\n  return (\n    <>\n      <Navbar />\n      <Container maxWidth=\"lg\" className={classes.container}>\n        <Typography variant=\"h4\" align=\"center\" className={classes.heading}>\n          List of all Donors\n        </Typography>\n        <TableContainer component={Paper} className={classes.root}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <StyledTableCell align=\"center\">Donor Id</StyledTableCell>\n                <StyledTableCell align=\"center\">Donor Name</StyledTableCell>\n                <StyledTableCell align=\"center\">Blood Group</StyledTableCell>\n                <StyledTableCell align=\"center\">\n                  Donation Status\n                </StyledTableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {newDonorsList.map((row, idx) => (\n                <TableRow key={idx}>\n                  <TableCell align=\"center\">{row.userId}</TableCell>\n                  <TableCell align=\"center\">{row.name}</TableCell>\n                  <TableCell align=\"center\">{row.bloodGroup}</TableCell>\n                  <TableCell align=\"center\">\n                    {row.acceptance === 2 ? (\n                      <p style={{ fontWeight: \"bold\" }}>Pending</p>\n                    ) : row.acceptance === 0 ? (\n                      <p style={{ fontWeight: \"bold\", color: \"red\" }}>\n                        Rejected\n                      </p>\n                    ) : (\n                      <Button\n                        disabled={newDonorsList[idx].donationStatus}\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        onClick={(e) => handleClick(idx)}\n                      >\n                        Given ?\n                      </Button>\n                    )}\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Container>\n      <Footer />\n    </>\n  );\n}\n","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/myInventory/myInventory.js",["360"],"import React, { useState } from \"react\";\nimport {\n  Container,\n  Grid,\n  makeStyles,\n  Paper,\n  Typography,\n  Divider,\n} from \"@material-ui/core\";\nimport { Navbar, Footer } from \"../../../layouts\";\n\nimport Table from \"./table\";\n\nconst useStyles = makeStyles((theme) => ({\n  heading: {\n    marginBottom: theme.spacing(2),\n  },\n  paper: {\n    width: \"100%\",\n\n    flexDirection: \"column\",\n    margin: \"auto\",\n    padding: theme.spacing(4),\n  },\n  table: {\n    margin: theme.spacing(3),\n  },\n}));\n\nfunction MyInventory() {\n  const classes = useStyles();\n\n  return (\n    <>\n      <Navbar />\n      <Paper square elevation={5} className={classes.paper}>\n        <Typography variant=\"h4\" className={classes.heading}>\n          My Inventory\n        </Typography>\n        <Divider className={classes.heading} />\n        <Typography variant=\"h6\" className={classes.heading}>\n          Here you can view, as well as update the stock availability of all\n          your components\n        </Typography>\n      </Paper>\n      <Container maxWidth=\"lg\">\n        <Grid container justify=\"center\" className={classes.table}>\n          <Grid item xs={12}>\n            <Table />\n          </Grid>\n        </Grid>\n      </Container>\n      <Footer />\n    </>\n  );\n}\n\nexport default MyInventory;\n","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/mysales/mySales.js",["361"],"import React, { useState, useEffect } from \"react\";\nimport {\n  Container,\n  Grid,\n  makeStyles,\n  Paper,\n  Typography,\n  Divider,\n} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { Navbar, Footer } from \"../../../layouts\";\nimport { useSelector } from \"react-redux\";\n\nimport Table from \"./table\";\n\nconst useStyles = makeStyles((theme) => ({\n  heading: {\n    marginBottom: theme.spacing(2),\n  },\n  paper: {\n    width: \"100%\",\n\n    flexDirection: \"column\",\n    margin: \"auto\",\n    padding: theme.spacing(4),\n  },\n  table: {\n    margin: theme.spacing(3),\n  },\n}));\n\nfunction MySales() {\n  const classes = useStyles();\n  const [sale, setList] = useState([]);\n  const loggedInState = useSelector((state) => state.loggedIn);\n  useEffect(() => {\n    axios\n      .get(\"http://localhost:8080/transactions/fetchsaleslist\", {\n        headers: {\n          Authorization: \"Bearer \" + loggedInState.userToken,\n        },\n      })\n      .then((response) => {\n        // if (response.data.success) {\n        console.log(response);\n        setList(response.data);\n        // }\n      })\n      .catch();\n  }, []);\n\n  return (\n    <>\n      <Navbar />\n      <Paper square elevation={5} className={classes.paper}>\n        <Typography variant=\"h4\" className={classes.heading}>\n          My Sales\n        </Typography>\n        <Divider className={classes.heading} />\n        <Typography variant=\"h6\" className={classes.heading}>\n          Here you can view all the sale you have done and details about it\n        </Typography>\n      </Paper>\n      <Container maxWidth=\"xl\">\n        <Grid container justify=\"center\" className={classes.table}>\n          <Grid item xs={12}>\n            <Table list={sale} />\n          </Grid>\n        </Grid>\n      </Container>\n      <Container style={{ height: \"200px\" }}></Container>\n      <Footer />\n    </>\n  );\n}\n\nexport default MySales;\n","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/myInvites/myInvites.js",["362","363","364","365"],"import React, { useState, useEffect } from \"react\";\nimport {\n  Container,\n  Grid,\n  makeStyles,\n  Paper,\n  Typography,\n  Divider,\n} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { Navbar, Footer } from \"../../../layouts\";\nimport { useSelector } from \"react-redux\";\n\nimport Table from \"./table\";\n\nconst useStyles = makeStyles((theme) => ({\n  heading: {\n    marginBottom: theme.spacing(2),\n  },\n  paper: {\n    width: \"100%\",\n\n    flexDirection: \"column\",\n    margin: \"auto\",\n    padding: theme.spacing(4),\n  },\n  table: {\n    margin: theme.spacing(3),\n  },\n}));\n\nfunction MyInvites() {\n  const classes = useStyles();\n\n  return (\n    <>\n      <Navbar />\n      <Paper square elevation={5} className={classes.paper}>\n        <Typography variant=\"h4\" className={classes.heading}>\n          My Invites\n        </Typography>\n        <Divider className={classes.heading} />\n        <Typography variant=\"h6\" className={classes.heading}>\n          Here you can view all incoming invitation to you for donation drives\n          and individual requests\n        </Typography>\n      </Paper>\n      <Container maxWidth=\"xl\">\n        <Grid container justify=\"center\" className={classes.table}>\n          <Grid item xs={12}>\n            <Table />\n          </Grid>\n        </Grid>\n      </Container>\n      <Container style={{ height: \"200px\" }}></Container>\n      <Footer />\n    </>\n  );\n}\n\nexport default MyInvites;\n","/home/nineleaps/Code/final/RedBank-Web/src/redux/Reducers/registerIndividualReducer.js",[],"/home/nineleaps/Code/final/RedBank-Web/src/redux/Reducers/registerBloodBankReducer.js",[],"/home/nineleaps/Code/final/RedBank-Web/src/redux/Reducers/registerHospitalReducer.js",[],"/home/nineleaps/Code/final/RedBank-Web/src/redux/Reducers/loggingInReducer.js",[],"/home/nineleaps/Code/final/RedBank-Web/src/Components/Auth/BloodBankRegistration.js",["366"],"/home/nineleaps/Code/final/RedBank-Web/src/Components/Auth/IndividualRegistration.js",["367","368"],"/home/nineleaps/Code/final/RedBank-Web/src/Components/Auth/HospitalRegistration.js",["369"],"/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/about/about.js",["370","371","372"],"/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/findDonors/FindDonors.js",["373","374","375","376"],"import React, { useEffect, useState } from \"react\";\nimport {\n  Container,\n  Grid,\n  makeStyles,\n  Paper,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Divider,\n  Typography,\n  TextField,\n  Button,\n  FormHelperText,\n} from \"@material-ui/core\";\nimport { Navbar, Footer } from \"../../../layouts\";\nimport statesData from \"../../../Auth/states.json\";\nimport Table from \"./useTable\";\nimport Joi from \"joi\";\nimport axios from \"axios\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst useStyles = makeStyles((theme) => ({\n  heading: {\n    marginBottom: theme.spacing(2),\n  },\n  papers: {\n    width: \"100%\",\n    flexDirection: \"column\",\n    margin: \"auto\",\n    padding: theme.spacing(4),\n  },\n  form: {\n    marginTop: theme.spacing(8),\n    padding: theme.spacing(5),\n    width: \"550px\",\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  formControl: {\n    marginTop: theme.spacing(3),\n    minWidth: 250,\n  },\n  tableContainer: {\n    marginTop: theme.spacing(9),\n    marginBottom: theme.spacing(3),\n  },\n  tables: {\n    padding: theme.spacing(3),\n  },\n}));\n\nfunction FindDonors() {\n  const [data, setData] = useState({\n    state: \"\",\n    district: \"\",\n    pincode: \"\",\n    bloodGroup: \"\",\n    address: \"\",\n  });\n\n  const reqBody = {};\n  const loggedInState = useSelector((state) => state.loggedIn);\n  const [errors, setError] = useState({});\n  const [enable, setEnable] = useState(true);\n  const [selectedStateIndex, setSelectedStateIndex] = useState(0);\n  const [donorsList, setList] = useState([]);\n  const classes = useStyles();\n  const regex = /^[0-9]*$/;\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    if (name === \"state\") {\n      setEnable(false);\n      setSelectedStateIndex(\n        statesData.states.findIndex((item) => item.state === value)\n      );\n    }\n    const updatedData = { ...data };\n    updatedData[name] = value;\n    setData(updatedData);\n  };\n\n  // submission and validation\n  const validate = () => {\n    const errors = {};\n\n    if (data.address.trim() === \"\") {\n      errors.address = \"Address cannot be empty\";\n    }\n    if (data.bloodGroup === \"\") {\n      errors.bloodGroup = \"Blood Group cannot be empty\";\n    }\n    if (data.state === \"\") {\n      errors.state = \"State cannot be empty\";\n    }\n    if (data.district === \"\") {\n      errors.district = \"District cannot be empty\";\n    }\n\n    return Object.keys(errors).length === 0 ? null : errors;\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const errors = validate();\n    setError(errors);\n    if (errors) return;\n\n    reqBody.state = data.state;\n    reqBody.district = data.district;\n    reqBody.pincode = data.pincode;\n    reqBody.bloodGroup = data.bloodGroup;\n    reqBody.address = data.address;\n\n    axios\n      .post(\"http://localhost:8080/finddonors/donorslist\", reqBody, {\n        headers: {\n          Authorization: \"Bearer \" + loggedInState.userToken,\n        },\n      })\n      .then((response) => {\n        if (response.data.length != 0) {\n          console.log(response);\n          setList(response.data);\n        } else {\n          window.alert(\"No donors available in the selected location\");\n        }\n      })\n      .catch();\n  };\n\n  return (\n    <>\n      <Navbar />\n      <Paper square elevation={5} className={classes.papers}>\n        <Typography variant=\"h4\" className={classes.heading}>\n          Find Donor\n        </Typography>\n        <Divider className={classes.heading} />\n        <Typography variant=\"h6\" className={classes.heading}>\n          Here you can search any inidividual for blood donation. Fill the\n          parameters and click on search.\n        </Typography>\n      </Paper>\n      <Container maxWidth=\"lg\">\n        <Grid container justify=\"center\">\n          <Grid item>\n            <form onSubmit={handleSubmit}>\n              <Paper className={classes.form} elevation={5}>\n                <FormControl\n                  variant=\"outlined\"\n                  className={classes.formControl}\n                  error={errors && errors.state ? true : false}\n                >\n                  <InputLabel>Select required State</InputLabel>\n                  <Select\n                    label=\"Select required State\"\n                    name=\"state\"\n                    onChange={handleChange}\n                    value={data.state}\n                  >\n                    {statesData.states.map((item, id) => (\n                      <MenuItem value={item.state} key={id}>\n                        {item.state}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                  <FormHelperText>\n                    {errors && errors.state ? errors.state : null}\n                  </FormHelperText>\n                </FormControl>\n\n                <FormControl\n                  variant=\"outlined\"\n                  className={classes.formControl}\n                  error={errors && errors.district ? true : false}\n                >\n                  <InputLabel>Select required District</InputLabel>\n                  <Select\n                    label=\"Select required District\"\n                    inputProps={{ readOnly: enable }}\n                    name=\"district\"\n                    value={data.district}\n                    onChange={handleChange}\n                  >\n                    {statesData.states[selectedStateIndex].districts.map(\n                      (item, id) => (\n                        <MenuItem key={id} value={item}>\n                          {item}\n                        </MenuItem>\n                      )\n                    )}\n                  </Select>\n                  <FormHelperText>\n                    {errors && errors.district ? errors.district : null}\n                  </FormHelperText>\n                </FormControl>\n\n                <TextField\n                  className={classes.formControl}\n                  label=\"Enter required Pincode\"\n                  type=\"text\"\n                  name=\"pincode\"\n                  value={data.pincode}\n                  variant=\"outlined\"\n                  onChange={(e) => {\n                    if (regex.test(e.target.value)) {\n                      handleChange(e);\n                    }\n                  }}\n                  inputProps={{ maxLength: 6 }}\n                  error={errors && errors.pincode ? true : false}\n                  helperText={errors && errors.pincode ? errors.pincode : null}\n                />\n\n                <FormControl\n                  variant=\"outlined\"\n                  className={classes.formControl}\n                  error={errors && errors.bloodGroup ? true : false}\n                >\n                  <InputLabel>Select required Blood Group</InputLabel>\n                  <Select\n                    label=\"Select required Blood Group\"\n                    name=\"bloodGroup\"\n                    onChange={handleChange}\n                    value={data.bloodGroup}\n                    error={errors && errors.bloodGroup ? true : false}\n                    helperText={\n                      errors && errors.bloodGroup ? errors.bloodGroup : null\n                    }\n                  >\n                    <MenuItem value={\"A+\"}>A+</MenuItem>\n                    <MenuItem value={\"A-\"}>A-</MenuItem>\n                    <MenuItem value={\"B+\"}>B+</MenuItem>\n                    <MenuItem value={\"B-\"}>B-</MenuItem>\n                    <MenuItem value={\"AB+\"}>AB+</MenuItem>\n                    <MenuItem value={\"AB-\"}>AB-</MenuItem>\n                    <MenuItem value={\"O+\"}>O+</MenuItem>\n                    <MenuItem value={\"O-\"}>O-</MenuItem>\n                  </Select>\n                  <FormHelperText>\n                    {errors && errors.bloodGroup ? errors.bloodGroup : null}\n                  </FormHelperText>\n                </FormControl>\n\n                <TextField\n                  className={classes.formControl}\n                  label=\"Add the venue for the invitation\"\n                  multiline\n                  rows={7}\n                  name=\"address\"\n                  value={data.address}\n                  onChange={handleChange}\n                  variant=\"outlined\"\n                  error={errors && errors.address}\n                  helperText={errors && errors.address ? errors.address : null}\n                />\n\n                <Button\n                  type=\"submit\"\n                  variant=\"contained\"\n                  className={classes.formControl}\n                >\n                  Search\n                </Button>\n              </Paper>\n            </form>\n          </Grid>\n          <Grid item xs={8} className={classes.tableContainer}>\n            {donorsList.length === 0 ? (\n              <h3 align=\"center\">Results will be displayed here</h3>\n            ) : (\n              <Table list={donorsList} formData={data} />\n            )}\n          </Grid>\n        </Grid>\n      </Container>\n      <Footer />\n    </>\n  );\n}\n\nexport default FindDonors;\n","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/buyBlood/BuyBlood.js",["377","378","379"],"import React, { useState } from \"react\";\nimport {\n  Container,\n  Grid,\n  makeStyles,\n  Paper,\n  FormControl,\n  InputLabel,\n  Select,\n  FormHelperText,\n  MenuItem,\n  TextField,\n  Divider,\n  Typography,\n  Button,\n} from \"@material-ui/core\";\nimport { Navbar, Footer } from \"../../../layouts/\";\nimport statesData from \"../../../Auth/states.json\";\nimport Table from \"./useTable\";\nimport Joi from \"joi\";\nimport axios from \"axios\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst useStyles = makeStyles((theme) => ({\n  heading: {\n    marginBottom: theme.spacing(2),\n  },\n  paper: {\n    marginTop: theme.spacing(8),\n    padding: theme.spacing(5),\n    width: \"550px\",\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  papers: {\n    width: \"100%\",\n    flexDirection: \"column\",\n    margin: \"auto\",\n    padding: theme.spacing(4),\n  },\n  formControl: {\n    marginTop: theme.spacing(3),\n    minWidth: 250,\n  },\n  tableContainer: {\n    marginTop: theme.spacing(9),\n    marginBottom: theme.spacing(3),\n  },\n  tables: {\n    padding: theme.spacing(3),\n  },\n}));\n\nfunction BuyBlood() {\n  const [data, setData] = useState({\n    state: \"\",\n    district: \"\",\n    pincode: \"\",\n    bg: \"\",\n    component: \"\",\n    units: \"\",\n  });\n\n  const [list, setList] = useState([]);\n  const loggedInState = useSelector((state) => state.loggedIn);\n  const [errors, setErrors] = useState({});\n  const [enable, setEnable] = useState(true);\n  const [selectedStateIndex, setSelectedStateIndex] = useState(0);\n  const classes = useStyles();\n  const regex = /^[0-9]*$/;\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n\n    if (name === \"state\") {\n      setEnable(false);\n      setSelectedStateIndex(\n        statesData.states.findIndex((item) => item.state === value)\n      );\n    }\n\n    const updatedData = { ...data };\n    updatedData[name] = value;\n    setData(updatedData);\n  };\n\n  const validate = () => {\n    const errors = {};\n\n    if (data.bg.trim() === \"\") {\n      errors.bg = \"Bloood Group cannot be empty\";\n    }\n    if (data.component.trim() === \"\") {\n      errors.component = \"Component cannot be empty\";\n    }\n    if (data.units.trim() === \"\") {\n      errors.units = \"Units cannot be empty\";\n    }\n    if (data.component.trim() === \"\") {\n      errors.component = \"Component cannot be empty\";\n    }\n    return Object.keys(errors).length === 0 ? null : errors;\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(data);\n    const errors = validate();\n    setErrors(errors);\n    if (errors) return;\n\n    axios\n      .post(\n        \"http://localhost:8080/buyblood/findbb\",\n        {\n          bloodGroup: data.bg,\n          component: data.component,\n          reqUnits: data.units,\n          state: data.state,\n          district: data.district,\n          pincode: data.pincode,\n        },\n        {\n          headers: {\n            Authorization: \"Bearer \" + loggedInState.userToken,\n          },\n        }\n      )\n      .then((response) => {\n        if (response.data.length != 0) {\n          console.log(response);\n          setList(response.data);\n        } else {\n          window.alert(\"No blood banks available in the selected location\");\n        }\n      })\n      .catch();\n  };\n\n  return (\n    <>\n      <Navbar />\n      <Paper square elevation={5} className={classes.papers}>\n        <Typography variant=\"h4\" className={classes.heading}>\n          Buy Blood\n        </Typography>\n        <Divider className={classes.heading} />\n        <Typography variant=\"h6\" className={classes.heading}>\n          Here you can search nearest blood bank and buy items as per your\n          requirement. Fill the parameters and click on search.\n        </Typography>\n      </Paper>\n      <Container maxWidth=\"lg\">\n        <Grid container justify=\"center\">\n          <Grid item>\n            <form>\n              <Paper className={classes.paper} elevation={5}>\n                <FormControl\n                  variant=\"outlined\"\n                  className={classes.formControl}\n                  error={errors && errors.bg ? true : false}\n                >\n                  <InputLabel>Select required Blood Group</InputLabel>\n                  <Select\n                    label=\"Select required Blood Group\"\n                    name=\"bg\"\n                    onChange={handleChange}\n                    value={data.bg}\n                    error={errors && errors.bg ? true : false}\n                    helperText={errors && errors.bg ? errors.bg : null}\n                  >\n                    <MenuItem value={\"A+\"}>A+</MenuItem>\n                    <MenuItem value={\"A-\"}>A-</MenuItem>\n                    <MenuItem value={\"B+\"}>B+</MenuItem>\n                    <MenuItem value={\"B-\"}>B-</MenuItem>\n                    <MenuItem value={\"AB+\"}>AB+</MenuItem>\n                    <MenuItem value={\"AB-\"}>AB-</MenuItem>\n                    <MenuItem value={\"O+\"}>O+</MenuItem>\n                    <MenuItem value={\"O-\"}>O-</MenuItem>\n                  </Select>\n                  <FormHelperText>\n                    {errors && errors.bg ? errors.bg : null}\n                  </FormHelperText>\n                </FormControl>\n\n                <FormControl\n                  variant=\"outlined\"\n                  className={classes.formControl}\n                  error={errors && errors.component ? true : false}\n                >\n                  <InputLabel>Select Component *</InputLabel>\n                  <Select\n                    label=\"Select Component\"\n                    name=\"component\"\n                    onChange={handleChange}\n                    value={data.component}\n                    error={errors && errors.component ? true : false}\n                    helperText={\n                      errors && errors.component ? errors.component : null\n                    }\n                  >\n                    <MenuItem value={\"Blood\"}>Blood</MenuItem>\n                    <MenuItem value={\"Plasma\"}>Plasma</MenuItem>\n                    <MenuItem value={\"Platelets\"}>Platelets</MenuItem>\n                  </Select>\n                  <FormHelperText>\n                    {errors && errors.component ? errors.component : null}\n                  </FormHelperText>\n                </FormControl>\n\n                <TextField\n                  className={classes.formControl}\n                  label=\"Required Units *\"\n                  type=\"text\"\n                  name=\"units\"\n                  value={data.units}\n                  variant=\"outlined\"\n                  onChange={handleChange}\n                  inputProps={{ maxLength: 4 }}\n                  error={errors && errors.units ? true : false}\n                  helperText={errors && errors.units ? errors.units : null}\n                />\n                <FormControl variant=\"outlined\" className={classes.formControl}>\n                  <InputLabel>Select your State</InputLabel>\n                  <Select\n                    name=\"state\"\n                    value={data.state}\n                    onChange={handleChange}\n                    label=\"Select your State\"\n                    error={errors && errors.state ? true : false}\n                    helperText={errors && errors.state ? errors.state : null}\n                  >\n                    {statesData.states.map((item, id) => (\n                      <MenuItem key={id} value={item.state}>\n                        {item.state}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n\n                <FormControl variant=\"outlined\" className={classes.formControl}>\n                  <InputLabel>Select your District</InputLabel>\n                  <Select\n                    inputProps={{ readOnly: enable }}\n                    name=\"district\"\n                    value={data.district}\n                    onChange={handleChange}\n                    label=\"Select your District\"\n                    error={errors && errors.district ? true : false}\n                    helperText={\n                      errors && errors.district ? errors.district : null\n                    }\n                  >\n                    {statesData.states[selectedStateIndex].districts.map(\n                      (item, id) => (\n                        <MenuItem key={id} value={item}>\n                          {item}\n                        </MenuItem>\n                      )\n                    )}\n                  </Select>\n                </FormControl>\n\n                <TextField\n                  className={classes.formControl}\n                  label=\"Enter your Pincode\"\n                  type=\"text\"\n                  name=\"pincode\"\n                  value={data.pincode}\n                  variant=\"outlined\"\n                  onChange={(e) => {\n                    if (regex.test(e.target.value)) {\n                      handleChange(e);\n                    }\n                  }}\n                  inputProps={{ maxLength: 6 }}\n                  error={errors && errors.pincode ? true : false}\n                  helperText={errors && errors.pincode ? errors.pincode : null}\n                />\n\n                <Button\n                  type=\"submit\"\n                  variant=\"contained\"\n                  className={classes.formControl}\n                  onClick={handleSubmit}\n                >\n                  Search\n                </Button>\n              </Paper>\n            </form>\n          </Grid>\n\n          <Grid item xs={12} className={classes.tableContainer}>\n            {list.length === 0 ? (\n              <h3 align=\"center\">Results will be displayed here</h3>\n            ) : (\n              <Table\n                list={list}\n                bg={data.bg}\n                component={data.component}\n                units={data.units}\n              />\n            )}\n          </Grid>\n        </Grid>\n      </Container>\n      <Footer />\n    </>\n  );\n}\n\nexport default BuyBlood;\n","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/myanalytics/MyAnalytics.js",["380","381"],"import React, { useState, useEffect } from \"react\";\nimport {\n  Container,\n  Grid,\n  makeStyles,\n  Paper,\n  MenuItem,\n  FormHelperText,\n  FormControl,\n  Select,\n  InputLabel,\n  Typography,\n  Divider,\n  Box,\n  AppBar,\n  Tab,\n  Tabs,\n} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { Navbar, Footer } from \"../../../layouts\";\nimport BarChart from \"./barChart\";\nimport LineChart from \"./lineChart\";\nimport PieChart from \"./PieChart\";\nimport { useSelector } from \"react-redux\";\n\n// Tabs data\nfunction TabPanel(props) {\n  const { children, value, index } = props;\n\n  return (\n    <div role=\"tabpanel\" hidden={value !== index}>\n      {value === index && (\n        <Box p={3}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  heading: {\n    marginBottom: theme.spacing(2),\n  },\n  paper: {\n    width: \"100%\",\n    flexDirection: \"column\",\n    margin: \"auto\",\n    padding: theme.spacing(4),\n  },\n  charts: {\n    margin: theme.spacing(3),\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  // Tabs data\n  tabs: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n    marginTop: theme.spacing(2),\n  },\n}));\n\nfunction MyAnalytics() {\n  const classes = useStyles();\n  const loggedInState = useSelector((state) => state.loggedIn);\n\n  const [currYear, setCurrYear] = useState(new Date().getFullYear());\n  const [yearlySales, setYearlySales] = useState([]);\n\n  const [currMonth, setCurrMonth] = useState(\n    new Date().toLocaleString(\"en-us\", { month: \"long\" })\n  );\n  const [monthlySales, setMonthlySales] = useState([]);\n\n  const handleYearChange = (e) => {\n    setCurrYear(e.target.value);\n\n    axios\n      .get(`http://localhost:8080/salesanalytics/fetchall/${e.target.value}`, {\n        headers: {\n          Authorization: \"Bearer \" + loggedInState.userToken,\n        },\n      })\n      .then((response) => {\n        setYearlySales(response.data);\n        console.log(response);\n      });\n  };\n\n  const handleMonthChange = (e) => {\n    setCurrMonth(e.target.value);\n\n    axios\n      .get(\n        `http://localhost:8080/salesanalytics/fetchcurrentmonth/${e.target.value}`,\n        {\n          headers: {\n            Authorization: \"Bearer \" + loggedInState.userToken,\n          },\n        }\n      )\n      .then((response) => {\n        console.log(response);\n        setMonthlySales(response.data);\n      });\n  };\n\n  useEffect(() => {\n    axios\n      .get(`http://localhost:8080/salesanalytics/fetchall/${currYear}`, {\n        headers: {\n          Authorization: \"Bearer \" + loggedInState.userToken,\n        },\n      })\n      .then((response) => {\n        setYearlySales(response.data);\n        console.log(response);\n      });\n\n    axios\n      .get(\n        `http://localhost:8080/salesanalytics/fetchcurrentmonth/${currMonth}`,\n        {\n          headers: {\n            Authorization: \"Bearer \" + loggedInState.userToken,\n          },\n        }\n      )\n      .then((response) => {\n        console.log(response);\n        setMonthlySales(response.data);\n      });\n  }, []);\n\n  // Tabs data\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n    <>\n      <Navbar />\n      <Paper square elevation={5} className={classes.paper}>\n        <Typography variant=\"h4\" className={classes.heading}>\n          My Analytics\n        </Typography>\n        <Divider className={classes.heading} />\n        <Typography variant=\"h6\" className={classes.heading}>\n          Here you can view statistics about your data that is present with us\n        </Typography>\n      </Paper>\n      <Container maxWidth=\"lg\">\n        {/* commented out grid will come here */}\n        <div className={classes.tabs}>\n          <AppBar position=\"static\" color=\"transparent\">\n            <Tabs value={value} onChange={handleChange} centered>\n              <Tab label=\"Sales \" />\n              <Tab label=\"Revenue \" />\n              <Tab label=\"Inventory \" />\n            </Tabs>\n          </AppBar>\n          <TabPanel value={value} index={0}>\n            <Grid\n              container\n              justify=\"center\"\n              className={classes.charts}\n              spacing={5}\n            >\n              <Grid item xs={12}>\n                <Typography variant=\"h5\">Yearly wise sales:</Typography>\n                <FormControl className={classes.formControl}>\n                  <InputLabel>Select Year</InputLabel>\n                  <Select\n                    value={currYear}\n                    onChange={handleYearChange}\n                    renderValue={(currYear) => `${currYear}`}\n                  >\n                    <MenuItem value={\"2021\"}>2021</MenuItem>\n                    <MenuItem value={\"2020\"}>2020</MenuItem>\n                    <MenuItem value={\"2019\"}>2019</MenuItem>\n                    <MenuItem value={\"2018\"}>2018</MenuItem>\n                    <MenuItem value={\"2017\"}>2017</MenuItem>\n                    <MenuItem value={\"2016\"}>2016</MenuItem>\n                    <MenuItem value={\"2015\"}>2015</MenuItem>\n                  </Select>\n                  <FormHelperText>Analytics for: {currYear}</FormHelperText>\n                </FormControl>\n                <Grid item xs={12} align=\"center\">\n                  <BarChart\n                    data={yearlySales.dataset}\n                    legends={yearlySales.legend}\n                    labels={yearlySales.labels}\n                  />\n                </Grid>\n              </Grid>\n              <Grid item xs={12}>\n                <Typography variant=\"h5\">Monthly wise sales:</Typography>\n                <FormControl className={classes.formControl}>\n                  <InputLabel>Select Month</InputLabel>\n                  <Select\n                    value={currMonth}\n                    onChange={handleMonthChange}\n                    renderValue={(currMonth) => `${currMonth}`}\n                  >\n                    <MenuItem value={\"January\"}>January</MenuItem>\n                    <MenuItem value={\"Febuary\"}>Febuary</MenuItem>\n                    <MenuItem value={\"March\"}>March</MenuItem>\n                    <MenuItem value={\"April\"}>April</MenuItem>\n                    <MenuItem value={\"May\"}>May</MenuItem>\n                    <MenuItem value={\"June\"}>June</MenuItem>\n                    <MenuItem value={\"July\"}>July</MenuItem>\n                  </Select>\n                  <FormHelperText>\n                    Analytics for: {currMonth},{currYear}\n                  </FormHelperText>\n                </FormControl>\n                <Grid item xs={12} align=\"center\">\n                  <BarChart\n                    data={monthlySales.data}\n                    legends={monthlySales.lagend}\n                    labels={monthlySales.labels}\n                  />\n                </Grid>\n              </Grid>\n            </Grid>\n          </TabPanel>\n          <TabPanel value={value} index={1}>\n            <Grid\n              container\n              justify=\"center\"\n              className={classes.charts}\n              spacing={5}\n            >\n              <Grid item xs={12}>\n                <Typography variant=\"h5\">Yearly wise revenue:</Typography>\n                <FormControl className={classes.formControl}>\n                  <InputLabel>Select Year</InputLabel>\n                  <Select\n                    value={currYear}\n                    onChange={handleYearChange}\n                    renderValue={(currYear) => `${currYear}`}\n                  >\n                    <MenuItem value={\"2021\"}>2021</MenuItem>\n                    <MenuItem value={\"2020\"}>2020</MenuItem>\n                    <MenuItem value={\"2019\"}>2019</MenuItem>\n                    <MenuItem value={\"2018\"}>2018</MenuItem>\n                    <MenuItem value={\"2017\"}>2017</MenuItem>\n                    <MenuItem value={\"2016\"}>2016</MenuItem>\n                    <MenuItem value={\"2015\"}>2015</MenuItem>\n                  </Select>\n                  <FormHelperText>Analytics for: {currYear}</FormHelperText>\n                </FormControl>\n                <Grid item xs={12} align=\"center\">\n                  <BarChart\n                    data={yearlySales.dataset}\n                    legends={yearlySales.legend}\n                    labels={yearlySales.labels}\n                  />\n                </Grid>\n              </Grid>\n              <Grid item xs={12}>\n                <Typography variant=\"h5\">Monthly wise revenue:</Typography>\n                <FormControl className={classes.formControl}>\n                  <InputLabel>Select Month</InputLabel>\n                  <Select\n                    value={currMonth}\n                    onChange={handleMonthChange}\n                    renderValue={(currMonth) => `${currMonth}`}\n                  >\n                    <MenuItem value={\"January\"}>January</MenuItem>\n                    <MenuItem value={\"Febuary\"}>Febuary</MenuItem>\n                    <MenuItem value={\"March\"}>March</MenuItem>\n                    <MenuItem value={\"April\"}>April</MenuItem>\n                    <MenuItem value={\"May\"}>May</MenuItem>\n                    <MenuItem value={\"June\"}>June</MenuItem>\n                    <MenuItem value={\"July\"}>July</MenuItem>\n                  </Select>\n                  <FormHelperText>\n                    Analytics for: {currMonth},{currYear}\n                  </FormHelperText>\n                </FormControl>\n                <Grid item xs={12} align=\"center\">\n                  <BarChart\n                    data={monthlySales.data}\n                    legends={monthlySales.lagend}\n                    labels={monthlySales.labels}\n                  />\n                </Grid>\n              </Grid>\n            </Grid>\n          </TabPanel>\n          <TabPanel value={value} index={2}>\n            <Grid container>\n              <Grid item xs={12}>\n                <Typography\n                  variant=\"h5\"\n                  className={classes.heading}\n                  align=\"left\"\n                >\n                  UNITS AVAILABLE :\n                </Typography>\n              </Grid>\n\n              <Grid item xs={12} sm={6}>\n                <Typography\n                  variant=\"h5\"\n                  className={classes.heading}\n                  align=\"center\"\n                >\n                  Blood\n                </Typography>\n                <PieChart className={classes.heading} />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <Typography\n                  variant=\"h5\"\n                  className={classes.heading}\n                  align=\"center\"\n                >\n                  Plasma\n                </Typography>\n                <PieChart className={classes.heading} />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <Typography\n                  variant=\"h5\"\n                  className={classes.heading}\n                  align=\"center\"\n                >\n                  Platelets\n                </Typography>\n                <PieChart className={classes.heading} />\n              </Grid>\n            </Grid>\n          </TabPanel>\n        </div>\n      </Container>\n      <Footer />\n    </>\n  );\n}\n\nexport default MyAnalytics;\n","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/conductDrive/conductDrive.js",["382","383","384","385","386"],"import React, { useState } from \"react\";\nimport {\n  Container,\n  Grid,\n  makeStyles,\n  Paper,\n  FormControl,\n  Divider,\n  Typography,\n  InputLabel,\n  Select,\n  MenuItem,\n  TextField,\n  Button,\n  FormHelperText,\n} from \"@material-ui/core\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { Navbar, Footer } from \"../../../layouts\";\nimport statesData from \"../../../Auth/states.json\";\nimport Joi from \"joi\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport axios from \"axios\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n  heading: {\n    marginBottom: theme.spacing(2),\n  },\n  paper: {\n    marginTop: theme.spacing(8),\n    padding: theme.spacing(5),\n    width: \"650px\",\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  papers: {\n    width: \"100%\",\n\n    flexDirection: \"column\",\n    margin: \"auto\",\n    padding: theme.spacing(4),\n  },\n  formControl: {\n    marginTop: theme.spacing(3),\n    minWidth: 250,\n  },\n  tableContainer: {\n    marginTop: theme.spacing(9),\n    marginBottom: theme.spacing(3),\n  },\n  tables: {\n    padding: theme.spacing(3),\n  },\n}));\n\nfunction ConductDrive() {\n  const [data, setData] = useState({\n    bloodGroups: [],\n    address: \"\",\n    state: \"\",\n    district: \"\",\n    pincode: \"\",\n    startTime: \"\",\n    startDate: \"\",\n    endTime: \"\",\n    endDate: \"\",\n    message: \"\",\n  });\n\n  const reqBody = {\n    bloodGroups: [],\n    address: \"\",\n    state: \"\",\n    district: \"\",\n    pincode: \"\",\n    startTimeStamp: \"\",\n    endTimeStamp: \"\",\n    message: \"\",\n  };\n\n  const regex = /^[0-9]*$/;\n\n  const loggedInState = useSelector((state) => state.loggedIn);\n  const [errors, setError] = useState({});\n  const [enable, setEnable] = useState(true);\n  const [selectedStateIndex, setSelectedStateIndex] = useState(0);\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n  const history = useHistory();\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n\n    if (name === \"state\") {\n      setEnable(false);\n      setSelectedStateIndex(\n        statesData.states.findIndex((item) => item.state === value)\n      );\n    }\n    const updatedData = { ...data };\n    updatedData[name] = value;\n    setData(updatedData);\n  };\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClosed = () => {\n    setOpen(false);\n  };\n\n  const validate = () => {\n    const errors = {};\n    const currDate = new Date();\n\n    if (data.address.trim() === \"\") {\n      errors.address = \"Address cannot be empty\";\n    }\n    if (data.bloodGroups.length === 0) {\n      errors.bloodGroups = \"Blood Group cannot be empty\";\n    }\n    if (data.state === \"\") {\n      errors.state = \"State cannot be empty\";\n    }\n    if (data.district === \"\") {\n      errors.district = \"District cannot be empty\";\n    }\n    if (data.pincode === \"\") {\n      errors.pincode = \"Pincode cannot be empty\";\n    }\n    if (data.startTime === \"\") {\n      errors.startTime = \"Start Time cannot be empty\";\n    }\n    if (data.endTime === \"\" || data.endTime < data.startTime) {\n      errors.endTime = \"End Time cannot be less than start time\";\n    }\n    if (data.startDate === \"\" || new Date(data.startDate) < currDate) {\n      errors.startDate = \"Invalid Date\";\n    }\n    if (\n      data.endDate === \"\" ||\n      new Date(data.endDate) < new Date(data.startDate)\n    ) {\n      errors.endDate = \"End Date cannot be less than Start Date\";\n    }\n\n    return Object.keys(errors).length === 0 ? null : errors;\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const errors = validate();\n    console.log(errors);\n    setError(errors);\n    if (errors) return;\n\n    reqBody.bloodGroups = data.bloodGroups;\n    reqBody.address = data.address;\n    reqBody.state = data.state;\n    reqBody.district = data.district;\n    reqBody.pincode = data.pincode;\n    reqBody.startTimeStamp = data.startDate + \"T\" + data.startTime + \":00.00\";\n    reqBody.endTimeStamp = data.endDate + \"T\" + data.endTime + \":00.00\";\n    reqBody.message = data.message;\n\n    axios\n      .post(\"http://localhost:8080/conductadrive/savedrivedetails\", reqBody, {\n        headers: {\n          Authorization: \"Bearer \" + loggedInState.userToken,\n        },\n      })\n      .then((response) => {\n        // if (response.data.success) {\n        window.alert(\n          \"Drive has been initiated, check My Drives sections for more details\"\n        );\n        history.push(\"/home\");\n        // }\n      });\n  };\n\n  return (\n    <>\n      <Navbar />\n      <Paper square elevation={5} className={classes.papers}>\n        <Typography variant=\"h4\" className={classes.heading}>\n          Conduct Blood Donation Drive\n        </Typography>\n        <Divider className={classes.heading} />\n        <Typography variant=\"h6\" className={classes.heading}>\n          Here you can orgainze a Blood Donation drive and send notification to\n          eligible donors. They will recive all the necessary details filled\n          here for the drive. Fields with \"*\" are mandatory.\n        </Typography>\n      </Paper>\n      <Container maxWidth=\"lg\">\n        <Grid container justify=\"center\">\n          <Grid item>\n            <form onSubmit={handleSubmit}>\n              <Paper className={classes.paper} elevation={5}>\n                <FormControl\n                  variant=\"outlined\"\n                  className={classes.formControl}\n                  error={errors && errors.bloodGroups ? true : false}\n                >\n                  <InputLabel>Select required Blood Group</InputLabel>\n                  <Select\n                    multiple\n                    label=\"Select required Blood Group\"\n                    name=\"bloodGroups\"\n                    onChange={handleChange}\n                    value={data.bloodGroups}\n                    error={errors && errors.bloodGroups ? true : false}\n                    helperText={\n                      errors && errors.bloodGroups ? errors.bloodGroups : null\n                    }\n                  >\n                    <MenuItem value={\"A+\"}>A+</MenuItem>\n                    <MenuItem value={\"A-\"}>A-</MenuItem>\n                    <MenuItem value={\"B+\"}>B+</MenuItem>\n                    <MenuItem value={\"B-\"}>B-</MenuItem>\n                    <MenuItem value={\"AB+\"}>AB+</MenuItem>\n                    <MenuItem value={\"AB-\"}>AB-</MenuItem>\n                    <MenuItem value={\"O+\"}>O+</MenuItem>\n                    <MenuItem value={\"O-\"}>O-</MenuItem>\n                  </Select>\n                  <FormHelperText>\n                    {errors && errors.bloodGroups ? errors.bloodGroups : null}\n                  </FormHelperText>\n                </FormControl>\n\n                <TextField\n                  className={classes.formControl}\n                  label=\"Enter your Address\"\n                  type=\"text\"\n                  name=\"address\"\n                  value={data.address}\n                  variant=\"outlined\"\n                  onChange={handleChange}\n                  error={errors && errors.address}\n                  helperText={errors && errors.address ? errors.address : null}\n                />\n                <FormControl\n                  variant=\"outlined\"\n                  style={{ marginTop: \"20px\" }}\n                  error={errors && errors.state ? true : false}\n                >\n                  <InputLabel>Select required State</InputLabel>\n                  <Select\n                    label=\"Select required State\"\n                    name=\"state\"\n                    onChange={handleChange}\n                    value={data.state}\n                  >\n                    {statesData.states.map((item, id) => (\n                      <MenuItem value={item.state} key={id}>\n                        {item.state}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                  <FormHelperText>\n                    {errors && errors.state ? errors.state : null}\n                  </FormHelperText>\n                </FormControl>\n\n                <FormControl\n                  variant=\"outlined\"\n                  style={{ marginTop: \"20px\" }}\n                  error={errors && errors.district ? true : false}\n                >\n                  <InputLabel>Select required District</InputLabel>\n                  <Select\n                    label=\"Select required District\"\n                    inputProps={{ readOnly: enable }}\n                    name=\"district\"\n                    value={data.district}\n                    onChange={handleChange}\n                  >\n                    {statesData.states[selectedStateIndex].districts.map(\n                      (item, id) => (\n                        <MenuItem key={id} value={item}>\n                          {item}\n                        </MenuItem>\n                      )\n                    )}\n                  </Select>\n                  <FormHelperText>\n                    {errors && errors.district ? errors.district : null}\n                  </FormHelperText>\n                </FormControl>\n\n                <TextField\n                  style={{ marginTop: \"20px\" }}\n                  label=\"Enter required Pincode\"\n                  type=\"text\"\n                  name=\"pincode\"\n                  value={data.pincode}\n                  variant=\"outlined\"\n                  onChange={(e) => {\n                    if (regex.test(e.target.value)) {\n                      handleChange(e);\n                    }\n                  }}\n                  inputProps={{ maxLength: 6 }}\n                  error={errors && errors.pincode ? true : false}\n                  helperText={errors && errors.pincode ? errors.pincode : null}\n                />\n\n                <InputLabel\n                  style={{ marginTop: \"20px\" }}\n                  error={errors && errors.startDate}\n                >\n                  Start Date\n                </InputLabel>\n                <TextField\n                  type=\"date\"\n                  name=\"startDate\"\n                  value={data.startDate}\n                  variant=\"outlined\"\n                  onChange={handleChange}\n                  inputProps={{ maxLength: 6 }}\n                  error={errors && errors.startDate}\n                  helperText={\n                    errors && errors.startDate ? errors.startDate : null\n                  }\n                />\n\n                <InputLabel\n                  style={{ marginTop: \"20px\" }}\n                  error={errors && errors.endDate}\n                >\n                  End Date\n                </InputLabel>\n                <TextField\n                  type=\"date\"\n                  name=\"endDate\"\n                  value={data.endDate}\n                  variant=\"outlined\"\n                  onChange={handleChange}\n                  inputProps={{ maxLength: 6 }}\n                  error={errors && errors.endDate}\n                  helperText={errors && errors.endDate ? errors.endDate : null}\n                />\n\n                <InputLabel\n                  style={{ marginTop: \"20px\" }}\n                  error={errors && errors.startTime}\n                >\n                  Start Time\n                </InputLabel>\n                <TextField\n                  type=\"time\"\n                  name=\"startTime\"\n                  value={data.startTime}\n                  variant=\"outlined\"\n                  onChange={handleChange}\n                  inputProps={{ maxLength: 6 }}\n                  error={errors && errors.startTime}\n                  helperText={\n                    errors && errors.startTime ? errors.startTime : null\n                  }\n                />\n\n                <InputLabel\n                  style={{ marginTop: \"20px\" }}\n                  error={errors && errors.endTime}\n                >\n                  End Time\n                </InputLabel>\n                <TextField\n                  type=\"time\"\n                  name=\"endTime\"\n                  value={data.endTime}\n                  variant=\"outlined\"\n                  onChange={handleChange}\n                  inputProps={{ maxLength: 6 }}\n                  error={errors && errors.endTime}\n                  helperText={errors && errors.endTime ? errors.endTime : null}\n                />\n\n                <TextField\n                  className={classes.formControl}\n                  label=\"Send a Message\"\n                  multiline\n                  rows={7}\n                  name=\"message\"\n                  value={data.message}\n                  onChange={handleChange}\n                  variant=\"outlined\"\n                  error={errors && errors.message}\n                  helperText={errors && errors.message ? errors.message : null}\n                />\n\n                <Button\n                  type=\"submit\"\n                  variant=\"contained\"\n                  className={classes.formControl}\n                >\n                  Send Notification\n                </Button>\n                <Dialog\n                  open={open}\n                  onClose={handleClosed}\n                  aria-labelledby=\"alert-dialog-title\"\n                  aria-describedby=\"alert-dialog-description\"\n                >\n                  <DialogTitle id=\"alert-dialog-title\">\n                    {\"Are You Sure, you want to logout?\"}\n                  </DialogTitle>\n                  <DialogContent></DialogContent>\n                  <DialogActions>\n                    <Button onClick={handleClosed} color=\"primary\">\n                      No\n                    </Button>\n                    <Button color=\"primary\" autoFocus>\n                      Yes\n                    </Button>\n                  </DialogActions>\n                </Dialog>\n              </Paper>\n            </form>\n          </Grid>\n        </Grid>\n      </Container>\n      <Footer />\n    </>\n  );\n}\n\nexport default ConductDrive;\n","/home/nineleaps/Code/final/RedBank-Web/src/redux/Types/login.js",[],"/home/nineleaps/Code/final/RedBank-Web/src/redux/Types/registration.js",[],"/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/mysales/table.js",["387","388","389","390"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\nimport Paper from \"@material-ui/core/Paper\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Switch from \"@material-ui/core/Switch\";\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === \"desc\"\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\nconst headCells = [\n  {\n    id: \"dateOfTransaction\",\n    numeric: true,\n    disablePadding: false,\n    label: \"Date of Transaction\",\n  },\n  {\n    id: \"salesId\",\n    numeric: false,\n    disablePadding: false,\n    label: \"Purchase Id\",\n  },\n  {\n    id: \"purchasedComponent\",\n    numeric: false,\n    disablePadding: false,\n    label: \"Component Sold\",\n  },\n  {\n    id: \"purchasedGroup\",\n    numeric: false,\n    disablePadding: false,\n    label: \"Blood Group Sold\",\n  },\n  {\n    id: \"purchasedQuantity\",\n    numeric: true,\n    disablePadding: false,\n    label: \"Units Sold\",\n  },\n  {\n    id: \"buyerName\",\n    numeric: false,\n    disablePadding: false,\n    label: \"Buyer Name\",\n  },\n  {\n    id: \"buyerContact\",\n    numeric: false,\n    disablePadding: false,\n    label: \"Buyer Contact\",\n  },\n  {\n    id: \"buyerEmail\",\n    numeric: false,\n    disablePadding: false,\n    label: \"Buyer Email\",\n  },\n  {\n    id: \"amount\",\n    numeric: true,\n    disablePadding: false,\n    label: \"Amount Paid (Rs)\",\n  },\n];\n\nconst useHeaderStyles = makeStyles((theme) => ({\n  head: {\n    fontSize: 18,\n    fontWeight: \"bold\",\n  },\n  body: {\n    fontSize: 16,\n  },\n}));\n\nfunction EnhancedTableHead(props) {\n  const headerClasses = useHeaderStyles();\n  const { classes, order, orderBy, onRequestSort } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align=\"center\"\n            sortDirection={orderBy === headCell.id ? order : false}\n            className={headerClasses.head}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : \"asc\"}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  paper: {\n    width: \"100%\",\n    marginBottom: theme.spacing(2),\n    padding: theme.spacing(1),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: \"rect(0 0 0 0)\",\n    height: 1,\n    margin: -1,\n    overflow: \"hidden\",\n    padding: 0,\n    position: \"absolute\",\n    top: 20,\n    width: 1,\n  },\n}));\n\nexport default function EnhancedTable({ list }) {\n  var List = [];\n\n  list.map((item) => {\n    List.push(item);\n  });\n\n  const classes = useStyles();\n  const [order, setOrder] = React.useState(\"desc\");\n  const [orderBy, setOrderBy] = React.useState(\"dateOfTransaction\");\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === \"asc\";\n    setOrder(isAsc ? \"desc\" : \"asc\");\n    setOrderBy(property);\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <TableContainer>\n          <Table\n            className={classes.table}\n            aria-labelledby=\"tableTitle\"\n            size=\"medium\"\n          >\n            <EnhancedTableHead\n              classes={classes}\n              order={order}\n              orderBy={orderBy}\n              onRequestSort={handleRequestSort}\n            />\n            <TableBody>\n              {stableSort(List, getComparator(order, orderBy))\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row, index) => {\n                  return (\n                    <TableRow hover tabIndex={-1} key={index}>\n                      <TableCell align=\"center\">\n                        {row.dateOfTransaction.split(\"T\")[0]}\n                      </TableCell>\n                      <TableCell align=\"center\">{row.salesId}</TableCell>\n                      <TableCell align=\"center\">\n                        {row.purchasedComponent}\n                      </TableCell>\n                      <TableCell align=\"center\">{row.purchasedGroup}</TableCell>\n                      <TableCell align=\"center\">\n                        {row.purchasedQuantity}\n                      </TableCell>\n                      <TableCell align=\"center\">{row.buyerName}</TableCell>\n                      <TableCell align=\"center\">{row.buyerContact}</TableCell>\n                      <TableCell align=\"center\">{row.buyerEmail}</TableCell>\n                      <TableCell align=\"center\">\n                        {row.pricePerUnit * row.purchasedQuantity}{\" \"}\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={List.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n      </Paper>\n    </div>\n  );\n}\n","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/about/bloodCompatibilityTable.js",[],"/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/myInvites/table.js",["391","392","393","394","395","396"],"import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\nimport Paper from \"@material-ui/core/Paper\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Switch from \"@material-ui/core/Switch\";\nimport Button from \"@material-ui/core/Button\";\nimport axios from \"axios\";\nimport { Modal, TextField } from \"@material-ui/core\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport { useSelector } from \"react-redux\";\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === \"desc\"\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\nconst headCells = [\n  {\n    id: \"inviteTimestamp\",\n    label: \"Invite Made on\",\n  },\n  {\n    id: \"inviteType\",\n    label: \"Type\",\n  },\n  {\n    id: \"inviteId\",\n    label: \"Id\",\n  },\n  {\n    id: \"date\",\n    label: \"Date\",\n  },\n  {\n    id: \"time\",\n    label: \"Time\",\n  },\n  {\n    id: \"address\",\n    label: \"Address\",\n  },\n  {\n    id: \"inviterName\",\n    label: \"Inviter Name\",\n  },\n  {\n    id: \"inviterContact\",\n    label: \"Inviter Contact\",\n  },\n  {\n    id: \"inviterEmail\",\n    label: \"Inviter Email\",\n  },\n  {\n    id: \"accept\",\n    label: \"Status\",\n  },\n];\n\nconst useHeaderStyles = makeStyles((theme) => ({\n  head: {\n    fontSize: 18,\n    fontWeight: \"bold\",\n  },\n  body: {\n    fontSize: 16,\n  },\n}));\n\nfunction EnhancedTableHead(props) {\n  const headerClasses = useHeaderStyles();\n  const { classes, order, orderBy, onRequestSort } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align=\"center\"\n            sortDirection={orderBy === headCell.id ? order : false}\n            className={headerClasses.head}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : \"asc\"}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  paper: {\n    width: \"100%\",\n    marginBottom: theme.spacing(2),\n    padding: theme.spacing(1),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: \"rect(0 0 0 0)\",\n    height: 1,\n    margin: -1,\n    overflow: \"hidden\",\n    padding: 0,\n    position: \"absolute\",\n    top: 20,\n    width: 1,\n  },\n}));\n\nexport default function EnhancedTable() {\n  const classes = useStyles();\n  const [order, setOrder] = React.useState(\"asc\");\n  const [orderBy, setOrderBy] = React.useState(\"inviteType\");\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const [Message, setRejectionMessage] = useState(\"\");\n\n  const loggedInState = useSelector((state) => state.loggedIn);\n  const [List, setList] = useState([]);\n\n  useEffect(() => {\n    axios\n      .get(\"http://localhost:8080/invites/fetchinvites\", {\n        headers: {\n          Authorization: \"Bearer \" + loggedInState.userToken,\n        },\n      })\n      .then((response) => {\n        // if (response.data.success) {\n        console.log(response);\n        setList(response.data);\n        // }\n      })\n      .catch();\n  }, []);\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === \"asc\";\n    setOrder(isAsc ? \"desc\" : \"asc\");\n    setOrderBy(property);\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const handleAccept = (index) => {\n    // axios call\n\n    if (List[index].inviteType === \"drive\") {\n      axios\n        .put(\n          \"http://localhost:8080/invites/inviteresponse\",\n          {\n            eventId: List[index].driveId,\n            eventType: List[index].inviteType,\n            acceptance: 1,\n            rejectionMesaage: \"\",\n          },\n          {\n            headers: {\n              Authorization: \"Bearer \" + loggedInState.userToken,\n            },\n          }\n        )\n        .then((response) => {\n          // if (response.data.success) {\n          console.log(response);\n          window.alert(\"accepted\");\n          setList((prevList) => {\n            const newList = [...prevList];\n            newList[index].status = 1;\n\n            return newList;\n          });\n          // }\n        })\n        .catch();\n    } else {\n      axios\n        .put(\n          \"http://localhost:8080/invites/inviteresponse\",\n          {\n            eventId: List[index].donationId,\n            eventType: List[index].inviteType,\n            acceptance: 1,\n            rejectionMesaage: \"\",\n          },\n          {\n            headers: {\n              Authorization: \"Bearer \" + loggedInState.userToken,\n            },\n          }\n        )\n        .then((response) => {\n          // if (response.data.success) {\n          console.log(response);\n          window.alert(\"accepted\");\n          setList((prevList) => {\n            const newList = [...prevList];\n            newList[index].status = 1;\n            return newList;\n          });\n          // }\n        })\n        .catch();\n    }\n  };\n\n  const handleReject = (index) => {\n    let rejectionMessage = window.prompt(\n      \"Please submit your reason of rejection\"\n    );\n\n    setRejectionMessage(rejectionMessage);\n    // axios call\n\n    if (List[index].inviteType === \"drive\") {\n      axios\n        .put(\n          \"http://localhost:8080/invites/inviteresponse\",\n          {\n            eventId: List[index].driveId,\n            eventType: List[index].inviteType,\n            acceptance: 0,\n            rejectionMesaage: Message,\n          },\n          {\n            headers: {\n              Authorization: \"Bearer \" + loggedInState.userToken,\n            },\n          }\n        )\n        .then((response) => {\n          // if (response.data.success) {\n          console.log(response);\n          setList((prevList) => {\n            const newList = [...prevList];\n            newList[index].status = 0;\n            return newList;\n          });\n          // }\n        })\n        .catch();\n    } else {\n      axios\n        .put(\n          \"http://localhost:8080/invites/inviteresponse\",\n          {\n            eventId: List[index].donationId,\n            eventType: List[index].inviteType,\n            acceptance: 0,\n            rejectionMesaage: Message,\n          },\n          {\n            headers: {\n              Authorization: \"Bearer \" + loggedInState.userToken,\n            },\n          }\n        )\n        .then((response) => {\n          // if (response.data.success) {\n          console.log(response);\n          setList((prevList) => {\n            const newList = [...prevList];\n            newList[index].status = 0;\n            return newList;\n          });\n          // }\n        })\n        .catch();\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <TableContainer>\n          <Table className={classes.table} size=\"medium\">\n            <EnhancedTableHead\n              classes={classes}\n              order={order}\n              orderBy={orderBy}\n              onRequestSort={handleRequestSort}\n            />\n            <TableBody>\n              {stableSort(List, getComparator(order, orderBy))\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row, index) => {\n                  return (\n                    <TableRow hover tabIndex={-1} key={index}>\n                      <TableCell align=\"center\">\n                        {row.inviteTimestamp.split(\"T\")[0]}\n                      </TableCell>\n\n                      <TableCell align=\"center\">{row.inviteType}</TableCell>\n                      <TableCell align=\"center\">\n                        {row.inviteType === \"drive\"\n                          ? row.driveId\n                          : row.donationId}\n                      </TableCell>\n\n                      <TableCell align=\"center\">\n                        {row.inviteType === \"drive\" ? (\n                          <p>\n                            {row.startTimestamp.split(\"T\")[0]} to{\" \"}\n                            {row.endTimestamp.split(\"T\")[0]}\n                          </p>\n                        ) : (\n                          <p>N/A</p>\n                        )}\n                      </TableCell>\n                      <TableCell align=\"center\">\n                        {row.inviteType === \"drive\" ? (\n                          <p>\n                            {row.startTimestamp.split(\"T\")[1].split(\":\")[0]} :\n                            {row.startTimestamp.split(\"T\")[1].split(\":\")[1]} to{\" \"}\n                            {row.endTimestamp.split(\"T\")[1].split(\":\")[0]} :\n                            {row.endTimestamp.split(\"T\")[1].split(\":\")[1]}\n                          </p>\n                        ) : (\n                          <p>N/A</p>\n                        )}\n                      </TableCell>\n                      <TableCell align=\"center\">\n                        {row.address},{row.district},{row.state},{row.pincode}\n                      </TableCell>\n                      <TableCell align=\"center\">{row.recipientName}</TableCell>\n                      <TableCell align=\"center\">\n                        {row.recipientContact}\n                      </TableCell>\n                      <TableCell align=\"center\">{row.recipientEmail}</TableCell>\n                      <TableCell align=\"center\">\n                        {List[index].status !== 2 ? (\n                          List[index].status === 1 ? (\n                            <p>Accepted</p>\n                          ) : List[index].status === 0 ? (\n                            <p>Rejected</p>\n                          ) : null\n                        ) : (\n                          <ButtonGroup variant=\"text\">\n                            <Button\n                              type=\"button\"\n                              variant=\"contained\"\n                              onClick={(e) => handleAccept(index)}\n                            >\n                              Accept\n                            </Button>\n                            <Button\n                              type=\"button\"\n                              variant=\"contained\"\n                              onClick={(e) => handleReject(index)}\n                              color=\"secondary\"\n                            >\n                              Ignore\n                            </Button>\n                          </ButtonGroup>\n                        )}\n                      </TableCell>\n                      <TableCell align=\"center\"></TableCell>\n                    </TableRow>\n                  );\n                })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={List.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n      </Paper>\n    </div>\n  );\n}\n","/home/nineleaps/Code/final/RedBank-Web/src/Components/layouts/loggedoutNavbar.js",["397","398","399"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Logo from \"./logo.svg\";\nimport { Link } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  logo:{\n    height:40,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n}));\n\nfunction LoggedOutNavbar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" style={{background: '#E94364'}}>\n      <Toolbar to=\"/\" component={Link} variant=\"dense\">\n        <img src={Logo} alt=\"logo\" className={classes.logo} />\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\nexport default LoggedOutNavbar;","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/myanalytics/PieChart.js",["400"],"import React from \"react\";\nimport { Bar, Pie } from \"react-chartjs-2\";\n\nfunction PieChart(props) {\n  return (\n    <>\n      <Pie\n        data={{\n          labels: [\"A+\", \"A-\", \"B+\", \"B-\", \"O+\", \"O-\", \"AB+\", \"AB-\"],\n          datasets: [\n            {\n              label: \"units available\",\n              data: [100, 232, 100, 232, 100, 232, 100, 232],\n              backgroundColor: [\"lightgrey\", \"lightblue\", \"lightgreen\", \"pink\"],\n            },\n          ],\n        }}\n        options={{\n          legend: {\n            position: \"left\",\n          },\n        }}\n      />\n    </>\n  );\n}\n\nexport default PieChart;\n","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/myanalytics/lineChart.js",[],"/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/myanalytics/barChart.js",[],"/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/buyBlood/useTable.js",["401","402","403","404","405","406","407","408","409","410"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport clsx from \"clsx\";\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Paper from \"@material-ui/core/Paper\";\n// import Checkbox from \"@material-ui/core/Checkbox\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Switch from \"@material-ui/core/Switch\";\nimport Button from \"@material-ui/core/Button\";\nimport { Link, useHistory } from \"react-router-dom\";\n\nimport SendIcon from \"@material-ui/icons/Send\";\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === \"desc\"\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\nconst headCells = [\n  { id: \"bbId\", numeric: false, disablePadding: false, label: \"Blood Bank Id\" },\n  {\n    id: \"name\",\n    numeric: false,\n    disablePadding: false,\n    label: \"Name\",\n  },\n  { id: \"contact\", numeric: false, disablePadding: false, label: \"Contact\" },\n  { id: \"price\", numeric: false, disablePadding: false, label: \"Price (Rs.)\" },\n  { id: \"actions\", label: \"Actions\", disableSorting: false },\n];\n\nfunction EnhancedTableHead(props) {\n  const { classes, order, orderBy, onRequestSort } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align=\"center\"\n            style={{ paddingLeft: \"20px\", fontWeight: \"bold\" }}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : \"asc\"}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles((theme) => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n  },\n  highlight:\n    theme.palette.type === \"light\"\n      ? {\n          color: \"theme.palette.secondary.main\",\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n        }\n      : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.secondary.dark,\n        },\n  title: {\n    flex: \"1 1 100%\",\n  },\n}));\n\nconst EnhancedTableToolbar = (props) => {\n  const classes = useToolbarStyles();\n  const { numSelected, data } = props;\n\n  return (\n    <Toolbar\n      className={clsx(classes.root, {\n        [classes.highlight]: numSelected > 0,\n      })}\n    >\n      <Typography\n        className={classes.title}\n        variant=\"h6\"\n        id=\"tableTitle\"\n        component=\"div\"\n      >\n        List of all available Blood Banks\n      </Typography>\n    </Toolbar>\n  );\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  paper: {\n    width: \"100%\",\n    marginBottom: theme.spacing(2),\n    padding: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: \"rect(0 0 0 0)\",\n    height: 1,\n    margin: -1,\n    overflow: \"hidden\",\n    padding: 0,\n    position: \"absolute\",\n    top: 20,\n    width: 1,\n  },\n}));\n\nexport default function EnhancedTable({ list, bg, component, units }) {\n  var List = [];\n  list.map((item) => {\n    List.push(item);\n  });\n  console.log(List);\n  const history = useHistory();\n  const classes = useStyles();\n  const [order, setOrder] = React.useState(\"asc\");\n  const [orderBy, setOrderBy] = React.useState(\"contact\");\n  const [selected, setSelected] = React.useState([]);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  // const [ buybtn , setOpenPopup ] = useState(null);\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === \"asc\";\n    setOrder(isAsc ? \"desc\" : \"asc\");\n    setOrderBy(property);\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  // const [iota, setBuybtn] = React.useState({\n  //   bg: bg,\n  //   component: component,\n  //   units: units,\n  //   amount: units * List.price,\n  // });\n\n  const handleClick = (event, price, bbId) => {\n    event.preventDefault();\n    history.push({\n      pathname: \"/BuyBlood/Product\",\n      bg,\n      component,\n      price,\n      units,\n      bbId,\n    });\n  };\n\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <EnhancedTableToolbar />\n        <TableContainer>\n          <Table\n            className={classes.table}\n            aria-labelledby=\"tableTitle\"\n            size=\"medium\"\n            aria-label=\"enhanced table\"\n          >\n            <EnhancedTableHead\n              classes={classes}\n              order={order}\n              orderBy={orderBy}\n              onRequestSort={handleRequestSort}\n            />\n            <TableBody>\n              {stableSort(List, getComparator(order, orderBy))\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row, index) => {\n                  return (\n                    <TableRow\n                      hover\n                      role=\"checkbox\"\n                      tabIndex={-1}\n                      key={row.bbId}\n                    >\n                      <TableCell align=\"center\">{row.bbId}</TableCell>\n                      <TableCell align=\"center\">{row.bbName}</TableCell>\n                      <TableCell align=\"center\">{row.phoneNo}</TableCell>\n                      <TableCell align=\"center\">{row.price}</TableCell>\n                      <TableCell align=\"center\">\n                        <Button\n                          onClick={(event) => {\n                            handleClick(event, row.price, row.bbId);\n                          }}\n                          type=\"button\"\n                          variant=\"contained\"\n                        >\n                          Buy\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={List.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n      </Paper>\n    </div>\n  );\n}\n","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/findDonors/useTable.js",["411","412","413"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport clsx from \"clsx\";\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport axios from \"axios\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === \"desc\"\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\nconst headCells = [\n  {\n    id: \"userid\",\n    label: \"User Id\",\n  },\n  {\n    id: \"name\",\n    label: \"Name of Donor\",\n  },\n  {\n    id: \"address\",\n    label: \"Address of Donor\",\n  },\n];\n\nfunction EnhancedTableHead(props) {\n  const {\n    classes,\n    onSelectAllClick,\n    order,\n    orderBy,\n    numSelected,\n    rowCount,\n    onRequestSort,\n  } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell padding=\"checkbox\">\n          <Checkbox\n            indeterminate={numSelected > 0 && numSelected < rowCount}\n            checked={rowCount > 0 && numSelected === rowCount}\n            onChange={onSelectAllClick}\n            inputProps={{ \"aria-label\": \"select all desserts\" }}\n          />\n        </TableCell>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            style={{ fontWeight: \"bold\" }}\n            align=\"left\"\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : \"asc\"}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles((theme) => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n  },\n  highlight:\n    theme.palette.type === \"light\"\n      ? {\n          color: \"theme.palette.secondary.main\",\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n        }\n      : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.secondary.dark,\n        },\n  title: {\n    flex: \"1 1 100%\",\n  },\n}));\n\nconst EnhancedTableToolbar = (props) => {\n  const classes = useToolbarStyles();\n  const { numSelected, data, formData } = props;\n  const loggedInState = useSelector((state) => state.loggedIn);\n  const reqBody = {};\n  const history = useHistory();\n\n  function handleSend() {\n    reqBody.address = formData.address;\n    reqBody.state = formData.state;\n    reqBody.district = formData.district;\n    reqBody.pincode = formData.pincode;\n    reqBody.address = formData.address;\n    reqBody.bloodGroup = formData.bloodGroup;\n    reqBody.idList = data;\n\n    console.log(formData);\n\n    axios\n      .post(\"http://localhost:8080/finddonors/sendnotification\", reqBody, {\n        headers: {\n          Authorization: \"Bearer \" + loggedInState.userToken,\n        },\n      })\n      .then((response) => {\n        // if (response.data.success) {\n        // console.log(response);\n        // }\n        history.push(\"/home\");\n        console.log(\"works\");\n      })\n      .catch();\n  }\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClosed = () => {\n    setOpen(false);\n  };\n\n  return (\n    <Toolbar\n      className={clsx(classes.root, {\n        [classes.highlight]: numSelected > 0,\n      })}\n    >\n      {numSelected > 0 ? (\n        <Typography\n          className={classes.title}\n          color=\"inherit\"\n          variant=\"subtitle1\"\n          component=\"div\"\n        >\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <Typography\n          className={classes.title}\n          variant=\"h6\"\n          id=\"tableTitle\"\n          component=\"div\"\n        >\n          List of all available Donors\n        </Typography>\n      )}\n\n      {numSelected > 0 ? (\n        <>\n          <Tooltip title=\"Send Notification\">\n            <Button variant=\"contained\" onClick={handleClickOpen}>\n              Send\n            </Button>\n          </Tooltip>\n          <Dialog\n            open={open}\n            onClose={handleClosed}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n          >\n            <DialogTitle id=\"alert-dialog-title\">{\"Are You Sure?\"}</DialogTitle>\n            <DialogActions>\n              <Button onClick={handleClosed} color=\"inherit\">\n                No\n              </Button>\n              <Button\n                onClick={() => {\n                  window.alert(\n                    \"Notification sent successfully. Check 'My Donation Request' section for more info\"\n                  );\n                  handleSend();\n                  handleClosed();\n                }}\n                color=\"inherit\"\n                autoFocus\n              >\n                Yes\n              </Button>\n            </DialogActions>\n          </Dialog>\n        </>\n      ) : null}\n    </Toolbar>\n  );\n};\n\nEnhancedTableToolbar.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  paper: {\n    width: \"100%\",\n    marginBottom: theme.spacing(2),\n    padding: theme.spacing(3),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: \"rect(0 0 0 0)\",\n    height: 1,\n    margin: -1,\n    overflow: \"hidden\",\n    padding: 0,\n    position: \"absolute\",\n    top: 20,\n    width: 1,\n  },\n}));\n\nexport default function EnhancedTable({ list, formData }) {\n  var List = [];\n  list.map((item) => {\n    List.push(item);\n  });\n\n  const classes = useStyles();\n  const [order, setOrder] = React.useState(\"asc\");\n  const [orderBy, setOrderBy] = React.useState(\"contact\");\n  const [selected, setSelected] = React.useState([]);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(15);\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === \"asc\";\n    setOrder(isAsc ? \"desc\" : \"asc\");\n    setOrderBy(property);\n  };\n\n  const handleSelectAllClick = (event) => {\n    if (event.target.checked) {\n      const newSelecteds = List.map((n) => n.userId);\n      setSelected(newSelecteds);\n      return;\n    }\n    setSelected([]);\n  };\n\n  const handleClick = (event, name) => {\n    const selectedIndex = selected.indexOf(name);\n    let newSelected = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, name);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selected.slice(0, selectedIndex),\n        selected.slice(selectedIndex + 1)\n      );\n    }\n\n    setSelected(newSelected);\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const isSelected = (userId) => selected.indexOf(userId) !== -1;\n\n  const emptyRows =\n    rowsPerPage - Math.min(rowsPerPage, List.length - page * rowsPerPage);\n\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <EnhancedTableToolbar\n          numSelected={selected.length}\n          data={selected}\n          formData={formData}\n        />\n        <TableContainer>\n          <Table className={classes.table} size=\"medium\">\n            <EnhancedTableHead\n              classes={classes}\n              numSelected={selected.length}\n              order={order}\n              orderBy={orderBy}\n              onSelectAllClick={handleSelectAllClick}\n              onRequestSort={handleRequestSort}\n              rowCount={List.length}\n            />\n            <TableBody>\n              {stableSort(List, getComparator(order, orderBy))\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row, index) => {\n                  const isItemSelected = isSelected(row.userId);\n                  const labelId = `enhanced-table-checkbox-${index}`;\n\n                  return (\n                    <TableRow\n                      hover\n                      onClick={(event) => handleClick(event, row.userId)}\n                      role=\"checkbox\"\n                      aria-checked={isItemSelected}\n                      tabIndex={-1}\n                      key={row.userId}\n                      selected={isItemSelected}\n                    >\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          checked={isItemSelected}\n                          inputProps={{ \"aria-labelledby\": labelId }}\n                        />\n                      </TableCell>\n                      <TableCell align=\"left\">{row.userId}</TableCell>\n                      <TableCell align=\"left\">{row.name}</TableCell>\n                      <TableCell align=\"left\">\n                        {row.address}, {row.district}, {row.state},{row.pincode}\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[15, 20, 25]}\n          component=\"div\"\n          count={List.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n      </Paper>\n    </div>\n  );\n}\n","/home/nineleaps/Code/final/RedBank-Web/src/Components/layouts/index.js",[],"/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/myInventory/table.js",["414","415"],"import React, { useState, useEffect } from \"react\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { Button, ButtonGroup, Grid, TextField } from \"@material-ui/core/\";\nimport axios from \"axios\";\nimport { useSelector } from \"react-redux\";\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: theme.palette.common.white,\n    color: theme.palette.common.black,\n    fontSize: \"18px\",\n    fontWeight: \"bold\",\n  },\n  body: {\n    fontSize: 18,\n  },\n}))(TableCell);\n\nconst useStyles = makeStyles((theme) => ({\n  table: {\n    minWidth: 500,\n  },\n  buttonGroup: {\n    marginBottom: theme.spacing(1),\n  },\n  root: {\n    height: \"540px\",\n    overflow: \"auto\",\n    \"& .MuiTextField-root\": {\n      width: 50,\n    },\n  },\n}));\n\nexport default function CustomizedTables() {\n  const classes = useStyles();\n  const [readOnly, setStatus] = useState(true);\n  const [data, setData] = useState([]);\n  const regex = /^[0-9]*$/;\n  const loggedInState = useSelector((state) => state.loggedIn);\n\n  useEffect(() => {\n    axios\n      .get(\"http://localhost:8080/inventory/receieveinventory\", {\n        headers: {\n          Authorization: \"Bearer \" + loggedInState.userToken,\n        },\n      })\n      .then((response) => {\n        // if (response.data.success) {\n        console.log(response.data);\n        setData(response.data);\n        // }\n      })\n      .catch();\n  }, []);\n\n  const handleEdit = () => {\n    const currPassword = window.prompt(\"Enter your current password\");\n    axios\n      .post(\n        \"http://localhost:8080/profile/verifycurrentpassword\",\n        {\n          currentPassword: currPassword,\n        },\n        {\n          headers: {\n            Authorization: \"Bearer \" + loggedInState.userToken,\n          },\n        }\n      )\n      .then((response) => {\n        console.log(response);\n        if (response.data.success) {\n          window.alert(\"You can start editing\");\n          setStatus(false);\n        } else {\n          window.alert(\"Wrong password entered\");\n        }\n      })\n      .catch();\n  };\n\n  const handleSave = () => {\n    if (loggedInState.userType === 2) {\n      axios\n        .put(\"http://localhost:8080/inventory/updatehosinventory\", data, {\n          headers: {\n            Authorization: \"Bearer \" + loggedInState.userToken,\n          },\n        })\n        .then((response) => {\n          // if (response.data.success) {\n          console.log(response);\n          setData(response.data);\n          window.alert(\"changes successfully saved\");\n          setStatus(true);\n          // }\n        })\n        .catch();\n    } else {\n      axios\n        .put(\"http://localhost:8080/inventory/updatebbinventory\", data, {\n          headers: {\n            Authorization: \"Bearer \" + loggedInState.userToken,\n          },\n        })\n        .then((response) => {\n          // if (response.data.success) {\n          console.log(response);\n          setData(response.data);\n          window.alert(\"changes successfully saved\");\n          setStatus(true);\n          // }\n        })\n        .catch();\n    }\n  };\n\n  const handleChange = (idx, e) => {\n    const { value, name } = e.target;\n    const updatedData = [...data];\n    updatedData[idx][name] = value;\n    setData(updatedData);\n  };\n\n  return (\n    <>\n      <Grid container justify=\"flex-end\">\n        <ButtonGroup color=\"secondary\" className={classes.buttonGroup}>\n          {readOnly ? (\n            <Button onClick={handleEdit}>Edit</Button>\n          ) : (\n            <ButtonGroup color=\"secondary\">\n              <Button onClick={handleSave}>Save</Button>\n            </ButtonGroup>\n          )}\n        </ButtonGroup>\n      </Grid>\n\n      {loggedInState.userType == 2 ? (\n        <TableContainer component={Paper} className={classes.root}>\n          <Table stickyHeader className={classes.table}>\n            <TableHead>\n              <TableRow>\n                <StyledTableCell align=\"center\">Component</StyledTableCell>\n                <StyledTableCell align=\"center\">Blood Group</StyledTableCell>\n                <StyledTableCell align=\"center\">\n                  Units available&nbsp;(ltr)\n                </StyledTableCell>\n              </TableRow>\n            </TableHead>\n            {data.map((row, idx) => (\n              <TableBody>\n                <TableRow key={idx}>\n                  <StyledTableCell align=\"center\" rowspan={8}>\n                    {row.component}\n                  </StyledTableCell>\n                  <StyledTableCell align=\"center\">A-</StyledTableCell>\n                  <StyledTableCell align=\"center\">\n                    {readOnly ? (\n                      row.aNegUnits\n                    ) : (\n                      <TextField\n                        name=\"aNegUnits\"\n                        value={row.aNegUnits}\n                        onChange={(e) => {\n                          if (regex.test(e.target.value)) {\n                            handleChange(idx, e);\n                          }\n                        }}\n                      />\n                    )}\n                  </StyledTableCell>\n                </TableRow>\n                <TableRow>\n                  <StyledTableCell align=\"center\">A+</StyledTableCell>\n                  <StyledTableCell align=\"center\">\n                    {readOnly ? (\n                      row.aPosUnits\n                    ) : (\n                      <TextField\n                        name=\"aPosUnits\"\n                        value={row.aPosUnits}\n                        onChange={(e) => {\n                          if (regex.test(e.target.value)) {\n                            handleChange(idx, e);\n                          }\n                        }}\n                      />\n                    )}\n                  </StyledTableCell>\n                </TableRow>\n                <TableRow>\n                  <StyledTableCell align=\"center\">AB-</StyledTableCell>\n                  <StyledTableCell align=\"center\">\n                    {readOnly ? (\n                      row.abNegUnits\n                    ) : (\n                      <TextField\n                        name=\"abNegUnits\"\n                        value={row.abNegUnits}\n                        onChange={(e) => {\n                          if (regex.test(e.target.value)) {\n                            handleChange(idx, e);\n                          }\n                        }}\n                      />\n                    )}\n                  </StyledTableCell>\n                </TableRow>\n                <TableRow>\n                  <StyledTableCell align=\"center\">AB+</StyledTableCell>\n                  <StyledTableCell align=\"center\">\n                    {readOnly ? (\n                      row.abPosUnits\n                    ) : (\n                      <TextField\n                        name=\"abPosUnits\"\n                        value={row.abPosUnits}\n                        onChange={(e) => {\n                          if (regex.test(e.target.value)) {\n                            handleChange(idx, e);\n                          }\n                        }}\n                      />\n                    )}\n                  </StyledTableCell>\n                </TableRow>\n                <TableRow>\n                  <StyledTableCell align=\"center\">B-</StyledTableCell>\n                  <StyledTableCell align=\"center\">\n                    {readOnly ? (\n                      row.bNegUnits\n                    ) : (\n                      <TextField\n                        name=\"bNegUnits\"\n                        value={row.bNegUnits}\n                        onChange={(e) => {\n                          if (regex.test(e.target.value)) {\n                            handleChange(idx, e);\n                          }\n                        }}\n                      />\n                    )}\n                  </StyledTableCell>\n                </TableRow>\n                <TableRow>\n                  <StyledTableCell align=\"center\">B+</StyledTableCell>\n                  <StyledTableCell align=\"center\">\n                    {readOnly ? (\n                      row.bPosUnits\n                    ) : (\n                      <TextField\n                        name=\"bPosUnits\"\n                        value={row.bPosUnits}\n                        onChange={(e) => {\n                          if (regex.test(e.target.value)) {\n                            handleChange(idx, e);\n                          }\n                        }}\n                      />\n                    )}\n                  </StyledTableCell>\n                </TableRow>\n                <TableRow>\n                  <StyledTableCell align=\"center\">O-</StyledTableCell>\n                  <StyledTableCell align=\"center\">\n                    {readOnly ? (\n                      row.oNegUnits\n                    ) : (\n                      <TextField\n                        name=\"oNegUnits\"\n                        value={row.oNegUnits}\n                        onChange={(e) => {\n                          if (regex.test(e.target.value)) {\n                            handleChange(idx, e);\n                          }\n                        }}\n                      />\n                    )}\n                  </StyledTableCell>\n                </TableRow>\n                <TableRow>\n                  <StyledTableCell align=\"center\">O+</StyledTableCell>\n                  <StyledTableCell align=\"center\">\n                    {readOnly ? (\n                      row.oPosUnits\n                    ) : (\n                      <TextField\n                        name=\"oPosUnits\"\n                        value={row.oPosUnits}\n                        onChange={(e) => {\n                          if (regex.test(e.target.value)) {\n                            handleChange(idx, e);\n                          }\n                        }}\n                      />\n                    )}\n                  </StyledTableCell>\n                </TableRow>\n              </TableBody>\n            ))}\n          </Table>\n        </TableContainer>\n      ) : (\n        // for blood bank\n        <TableContainer component={Paper} className={classes.root}>\n          <Table stickyHeader className={classes.table}>\n            <TableHead>\n              <TableRow>\n                <StyledTableCell align=\"center\">Component</StyledTableCell>\n                <StyledTableCell align=\"center\">Blood Group</StyledTableCell>\n                <StyledTableCell align=\"center\">\n                  Units available&nbsp;(ltr)\n                </StyledTableCell>\n                <StyledTableCell align=\"center\">\n                  Price/unit&nbsp;(Rs)\n                </StyledTableCell>\n              </TableRow>\n            </TableHead>\n            {data.map((row, idx) => (\n              <TableBody>\n                <TableRow key={idx}>\n                  <StyledTableCell align=\"center\" rowspan={8}>\n                    {row.component}\n                  </StyledTableCell>\n                  <StyledTableCell align=\"center\">A-</StyledTableCell>\n                  <StyledTableCell align=\"center\">\n                    {\" \"}\n                    {readOnly ? (\n                      row.aNegUnits\n                    ) : (\n                      <TextField\n                        name=\"aNegUnits\"\n                        value={row.aNegUnits}\n                        onChange={(e) => {\n                          if (regex.test(e.target.value)) {\n                            handleChange(idx, e);\n                          }\n                        }}\n                      />\n                    )}\n                  </StyledTableCell>\n                  <StyledTableCell align=\"center\">\n                    {\" \"}\n                    {readOnly ? (\n                      row.aNegPrice\n                    ) : (\n                      <TextField\n                        name=\"aNegPrice\"\n                        value={row.aNegPrice}\n                        onChange={(e) => {\n                          if (regex.test(e.target.value)) {\n                            handleChange(idx, e);\n                          }\n                        }}\n                      />\n                    )}\n                  </StyledTableCell>\n                </TableRow>\n                <TableRow>\n                  <StyledTableCell align=\"center\">A+</StyledTableCell>\n                  <StyledTableCell align=\"center\">\n                    {readOnly ? (\n                      row.aPosUnits\n                    ) : (\n                      <TextField\n                        name=\"aPosUnits\"\n                        value={row.aPosUnits}\n                        onChange={(e) => {\n                          if (regex.test(e.target.value)) {\n                            handleChange(idx, e);\n                          }\n                        }}\n                      />\n                    )}\n                  </StyledTableCell>\n                  <StyledTableCell align=\"center\">\n                    {readOnly ? (\n                      row.aPosPrice\n                    ) : (\n                      <TextField\n                        name=\"aPosPrice\"\n                        value={row.aPosPrice}\n                        onChange={(e) => {\n                          if (regex.test(e.target.value)) {\n                            handleChange(idx, e);\n                          }\n                        }}\n                      />\n                    )}\n                  </StyledTableCell>\n                </TableRow>\n                <TableRow>\n                  <StyledTableCell align=\"center\">AB-</StyledTableCell>\n                  <StyledTableCell align=\"center\">\n                    {readOnly ? (\n                      row.abNegUnits\n                    ) : (\n                      <TextField\n                        name=\"abNegUnits\"\n                        value={row.abNegUnits}\n                        onChange={(e) => {\n                          if (regex.test(e.target.value)) {\n                            handleChange(idx, e);\n                          }\n                        }}\n                      />\n                    )}\n                  </StyledTableCell>\n                  <StyledTableCell align=\"center\">\n                    {readOnly ? (\n                      row.abNegPrice\n                    ) : (\n                      <TextField\n                        name=\"abNegPrice\"\n                        value={row.abNegPrice}\n                        onChange={(e) => {\n                          if (regex.test(e.target.value)) {\n                            handleChange(idx, e);\n                          }\n                        }}\n                      />\n                    )}\n                  </StyledTableCell>\n                </TableRow>\n                <TableRow>\n                  <StyledTableCell align=\"center\">AB+</StyledTableCell>\n                  <StyledTableCell align=\"center\">\n                    {readOnly ? (\n                      row.abPosUnits\n                    ) : (\n                      <TextField\n                        name=\"abPosUnits\"\n                        value={row.abPosUnits}\n                        onChange={(e) => {\n                          if (regex.test(e.target.value)) {\n                            handleChange(idx, e);\n                          }\n                        }}\n                      />\n                    )}\n                  </StyledTableCell>\n                  <StyledTableCell align=\"center\">\n                    {readOnly ? (\n                      row.abPosPrice\n                    ) : (\n                      <TextField\n                        name=\"abPosPrice\"\n                        value={row.abPosPrice}\n                        onChange={(e) => {\n                          if (regex.test(e.target.value)) {\n                            handleChange(idx, e);\n                          }\n                        }}\n                      />\n                    )}\n                  </StyledTableCell>\n                </TableRow>\n                <TableRow>\n                  <StyledTableCell align=\"center\">B-</StyledTableCell>\n                  <StyledTableCell align=\"center\">\n                    {readOnly ? (\n                      row.bNegUnits\n                    ) : (\n                      <TextField\n                        name=\"bNegUnits\"\n                        value={row.bNegUnits}\n                        onChange={(e) => {\n                          if (regex.test(e.target.value)) {\n                            handleChange(idx, e);\n                          }\n                        }}\n                      />\n                    )}\n                  </StyledTableCell>\n                  <StyledTableCell align=\"center\">\n                    {readOnly ? (\n                      row.bNegPrice\n                    ) : (\n                      <TextField\n                        name=\"bNegPrice\"\n                        value={row.bNegPrice}\n                        onChange={(e) => {\n                          if (regex.test(e.target.value)) {\n                            handleChange(idx, e);\n                          }\n                        }}\n                      />\n                    )}\n                  </StyledTableCell>\n                </TableRow>\n                <TableRow>\n                  <StyledTableCell align=\"center\">B+</StyledTableCell>\n                  <StyledTableCell align=\"center\">\n                    {readOnly ? (\n                      row.bPosUnits\n                    ) : (\n                      <TextField\n                        name=\"bPosUnits\"\n                        value={row.bPosUnits}\n                        onChange={(e) => {\n                          if (regex.test(e.target.value)) {\n                            handleChange(idx, e);\n                          }\n                        }}\n                      />\n                    )}\n                  </StyledTableCell>\n                  <StyledTableCell align=\"center\">\n                    {readOnly ? (\n                      row.bPosPrice\n                    ) : (\n                      <TextField\n                        name=\"bPosPrice\"\n                        value={row.bPosPrice}\n                        onChange={(e) => {\n                          if (regex.test(e.target.value)) {\n                            handleChange(idx, e);\n                          }\n                        }}\n                      />\n                    )}\n                  </StyledTableCell>\n                </TableRow>\n                <TableRow>\n                  <StyledTableCell align=\"center\">O-</StyledTableCell>\n                  <StyledTableCell align=\"center\">\n                    {readOnly ? (\n                      row.oNegUnits\n                    ) : (\n                      <TextField\n                        name=\"oNegUnits\"\n                        value={row.oNegUnits}\n                        onChange={(e) => {\n                          if (regex.test(e.target.value)) {\n                            handleChange(idx, e);\n                          }\n                        }}\n                      />\n                    )}\n                  </StyledTableCell>\n                  <StyledTableCell align=\"center\">\n                    {readOnly ? (\n                      row.oNegPrice\n                    ) : (\n                      <TextField\n                        name=\"oNegPrice\"\n                        value={row.oNegPrice}\n                        onChange={(e) => {\n                          if (regex.test(e.target.value)) {\n                            handleChange(idx, e);\n                          }\n                        }}\n                      />\n                    )}\n                  </StyledTableCell>\n                </TableRow>\n                <TableRow>\n                  <StyledTableCell align=\"center\">O+</StyledTableCell>\n                  <StyledTableCell align=\"center\">\n                    {readOnly ? (\n                      row.oPosUnits\n                    ) : (\n                      <TextField\n                        name=\"oPosUnits\"\n                        value={row.oPosUnits}\n                        onChange={(e) => {\n                          if (regex.test(e.target.value)) {\n                            handleChange(idx, e);\n                          }\n                        }}\n                      />\n                    )}\n                  </StyledTableCell>\n                  <StyledTableCell align=\"center\">\n                    {readOnly ? (\n                      row.oPosPrice\n                    ) : (\n                      <TextField\n                        name=\"oPosPrice\"\n                        value={row.oPosPrice}\n                        onChange={(e) => {\n                          if (regex.test(e.target.value)) {\n                            handleChange(idx, e);\n                          }\n                        }}\n                      />\n                    )}\n                  </StyledTableCell>\n                </TableRow>\n              </TableBody>\n            ))}\n          </Table>\n        </TableContainer>\n      )}\n    </>\n  );\n}\n","/home/nineleaps/Code/final/RedBank-Web/src/redux/Actions/registerIndividual.js",[],"/home/nineleaps/Code/final/RedBank-Web/src/Components/layouts/footer.js",[],"/home/nineleaps/Code/final/RedBank-Web/src/Components/layouts/navbar.js",["416","417","418","419","420","421","422","423"],"import React, { Fragment, useEffect } from \"react\";\nimport {\n  makeStyles,\n  AppBar,\n  Toolbar,\n  Typography,\n  IconButton,\n  MenuItem,\n  Menu,\n  Button,\n  Badge,\n  MenuIcon,\n  Divider,\n} from \"@material-ui/core/\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\nimport Logo from \"./logo.svg\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { loggingOut } from \"../../redux/Actions/login\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Cookies from \"universal-cookie\";\nimport axios from \"axios\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Popper from \"@material-ui/core/Popper\";\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\nimport Grow from \"@material-ui/core/Grow\";\n// import MenuItem from \"@material-ui/core/MenuItem\";\nimport MenuList from \"@material-ui/core/MenuList\";\nimport AccountBoxRoundedIcon from \"@material-ui/icons/AccountBoxRounded\";\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\nimport InfoIcon from \"@material-ui/icons/Info\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  space: {\n    margin: \"auto\",\n  },\n  logo: {\n    height: 40,\n  },\n  menu: {\n    height: \"400px\",\n    overflow: \"auto\",\n  },\n}));\n\nexport default function MenuAppBar({ user }) {\n  const loggedInState = useSelector((state) => state.loggedIn);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const classes = useStyles();\n  const [notificationsList, setNotifications] = React.useState([]);\n\n  const [open4, setOpen4] = React.useState(false);\n  const [open, setOpen] = React.useState(false);\n  const [open2, setOpen2] = React.useState(false);\n  const [open3, setOpen3] = React.useState(false);\n  const anchorRef = React.useRef(null);\n  const anchorRef2 = React.useRef(null);\n  const anchorRef3 = React.useRef(null);\n\n  const [notify, setNotify] = React.useState(\"\");\n  const [name, setName] = React.useState(\"\");\n\n  const handleClickOpen = () => {\n    setOpen4(true);\n  };\n\n  const handleClose4 = () => {\n    setOpen4(false);\n  };\n\n  const handleToggle = () => {\n    setOpen((prevOpen) => !prevOpen);\n  };\n  const handleToggle2 = () => {\n    setOpen2((prevOpen) => !prevOpen);\n  };\n  const handleToggle3 = () => {\n    setOpen3((prevOpen) => !prevOpen);\n  };\n\n  const handleClose = (event) => {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n\n    setOpen(false);\n  };\n  const handleClose2 = (event) => {\n    if (anchorRef2.current && anchorRef2.current.contains(event.target)) {\n      return;\n    }\n\n    setOpen2(false);\n  };\n  const handleClose3 = (event) => {\n    if (anchorRef3.current && anchorRef3.current.contains(event.target)) {\n      return;\n    }\n\n    setOpen3(false);\n  };\n\n  function handleListKeyDown(event) {\n    if (event.key === \"Tab\") {\n      event.preventDefault();\n      setOpen(false);\n    }\n  }\n  function handleListKeyDown2(event) {\n    if (event.key === \"Tab\") {\n      event.preventDefault();\n      setOpen2(false);\n    }\n  }\n  function handleListKeyDown3(event) {\n    if (event.key === \"Tab\") {\n      event.preventDefault();\n      setOpen3(false);\n    }\n  }\n\n  const handleLogout = async () => {\n    const cookies = new Cookies();\n    dispatch(loggingOut());\n    cookies.remove(\"Auth\", { path: \"/\" });\n    history.push(\"/\");\n  };\n\n  const handleClick2 = (event) => {\n    setOpen((prevOpen) => !prevOpen);\n    axios\n      .get(`http://localhost:8080/notifications`, {\n        headers: {\n          Authorization: \"Bearer \" + loggedInState.userToken,\n        },\n      })\n      .then((response) => {\n        if (response.data[0]) {\n          setNotifications(response.data.reverse());\n        }\n      });\n    setOpen(event.currentTarget);\n  };\n\n  useEffect(() => {\n    if (loggedInState.userType === 1) {\n      axios\n        .get(\"http://localhost:8080/profile/fetchuserprofile\", {\n          headers: {\n            Authorization: \"Bearer \" + loggedInState.userToken,\n          },\n        })\n        .then((response) => {\n          setName(response.data.name);\n          if (response.data.donorStatus === 2) {\n            setNotify(\"not eligible\");\n          } else {\n            setNotify(\"eligible\");\n          }\n        })\n        .catch();\n    }\n  }, []);\n\n  return (\n    <Fragment className={classes.root}>\n      <AppBar position=\"static\" style={{ background: \"#E94364\" }}>\n        <Toolbar>\n          <Typography to=\"/Home\" component={Link} variant=\"h6\">\n            <img src={Logo} alt=\"logo\" className={classes.logo} />\n          </Typography>\n          <Typography className={classes.space}></Typography>\n\n          <div className={classes.sectionDesktop}>\n            <IconButton ref={anchorRef} onClick={handleClick2} color=\"inherit\">\n              <Badge color=\"secondary\">\n                <NotificationsIcon />\n              </Badge>\n            </IconButton>\n            <Popper\n              open={open}\n              anchorEl={anchorRef.current}\n              role={undefined}\n              transition\n              className={classes.menu}\n            >\n              {({ TransitionProps, placement }) => (\n                <Grow\n                  {...TransitionProps}\n                  style={{\n                    transformOrigin:\n                      placement === \"bottom\" ? \"center top\" : \"center bottom\",\n                  }}\n                >\n                  <Paper>\n                    <ClickAwayListener onClickAway={handleClose}>\n                      <MenuList\n                        autoFocusItem={open}\n                        id=\"menu-list-grow\"\n                        onKeyDown={handleListKeyDown}\n                      >\n                        {notificationsList.length === 0 ? (\n                          <MenuItem\n                            onClick={handleClose}\n                            style={{\n                              width: \"300px\",\n                              fontSize: \"13px\",\n                            }}\n                          >\n                            <div\n                              style={{\n                                whiteSpace: \"normal\",\n                                wordWrap: \"break-word\",\n                              }}\n                            >\n                              <p>No new notifications</p>\n                            </div>\n                          </MenuItem>\n                        ) : (\n                          notificationsList.map((val, idx) => (\n                            <>\n                              <MenuItem\n                                onClick={handleClose}\n                                style={{\n                                  width: \"300px\",\n                                  fontSize: \"12px\",\n                                }}\n                              >\n                                <div\n                                  style={{\n                                    whiteSpace: \"normal\",\n                                    wordWrap: \"break-word\",\n                                  }}\n                                >\n                                  <p> {val.message}</p>\n                                </div>\n                              </MenuItem>\n                              <Divider />\n                            </>\n                          ))\n                        )}\n                      </MenuList>\n                    </ClickAwayListener>\n                  </Paper>\n                </Grow>\n              )}\n            </Popper>\n\n            <Button color=\"inherit\" component={Link} to=\"/About\" variant=\"h7\">\n              About\n            </Button>\n            <Button ref={anchorRef2} onClick={handleToggle2} color=\"inherit\">\n              Services\n            </Button>\n\n            <Popper\n              open={open2}\n              anchorEl={anchorRef2.current}\n              role={undefined}\n              transition\n            >\n              {({ TransitionProps, placement }) => (\n                <Grow\n                  {...TransitionProps}\n                  style={{\n                    transformOrigin:\n                      placement === \"bottom\" ? \"center top\" : \"center bottom\",\n                  }}\n                >\n                  <Paper>\n                    <ClickAwayListener onClickAway={handleClose2}>\n                      <MenuList\n                        autoFocusItem={open2}\n                        id=\"menu-list-grow\"\n                        onKeyDown={handleListKeyDown2}\n                      >\n                        {loggedInState.userType === 1 ? (\n                          <>\n                            <MenuItem onClick={handleClose2}>\n                              <Button\n                                onClick={handleClose2}\n                                color=\"inherit\"\n                                component={Link}\n                                to=\"/BuyBlood\"\n                                variant=\"h7\"\n                              >\n                                Buy Blood\n                              </Button>\n                            </MenuItem>\n                            <MenuItem onClick={handleClose2}>\n                              <Button\n                                onClick={handleClose2}\n                                color=\"inherit\"\n                                component={Link}\n                                to=\"/FindDonors\"\n                                variant=\"h7\"\n                              >\n                                Find Donors\n                              </Button>\n                            </MenuItem>\n                            <MenuItem onClick={handleClose2}>\n                              <Button\n                                onClick={handleClose2}\n                                color=\"inherit\"\n                                component={Link}\n                                to=\"/MyCommitments\"\n                                variant=\"h7\"\n                              >\n                                My Commitments\n                              </Button>\n                            </MenuItem>\n                            <MenuItem onClick={handleClose2}>\n                              <Button\n                                onClick={handleClose2}\n                                color=\"inherit\"\n                                component={Link}\n                                to=\"/MyPurchases\"\n                                variant=\"h7\"\n                              >\n                                My Purchases\n                              </Button>\n                            </MenuItem>\n                            <MenuItem onClick={handleClose2}>\n                              <Button\n                                onClick={handleClose2}\n                                color=\"inherit\"\n                                component={Link}\n                                to=\"/MyDonationReq\"\n                                variant=\"h7\"\n                              >\n                                My Donation Requests\n                              </Button>\n                            </MenuItem>\n                            <MenuItem onClick={handleClose2}>\n                              <Button\n                                onClick={handleClose2}\n                                color=\"inherit\"\n                                component={Link}\n                                to=\"/UpcomingDrive\"\n                                variant=\"h7\"\n                              >\n                                Upcoming Drives\n                              </Button>\n                            </MenuItem>\n                            <MenuItem onClick={handleClose2}>\n                              <Button\n                                onClick={handleClose2}\n                                color=\"inherit\"\n                                component={Link}\n                                to=\"/MyInvites\"\n                                variant=\"h7\"\n                              >\n                                My Invites\n                              </Button>\n                            </MenuItem>\n                          </>\n                        ) : (\n                          <>\n                            {loggedInState.userType === 3 ? (\n                              <>\n                                <MenuItem onClick={handleClose2}>\n                                  <Button\n                                    onClick={handleClose2}\n                                    color=\"inherit\"\n                                    component={Link}\n                                    to=\"/BuyBlood\"\n                                    variant=\"h7\"\n                                  >\n                                    Buy Blood\n                                  </Button>\n                                </MenuItem>\n                                <MenuItem onClick={handleClose2}>\n                                  <Button\n                                    onClick={handleClose2}\n                                    color=\"inherit\"\n                                    component={Link}\n                                    to=\"/FindDonors\"\n                                    variant=\"h7\"\n                                  >\n                                    Find Donors\n                                  </Button>\n                                </MenuItem>\n                                <MenuItem onClick={handleClose2}>\n                                  <Button\n                                    onClick={handleClose2}\n                                    color=\"inherit\"\n                                    component={Link}\n                                    to=\"/MyCommitments\"\n                                    variant=\"h7\"\n                                  >\n                                    My Commitments\n                                  </Button>\n                                </MenuItem>\n                                <MenuItem onClick={handleClose2}>\n                                  <Button\n                                    onClick={handleClose2}\n                                    color=\"inherit\"\n                                    component={Link}\n                                    to=\"/MyPurchases\"\n                                    variant=\"h7\"\n                                  >\n                                    My Purchases\n                                  </Button>\n                                </MenuItem>\n                                <MenuItem onClick={handleClose2}>\n                                  <Button\n                                    onClick={handleClose2}\n                                    color=\"inherit\"\n                                    component={Link}\n                                    to=\"/MyDonationReq\"\n                                    variant=\"h7\"\n                                  >\n                                    My Donation Requests\n                                  </Button>\n                                </MenuItem>\n                                <MenuItem onClick={handleClose2}>\n                                  <Button\n                                    onClick={handleClose2}\n                                    color=\"inherit\"\n                                    component={Link}\n                                    to=\"/ConductDrive\"\n                                    variant=\"h7\"\n                                  >\n                                    ConductDrive\n                                  </Button>\n                                </MenuItem>\n                                <MenuItem onClick={handleClose2}>\n                                  <Button\n                                    onClick={handleClose2}\n                                    color=\"inherit\"\n                                    component={Link}\n                                    to=\"/MyDrives\"\n                                    variant=\"h7\"\n                                  >\n                                    My Drives\n                                  </Button>\n                                </MenuItem>\n                                <MenuItem onClick={handleClose2}>\n                                  <Button\n                                    onClick={handleClose2}\n                                    color=\"inherit\"\n                                    component={Link}\n                                    to=\"/MyInventory\"\n                                    variant=\"h7\"\n                                  >\n                                    My Inventory\n                                  </Button>\n                                </MenuItem>\n                                <MenuItem onClick={handleClose2}>\n                                  <Button\n                                    onClick={handleClose2}\n                                    color=\"inherit\"\n                                    component={Link}\n                                    to=\"/MyAnalytics\"\n                                    variant=\"h7\"\n                                  >\n                                    My Analytics\n                                  </Button>\n                                </MenuItem>\n                                <MenuItem onClick={handleClose2}>\n                                  <Button\n                                    onClick={handleClose2}\n                                    color=\"inherit\"\n                                    component={Link}\n                                    to=\"/MySales\"\n                                    variant=\"h7\"\n                                  >\n                                    My Sales\n                                  </Button>\n                                </MenuItem>\n                              </>\n                            ) : (\n                              <>\n                                <MenuItem onClick={handleClose2}>\n                                  <Button\n                                    onClick={handleClose2}\n                                    color=\"inherit\"\n                                    component={Link}\n                                    to=\"/BuyBlood\"\n                                    variant=\"h7\"\n                                  >\n                                    Buy Blood\n                                  </Button>\n                                </MenuItem>\n                                <MenuItem onClick={handleClose2}>\n                                  <Button\n                                    onClick={handleClose2}\n                                    color=\"inherit\"\n                                    component={Link}\n                                    to=\"/FindDonors\"\n                                    variant=\"h7\"\n                                  >\n                                    Find Donors\n                                  </Button>\n                                </MenuItem>\n                                <MenuItem onClick={handleClose2}>\n                                  <Button\n                                    onClick={handleClose2}\n                                    color=\"inherit\"\n                                    component={Link}\n                                    to=\"/MyCommitments\"\n                                    variant=\"h7\"\n                                  >\n                                    My Commitments\n                                  </Button>\n                                </MenuItem>\n                                <MenuItem onClick={handleClose2}>\n                                  <Button\n                                    onClick={handleClose2}\n                                    color=\"inherit\"\n                                    component={Link}\n                                    to=\"/MyPurchases\"\n                                    variant=\"h7\"\n                                  >\n                                    My Purchases\n                                  </Button>\n                                </MenuItem>\n                                <MenuItem onClick={handleClose2}>\n                                  <Button\n                                    onClick={handleClose2}\n                                    color=\"inherit\"\n                                    component={Link}\n                                    to=\"/MyDonationReq\"\n                                    variant=\"h7\"\n                                  >\n                                    My Donation Requests\n                                  </Button>\n                                </MenuItem>\n                                <MenuItem onClick={handleClose2}>\n                                  <Button\n                                    onClick={handleClose2}\n                                    color=\"inherit\"\n                                    component={Link}\n                                    to=\"/ConductDrive\"\n                                    variant=\"h7\"\n                                  >\n                                    ConductDrive\n                                  </Button>\n                                </MenuItem>\n                                <MenuItem onClick={handleClose2}>\n                                  <Button\n                                    onClick={handleClose2}\n                                    color=\"inherit\"\n                                    component={Link}\n                                    to=\"/MyDrives\"\n                                    variant=\"h7\"\n                                  >\n                                    My Drives\n                                  </Button>\n                                </MenuItem>\n                                <MenuItem onClick={handleClose2}>\n                                  <Button\n                                    onClick={handleClose2}\n                                    color=\"inherit\"\n                                    component={Link}\n                                    to=\"/MyInventory\"\n                                    variant=\"h7\"\n                                  >\n                                    My Inventory\n                                  </Button>\n                                </MenuItem>\n                                <MenuItem onClick={handleClose2}>\n                                  <Button\n                                    onClick={handleClose2}\n                                    color=\"inherit\"\n                                    component={Link}\n                                    to=\"/MyAnalytics\"\n                                    variant=\"h7\"\n                                  >\n                                    My Analytics\n                                  </Button>\n                                </MenuItem>\n                              </>\n                            )}\n                          </>\n                        )}\n                      </MenuList>\n                    </ClickAwayListener>\n                  </Paper>\n                </Grow>\n              )}\n            </Popper>\n            <IconButton\n              ref={anchorRef3}\n              onClick={handleToggle3}\n              color=\"inherit\"\n            >\n              <AccountCircleIcon />\n            </IconButton>\n            <Popper\n              open={open3}\n              anchorEl={anchorRef3.current}\n              role={undefined}\n              transition\n            >\n              {({ TransitionProps, placement }) => (\n                <Grow\n                  {...TransitionProps}\n                  style={{\n                    transformOrigin:\n                      placement === \"bottom\" ? \"center top\" : \"center bottom\",\n                  }}\n                >\n                  <Paper>\n                    <ClickAwayListener onClickAway={handleClose3}>\n                      <MenuList\n                        autoFocusItem={open3}\n                        id=\"menu-list-grow\"\n                        onKeyDown={handleListKeyDown3}\n                      >\n                        <MenuItem onClick={handleClose3}>\n                          <AccountBoxRoundedIcon />\n                          <Button\n                            color=\"inherit\"\n                            component={Link}\n                            to=\"/profile\"\n                            variant=\"h7\"\n                          >\n                            Profile\n                          </Button>\n                        </MenuItem>\n                        <MenuItem onClick={handleClose3}>\n                          <ExitToAppIcon />\n                          <Button\n                            color=\"inherit\"\n                            onClick={handleClickOpen}\n                            variant=\"h7\"\n                          >\n                            Logout\n                          </Button>\n                        </MenuItem>\n                      </MenuList>\n                    </ClickAwayListener>\n                  </Paper>\n                </Grow>\n              )}\n            </Popper>\n\n            <Dialog\n              open={open4}\n              onClose={handleClose4}\n              aria-labelledby=\"alert-dialog-title\"\n              aria-describedby=\"alert-dialog-description\"\n            >\n              <DialogTitle id=\"alert-dialog-title\">\n                {\"Are You Sure, you want to logout?\"}\n              </DialogTitle>\n              <DialogContent></DialogContent>\n              <DialogActions>\n                <Button onClick={handleClose4} color=\"inherit\">\n                  No\n                </Button>\n                <Button onClick={handleLogout} color=\"inherit\" autoFocus>\n                  Yes\n                </Button>\n              </DialogActions>\n            </Dialog>\n          </div>\n        </Toolbar>\n      </AppBar>\n    </Fragment>\n  );\n}\n","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/myDrives/table.js",["424","425","426","427","428"],"import React, { useState, useEffect } from \"react\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport Box from \"@material-ui/core/Box\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport { Button } from \"@material-ui/core/\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: theme.palette.common.white,\n    color: theme.palette.common.black,\n    fontWeight: \"bold\",\n    fontSize: 16,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(3),\n  },\n}));\n\nexport default function CollapsibleTable() {\n  const classes = useStyles();\n  const history = useHistory();\n  const [drivesList, setList] = useState([]);\n  const [donorsList, setDonors] = useState([]);\n  const [driveId, setDriveId] = useState(\"\");\n  const loggedInState = useSelector((state) => state.loggedIn);\n\n  useEffect(() => {\n    axios\n      .get(\"http://localhost:8080/mydrives/fetchdrives\", {\n        headers: {\n          Authorization: \"Bearer \" + loggedInState.userToken,\n        },\n      })\n      .then((response) => {\n        console.log(response);\n        if (response.data) {\n          setList(response.data);\n        }\n      });\n\n    setDonors([]);\n  }, []);\n\n  const handleDonorsList = (driveId) => {\n    axios\n      .get(`http://localhost:8080/mydrives/fetchdrivedonorlist/${driveId}`, {\n        headers: {\n          Authorization: \"Bearer \" + loggedInState.userToken,\n        },\n      })\n      .then((response) => {\n        if (response.data[0]) {\n          setDriveId(driveId);\n          setDonors(response.data);\n        }\n      });\n  };\n\n  const handleCancel = (idx, driveId) => {\n    if (window.confirm(\"Are you sure ?\")) {\n      axios\n        .put(\n          \"http://localhost:8080/mydrives/canceldrive\",\n          {\n            driveId: driveId,\n          },\n          {\n            headers: {\n              Authorization: \"Bearer \" + loggedInState.userToken,\n            },\n          }\n        )\n        .then((response) => {\n          console.log(response);\n          if (response.data.success) {\n            const updatedList = [...drivesList];\n            updatedList[idx].status = false;\n            setList(updatedList);\n          }\n        });\n    }\n  };\n\n  useEffect(() => {\n    if (donorsList.length !== 0) {\n      history.push({\n        pathname: \"/acceptedDonors\",\n        donorsList,\n        driveId,\n        setDonors,\n      });\n    }\n  }, [donorsList]);\n\n  return (\n    <TableContainer component={Paper} className={classes.root}>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <StyledTableCell align=\"center\">Drive Id</StyledTableCell>\n            <StyledTableCell align=\"center\">Date</StyledTableCell>\n            <StyledTableCell align=\"center\">Time</StyledTableCell>\n            <StyledTableCell align=\"center\">Address</StyledTableCell>\n            <StyledTableCell align=\"center\">\n              Blood Groups Invited\n            </StyledTableCell>\n            <StyledTableCell align=\"center\">Donors List</StyledTableCell>\n            <StyledTableCell align=\"center\">Status</StyledTableCell>\n            <StyledTableCell align=\"center\">Cancel drive</StyledTableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {drivesList.map((row, idx) => (\n            <TableRow key={idx}>\n              <TableCell align=\"center\">{row.driveId}</TableCell>\n              <TableCell align=\"center\">\n                {row.startTimestamp.split(\"T\")[0]} to{\" \"}\n                {row.endTimestamp.split(\"T\")[0]}\n              </TableCell>\n              <TableCell align=\"center\">\n                {row.startTimestamp.split(\"T\")[1].split(\":\")[0]} :\n                {row.startTimestamp.split(\"T\")[1].split(\":\")[1]} to{\" \"}\n                {row.endTimestamp.split(\"T\")[1].split(\":\")[0]} :\n                {row.endTimestamp.split(\"T\")[1].split(\":\")[1]}\n              </TableCell>\n              <TableCell align=\"center\">\n                {row.address}, {row.district}, {row.state}, {row.pincode}\n              </TableCell>\n              <TableCell align=\"center\">{row.bloodGroups}</TableCell>\n              <TableCell align=\"center\">\n                <Button\n                  size=\"small\"\n                  onClick={(e) => {\n                    handleDonorsList(drivesList[idx].driveId);\n                  }}\n                >\n                  View list\n                </Button>\n              </TableCell>\n              <TableCell align=\"center\">\n                {!drivesList[idx].status ? (\n                  <p style={{ color: \"red\" }}>Canceled</p>\n                ) : new Date(row.endDate).getTime() <= new Date().getTime() ? (\n                  <p style={{ color: \"grey\" }}>Completed</p>\n                ) : new Date(row.startDate).getTime() >=\n                  new Date().getTime() ? (\n                  <p style={{ color: \"#007CFF\" }}> Upcoming</p>\n                ) : (\n                  <p style={{ color: \"green\" }}> Active </p>\n                )}\n              </TableCell>\n              <TableCell align=\"center\">\n                {new Date(row.endDate).getTime() <= new Date().getTime() ? (\n                  <p>N/A</p>\n                ) : (\n                  <Button\n                    size=\"small\"\n                    variant=\"contained\"\n                    onClick={(e) => {\n                      handleCancel(idx, drivesList[idx].driveId);\n                    }}\n                    disabled={!drivesList[idx].status}\n                  >\n                    {drivesList[idx].status ? <p>Cancel</p> : <p>Canceled</p>}\n                  </Button>\n                )}\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/myPurchases/table.js",["429","430","431","432","433","434"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\nimport Paper from \"@material-ui/core/Paper\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Switch from \"@material-ui/core/Switch\";\n\nfunction createData(name, date, bg, component, units, contact, amount) {\n  return { name, date, bg, component, units, contact, amount };\n}\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === \"desc\"\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\nconst headCells = [\n  {\n    id: \"dateOfTransaction\",\n    numeric: true,\n    disablePadding: false,\n    label: \"Date of purchase\",\n  },\n  {\n    id: \"purchaseId\",\n    numeric: false,\n    disablePadding: false,\n    label: \"Purchase Id\",\n  },\n  {\n    id: \"soldComponent\",\n    numeric: false,\n    disablePadding: false,\n    label: \"Component purchased\",\n  },\n  {\n    id: \"soldGroup\",\n    numeric: false,\n    disablePadding: false,\n    label: \"Blood Group purchased\",\n  },\n  {\n    id: \"soldQuantity\",\n    numeric: true,\n    disablePadding: false,\n    label: \"Units purchased\",\n  },\n  {\n    id: \"sellerName\",\n    numeric: false,\n    disablePadding: false,\n    label: \"Seller Name\",\n  },\n  {\n    id: \"sellerContact\",\n    numeric: false,\n    disablePadding: false,\n    label: \"Seller Contact\",\n  },\n  {\n    id: \"sellerEmail\",\n    numeric: false,\n    disablePadding: false,\n    label: \"Seller Email\",\n  },\n  {\n    id: \"amount\",\n    numeric: true,\n    disablePadding: false,\n    label: \"Amount Paid (Rs)\",\n  },\n];\n\nconst useHeaderStyles = makeStyles((theme) => ({\n  head: {\n    fontSize: 17,\n    fontWeight: \"bold\",\n  },\n  body: {\n    fontSize: 14,\n  },\n}));\n\nfunction EnhancedTableHead(props) {\n  const headerClasses = useHeaderStyles();\n  const { classes, order, orderBy, onRequestSort } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align=\"center\"\n            sortDirection={orderBy === headCell.id ? order : false}\n            className={headerClasses.head}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : \"asc\"}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  paper: {\n    width: \"100%\",\n    marginBottom: theme.spacing(2),\n    padding: theme.spacing(1),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: \"rect(0 0 0 0)\",\n    height: 1,\n    margin: -1,\n    overflow: \"hidden\",\n    padding: 0,\n    position: \"absolute\",\n    top: 20,\n    width: 1,\n  },\n}));\n\nexport default function EnhancedTable({ list }) {\n  var List = [];\n  list.map((item) => {\n    List.push(item);\n  });\n\n  const classes = useStyles();\n  const [order, setOrder] = React.useState(\"asc\");\n  const [orderBy, setOrderBy] = React.useState(\"date\");\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === \"asc\";\n    setOrder(isAsc ? \"desc\" : \"asc\");\n    setOrderBy(property);\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const emptyRows =\n    rowsPerPage - Math.min(rowsPerPage, List.length - page * rowsPerPage);\n\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <TableContainer>\n          <Table\n            className={classes.table}\n            aria-labelledby=\"tableTitle\"\n            size=\"medium\"\n          >\n            <EnhancedTableHead\n              classes={classes}\n              order={order}\n              orderBy={orderBy}\n              onRequestSort={handleRequestSort}\n            />\n            <TableBody>\n              {stableSort(List, getComparator(order, orderBy))\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row, index) => {\n                  return (\n                    <TableRow hover tabIndex={-1} key={index}>\n                      <TableCell align=\"center\">\n                        {row.dateOfTransaction.split(\"T\")[0]}\n                      </TableCell>\n                      <TableCell align=\"center\">{row.purchaseId}</TableCell>\n                      <TableCell align=\"center\">{row.soldComponent}</TableCell>\n                      <TableCell align=\"center\">{row.soldGroup}</TableCell>\n                      <TableCell align=\"center\">{row.soldQuantity}</TableCell>\n                      <TableCell align=\"center\">{row.sellerName}</TableCell>\n                      <TableCell align=\"center\">{row.sellerContact}</TableCell>\n                      <TableCell align=\"center\">{row.sellerEmail}</TableCell>\n                      <TableCell align=\"center\">\n                        {row.pricePerUnit * row.soldQuantity}{\" \"}\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={List.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n      </Paper>\n    </div>\n  );\n}\n","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/myCommitments/table.js",["435","436","437","438"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\nimport Paper from \"@material-ui/core/Paper\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Switch from \"@material-ui/core/Switch\";\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === \"desc\"\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\nconst headCells = [\n  {\n    id: \"commitmentDate\",\n    label: \"Date and Time\",\n  },\n  {\n    id: \"commitmentType\",\n    label: \"Commitment type\",\n  },\n  {\n    id: \"driveId\",\n    label: \"Event Id\",\n  },\n  {\n    id: \"address\",\n    label: \"Event Address\",\n  },\n  {\n    id: \"recipientType\",\n    label: \"Recipient Type\",\n  },\n  {\n    id: \"recipientName\",\n    label: \"Recipient Name\",\n  },\n  {\n    id: \"recipientContact\",\n    label: \"Recipient Contact\",\n  },\n  {\n    id: \"recipientEmail\",\n    label: \"Recipient Email\",\n  },\n  {\n    id: \"from\",\n    label: \"From\",\n  },\n  {\n    id: \"to\",\n    label: \"To\",\n  },\n  {\n    id: \"completed\",\n    label: \"status\",\n  },\n];\n\nconst useHeaderStyles = makeStyles((theme) => ({\n  head: {\n    fontSize: 18,\n    fontWeight: \"bold\",\n  },\n  body: {\n    fontSize: 16,\n  },\n}));\n\nfunction EnhancedTableHead(props) {\n  const headerClasses = useHeaderStyles();\n  const { classes, order, orderBy, onRequestSort } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align=\"center\"\n            sortDirection={orderBy === headCell.id ? order : false}\n            className={headerClasses.head}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : \"asc\"}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  paper: {\n    width: \"100%\",\n    marginBottom: theme.spacing(2),\n    padding: theme.spacing(1),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: \"rect(0 0 0 0)\",\n    height: 1,\n    margin: -1,\n    overflow: \"hidden\",\n    padding: 0,\n    position: \"absolute\",\n    top: 20,\n    width: 1,\n  },\n}));\n\nexport default function EnhancedTable({ list }) {\n  var List = [];\n  list.map((item) => {\n    List.push(item);\n  });\n\n  const classes = useStyles();\n  const [order, setOrder] = React.useState(\"asc\");\n  const [orderBy, setOrderBy] = React.useState(\"Id\");\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === \"asc\";\n    setOrder(isAsc ? \"desc\" : \"asc\");\n    setOrderBy(property);\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <TableContainer>\n          <Table\n            className={classes.table}\n            aria-labelledby=\"tableTitle\"\n            size=\"medium\"\n          >\n            <EnhancedTableHead\n              classes={classes}\n              order={order}\n              orderBy={orderBy}\n              onRequestSort={handleRequestSort}\n            />\n            <TableBody>\n              {stableSort(List, getComparator(order, orderBy))\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row, index) => {\n                  return (\n                    <TableRow hover tabIndex={-1} key={row.Id}>\n                      <TableCell align=\"center\">\n                        {row.commitmentType === \"donation\"\n                          ? row.commitment_timeStamp.split(\"T\")[0]\n                          : row.dateTime.split(\"T\")[0]}\n                      </TableCell>\n                      <TableCell id={index} align=\"center\">\n                        {row.commitmentType}\n                      </TableCell>\n                      <TableCell align=\"center\">\n                        {row.commitmentType === \"donation\"\n                          ? row.donationId\n                          : row.driveId}\n                      </TableCell>\n                      <TableCell align=\"center\">\n                        {row.recipientAddress}\n                      </TableCell>\n                      <TableCell align=\"center\">{row.recipientType}</TableCell>\n                      <TableCell align=\"center\">{row.recipientName}</TableCell>\n                      <TableCell align=\"center\">\n                        {row.recipientContact}\n                      </TableCell>\n                      <TableCell align=\"center\">{row.recipientEmail}</TableCell>\n                      <TableCell align=\"center\">\n                        {row.commitmentType === \"donation\" ? (\n                          <p>N/A</p>\n                        ) : (\n                          <p>\n                            {row.startTimeStamp.split(\"T\")[0]},{\" \"}\n                            {row.startTimeStamp.split(\"T\")[1].split(\":\")[0]}:{\" \"}\n                            {row.startTimeStamp.split(\"T\")[1].split(\":\")[1]}{\" \"}\n                          </p>\n                        )}\n                      </TableCell>\n                      <TableCell align=\"center\">\n                        {row.commitmentType === \"donation\" ? (\n                          <p>N/A</p>\n                        ) : (\n                          <p>\n                            {row.endTimeStamp.split(\"T\")[0]},{\" \"}\n                            {row.endTimeStamp.split(\"T\")[1].split(\":\")[0]}:{\" \"}\n                            {row.endTimeStamp.split(\"T\")[1].split(\":\")[1]}{\" \"}\n                          </p>\n                        )}\n                      </TableCell>\n                      <TableCell align=\"center\">\n                        {row.status ? <p>Complete</p> : <p>Incomplete</p>}\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={List.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n      </Paper>\n    </div>\n  );\n}\n","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/MyDonationReq/useTable.js",["439","440","441"],"import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Button from \"@material-ui/core/Button\";\nimport axios from \"axios\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === \"desc\"\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\nconst headCells = [\n  {\n    id: \"requestTime\",\n    numeric: false,\n    label: \"Request Time\",\n    disablePadding: false,\n  },\n  {\n    id: \"donationId\",\n    numeric: false,\n    label: \"Request Id\",\n    disablePadding: false,\n  },\n  {\n    id: \"bloodGroup\",\n    numeric: false,\n    label: \"blood group invited\",\n    disablePadding: false,\n  },\n  {\n    id: \"address\",\n    numeric: false,\n    label: \"Selected location\",\n    disablePadding: false,\n  },\n  {\n    id: \"venue\",\n    numeric: false,\n    label: \"Venue\",\n    disablePadding: false,\n  },\n\n  {\n    id: \"donors\",\n    numeric: false,\n    disableSorting: true,\n    label: \"Invited Donors\",\n    disablePadding: false,\n  },\n  {\n    id: \"status\",\n    numeric: false,\n    label: \"Status of Request\",\n    disableSorting: false,\n    disablePadding: false,\n  },\n  {\n    id: \"expire\",\n    numeric: false,\n    label: \"Expire Request?\",\n    disableSorting: false,\n    disablePadding: false,\n  },\n];\n\nfunction EnhancedTableHead(props) {\n  const { classes, order, orderBy, onRequestSort } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            style={{ fontWeight: \"bold\" }}\n            align=\"center\"\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : \"asc\"}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  paper: {\n    width: \"100%\",\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: \"rect(0 0 0 0)\",\n    height: 1,\n    margin: -1,\n    overflow: \"hidden\",\n    padding: 0,\n    position: \"absolute\",\n    top: 20,\n    width: 1,\n  },\n}));\n\nexport default function EnhancedTable() {\n  const loggedInState = useSelector((state) => state.loggedIn);\n  const [active, setList] = useState([]);\n  const [donorsList, setDonors] = useState([]);\n  const [donationId, setDonationId] = useState(\"\");\n\n  useEffect(() => {\n    axios\n      .get(\"http://localhost:8080/donationrequests/fetchrequests\", {\n        headers: {\n          Authorization: \"Bearer \" + loggedInState.userToken,\n        },\n      })\n      .then((response) => {\n        // if (response.data.success) {\n        setList(response.data);\n        console.log(response);\n        // }\n      })\n      .catch();\n  }, []);\n\n  const history = useHistory();\n  const classes = useStyles();\n  const [order, setOrder] = React.useState(\"asc\");\n  const [orderBy, setOrderBy] = React.useState(\"requestTime\");\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === \"asc\";\n    setOrder(isAsc ? \"desc\" : \"asc\");\n    setOrderBy(property);\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const handleExpire = (e, idx) => {\n    if (window.confirm(\"Are you sure ?\")) {\n      var updatedList = [...active];\n      updatedList[idx].status = false;\n      setList(updatedList);\n\n      axios\n        .put(\n          \"http://localhost:8080/donationrequests/expirerequest\",\n          {\n            donationId: active[idx].donationId,\n          },\n          {\n            headers: {\n              Authorization: \"Bearer \" + loggedInState.userToken,\n            },\n          }\n        )\n        .then((response) => {\n          // if (response.data.success) {\n          console.log(response);\n          // }\n        })\n        .catch();\n    }\n  };\n\n  const handleView = (idx) => {\n    // history.push(\"/inviteesList\");\n    axios\n      .get(\n        `http://localhost:8080/donationrequests/fetchdonationdonorlist/${active[idx].donationId}`,\n        {\n          headers: {\n            Authorization: \"Bearer \" + loggedInState.userToken,\n          },\n        }\n      )\n      .then((response) => {\n        console.log(response);\n        if (response.data[0]) {\n          setDonationId(active[idx].donationId);\n          setDonors(response.data);\n        } else {\n          window.alert(\"Sorry, no list to be shown\");\n        }\n      });\n  };\n\n  useEffect(() => {\n    if (donorsList.length !== 0) {\n      history.push({\n        pathname: \"/inviteesList\",\n        donorsList,\n        donationId,\n        setDonors,\n      });\n    }\n  }, [donorsList]);\n\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <TableContainer>\n          <Table className={classes.table}>\n            <EnhancedTableHead\n              classes={classes}\n              order={order}\n              orderBy={orderBy}\n              onRequestSort={handleRequestSort}\n            />\n            <TableBody>\n              {stableSort(active, getComparator(order, orderBy))\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row, index) => {\n                  return (\n                    <TableRow hover key={index}>\n                      <TableCell align=\"center\">\n                        {row.requestTime.split(\"T\")[0]} at{\"   \"}\n                        {row.requestTime.split(\"T\")[1].split(\":\")[0]} :\n                        {row.requestTime.split(\"T\")[1].split(\":\")[1]}\n                      </TableCell>\n                      <TableCell align=\"center\">{row.donationId}</TableCell>\n                      <TableCell align=\"center\">\n                        {row.bloodGroup ? row.bloodGroup : <p>NA</p>}\n                      </TableCell>\n                      <TableCell align=\"center\">\n                        {row.district}, {row.state}, {row.pincode}\n                      </TableCell>\n                      <TableCell align=\"center\">{row.address}</TableCell>\n\n                      <TableCell align=\"center\">\n                        <Button\n                          onClick={(e) => {\n                            handleView(index);\n                          }}\n                        >\n                          View List\n                        </Button>\n                      </TableCell>\n                      <TableCell align=\"center\">\n                        {row.status ? <p>Active</p> : <p>Expired</p>}\n                      </TableCell>\n\n                      <TableCell align=\"center\">\n                        <Button\n                          type=\"button\"\n                          variant=\"contained\"\n                          disabled={!active[index].status}\n                          onClick={(e) => {\n                            handleExpire(e, index);\n                          }}\n                        >\n                          Expire\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={active.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n      </Paper>\n    </div>\n  );\n}","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/services/upcomingDrive/useTable.js",["442","443","444","445","446","447","448","449","450","451","452","453","454","455","456","457","458","459","460"],"import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport clsx from \"clsx\";\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Switch from \"@material-ui/core/Switch\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { useHistory } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === \"desc\"\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\nconst headCells = [\n  {\n    id: \"name\",\n    numeric: false,\n    disablePadding: false,\n    label: \"Organiser Name\",\n  },\n  {\n    id: \"date\",\n    numeric: false,\n    disablePadding: false,\n    label: \"Date\",\n  },\n  {\n    id: \"time\",\n    numeric: false,\n    disablePadding: false,\n    label: \"Time\",\n  },\n  {\n    id: \"address\",\n    numeric: false,\n    disablePadding: false,\n    label: \"Address\",\n  },\n  {\n    id: \"contact\",\n    numeric: false,\n    disablePadding: false,\n    label: \"Contact\",\n  },\n  {\n    id: \"bloodGroups\",\n    numeric: false,\n    disablePadding: false,\n    label: \"Invited Blood Groups\",\n  },\n  {\n    id: \"register\",\n    numeric: false,\n    disablePadding: false,\n    label: \"Register here\",\n  },\n];\n\nfunction EnhancedTableHead(props) {\n  const { classes, order, orderBy, onRequestSort } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            style={{ fontWeight: \"bold\" }}\n            align=\"center\"\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : \"asc\"}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles((theme) => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n  },\n  highlight:\n    theme.palette.type === \"light\"\n      ? {\n          color: \"theme.palette.secondary.main\",\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n        }\n      : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.secondary.dark,\n        },\n  title: {\n    flex: \"1 1 100%\",\n  },\n}));\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  paper: {\n    width: \"100%\",\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: \"rect(0 0 0 0)\",\n    height: 1,\n    margin: -1,\n    overflow: \"hidden\",\n    padding: 0,\n    position: \"absolute\",\n    top: 20,\n    width: 1,\n  },\n}));\n\nexport default function EnhancedTable({ list }) {\n  // console.log(props.list)\n  // const [list, setState] =useState(props.list);\n  var List = [];\n  list.map((item) => {\n    List.push(item);\n  });\n\n  const loggedInState = useSelector((state) => state.loggedIn);\n  const classes = useStyles();\n  const [order, setOrder] = React.useState(\"asc\");\n  const [orderBy, setOrderBy] = React.useState(\"contact\");\n\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === \"asc\";\n    setOrder(isAsc ? \"desc\" : \"asc\");\n    setOrderBy(property);\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const handleRegister = (driveId) => {\n    axios\n      .post(\n        \"http://localhost:8080/upcomingdrives/registerfordrive\",\n        {\n          driveId: \"DRV01\",\n        },\n        {\n          headers: {\n            Authorization: \"Bearer \" + loggedInState.userToken,\n          },\n        }\n      )\n      .then((response) => {\n        if (response.data.success) {\n          console.log(response);\n          window.alert(\"Successfully Registered\");\n        } else {\n          console.log(response);\n          window.alert(\"You are already Registered\");\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <TableContainer>\n          <Table className={classes.table} size=\"medium\">\n            <EnhancedTableHead\n              classes={classes}\n              order={order}\n              orderBy={orderBy}\n              onRequestSort={handleRequestSort}\n            />\n            <TableBody>\n              {stableSort(List, getComparator(order, orderBy))\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row, index) => {\n                  return (\n                    <TableRow hover tabIndex={-1} key={row.driveId}>\n                      <TableCell align=\"center\">{row.name}</TableCell>\n                      <TableCell align=\"center\">\n                        {row.startTimestamp.split(\"T\")[0]} --{\" \"}\n                        {row.endTimestamp.split(\"T\")[0]}\n                      </TableCell>\n                      <TableCell align=\"center\">\n                        {row.startTimestamp.split(\"T\")[1].split(\":\")[0]} :\n                        {row.startTimestamp.split(\"T\")[1].split(\":\")[1]} --{\" \"}\n                        {row.endTimestamp.split(\"T\")[1].split(\":\")[0]} :\n                        {row.endTimestamp.split(\"T\")[1].split(\":\")[1]}\n                      </TableCell>\n                      <TableCell align=\"center\">\n                        {row.address}, {row.district}, {row.state},{row.pincode}\n                      </TableCell>\n                      <TableCell align=\"center\">{row.contact}</TableCell>\n                      <TableCell align=\"center\">{row.bloodGroups}</TableCell>\n                      <TableCell align=\"center\">\n                        <Button onClick={(e) => handleRegister(row.driveId)}>\n                          Register\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={List.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n      </Paper>\n    </div>\n  );\n}\n","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/home/serviceCard.js",["461","462","463","464"],"import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Typography,\n  Box,\n  Container,\n  Grid,\n  Card,\n  CardMedia,\n  CardActionArea,\n  CardContent,\n  CardActions,\n  Button,\n  Divider,\n} from \"@material-ui/core/\";\nimport { useHistory } from \"react-router-dom\";\nimport ForwardIcon from \"@material-ui/icons/Forward\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    maxWidth: 345,\n    height: 350,\n  },\n}));\n\nfunction ServiceCard({ img, name, descp, page }) {\n  const classes = useStyles();\n  console.log(img);\n  const history = useHistory();\n\n  const handleClick = () => {\n    history.push({\n      pathname: page,\n    });\n  };\n\n  return (\n    <>\n      <Card className={classes.root}>\n        <CardActionArea>\n          <CardMedia component=\"img\" image={img} height=\"150\" />\n          <CardContent>\n            <Typography gutterBottom variant=\"h6\" component=\"h2\">\n              {name}\n            </Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n              {descp}\n            </Typography>\n          </CardContent>\n        </CardActionArea>\n        <CardActions>\n          <Button\n            size=\"small\"\n            color=\"secondary\"\n            onClick={handleClick}\n            endIcon={<ForwardIcon />}\n          >\n            Click here\n          </Button>\n        </CardActions>\n      </Card>\n    </>\n  );\n}\n\nexport default ServiceCard;\n","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/profile/pageHeader.js",["465"],"/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/profile/profile.js",["466"],"import React from \"react\";\nimport IndProfile from \"./indProfile\";\nimport HosProfile from \"./hospProfile\";\nimport BbProfile from \"./bbProfile\";\nimport { makeStyles, Paper } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport logging from \"../../../redux/Actions/login\";\n\nconst useStyles = makeStyles((theme) => ({\n  paperStyle: {\n    margin: theme.spacing(5),\n    padding: theme.spacing(3),\n  },\n}));\n\nfunction Profile() {\n  const classes = useStyles();\n  const loggedInState = useSelector((state) => state.loggedIn);\n  return (\n    <>\n      <Paper className={classes.paperStyle} elevation={5}>\n        {loggedInState.userType === 1 ? (\n          <IndProfile />\n        ) : (\n          <>{loggedInState.userType === 2 ? <HosProfile /> : <BbProfile />}</>\n        )}\n      </Paper>\n    </>\n  );\n}\n\nexport default Profile;\n","/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/home/services/Services.js",[],"/home/nineleaps/Code/final/RedBank-Web/src/redux/Actions/registerHospital.js",[],"/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/profile/indProfile.js",["467","468","469","470","471","472","473","474","475","476","477"],"/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/profile/hospProfile.js",["478","479","480","481","482","483","484","485","486","487","488"],"/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/profile/bbProfile.js",["489","490","491","492","493","494","495","496","497","498","499","500","501"],"/home/nineleaps/Code/final/RedBank-Web/src/Components/screen/profile/useForm.js",[],{"ruleId":"502","replacedBy":"503"},{"ruleId":"504","replacedBy":"505"},{"ruleId":"506","severity":1,"message":"507","line":39,"column":8,"nodeType":"508","messageId":"509","endLine":39,"endColumn":16},{"ruleId":"506","severity":1,"message":"510","line":7,"column":8,"nodeType":"508","messageId":"509","endLine":7,"endColumn":11},{"ruleId":"506","severity":1,"message":"511","line":1,"column":17,"nodeType":"508","messageId":"509","endLine":1,"endColumn":25},{"ruleId":"506","severity":1,"message":"512","line":2,"column":10,"nodeType":"508","messageId":"509","endLine":2,"endColumn":14},{"ruleId":"506","severity":1,"message":"510","line":6,"column":8,"nodeType":"508","messageId":"509","endLine":6,"endColumn":11},{"ruleId":"506","severity":1,"message":"512","line":2,"column":10,"nodeType":"508","messageId":"509","endLine":2,"endColumn":14},{"ruleId":"506","severity":1,"message":"513","line":3,"column":3,"nodeType":"508","messageId":"509","endLine":3,"endColumn":8},{"ruleId":"506","severity":1,"message":"514","line":5,"column":3,"nodeType":"508","messageId":"509","endLine":5,"endColumn":9},{"ruleId":"506","severity":1,"message":"515","line":6,"column":3,"nodeType":"508","messageId":"509","endLine":6,"endColumn":11},{"ruleId":"506","severity":1,"message":"516","line":7,"column":3,"nodeType":"508","messageId":"509","endLine":7,"endColumn":13},{"ruleId":"506","severity":1,"message":"517","line":8,"column":3,"nodeType":"508","messageId":"509","endLine":8,"endColumn":14},{"ruleId":"506","severity":1,"message":"518","line":9,"column":3,"nodeType":"508","messageId":"509","endLine":9,"endColumn":9},{"ruleId":"506","severity":1,"message":"519","line":10,"column":3,"nodeType":"508","messageId":"509","endLine":10,"endColumn":19},{"ruleId":"506","severity":1,"message":"520","line":11,"column":3,"nodeType":"508","messageId":"509","endLine":11,"endColumn":11},{"ruleId":"506","severity":1,"message":"521","line":12,"column":3,"nodeType":"508","messageId":"509","endLine":12,"endColumn":13},{"ruleId":"506","severity":1,"message":"522","line":13,"column":3,"nodeType":"508","messageId":"509","endLine":13,"endColumn":14},{"ruleId":"506","severity":1,"message":"511","line":16,"column":17,"nodeType":"508","messageId":"509","endLine":16,"endColumn":25},{"ruleId":"506","severity":1,"message":"512","line":17,"column":10,"nodeType":"508","messageId":"509","endLine":17,"endColumn":14},{"ruleId":"506","severity":1,"message":"523","line":17,"column":16,"nodeType":"508","messageId":"509","endLine":17,"endColumn":26},{"ruleId":"506","severity":1,"message":"524","line":18,"column":8,"nodeType":"508","messageId":"509","endLine":18,"endColumn":16},{"ruleId":"506","severity":1,"message":"525","line":19,"column":8,"nodeType":"508","messageId":"509","endLine":19,"endColumn":14},{"ruleId":"506","severity":1,"message":"510","line":20,"column":8,"nodeType":"508","messageId":"509","endLine":20,"endColumn":11},{"ruleId":"506","severity":1,"message":"526","line":22,"column":8,"nodeType":"508","messageId":"509","endLine":22,"endColumn":13},{"ruleId":"506","severity":1,"message":"527","line":23,"column":8,"nodeType":"508","messageId":"509","endLine":23,"endColumn":15},{"ruleId":"506","severity":1,"message":"528","line":25,"column":10,"nodeType":"508","messageId":"509","endLine":25,"endColumn":21},{"ruleId":"506","severity":1,"message":"529","line":25,"column":23,"nodeType":"508","messageId":"509","endLine":25,"endColumn":34},{"ruleId":"506","severity":1,"message":"530","line":26,"column":8,"nodeType":"508","messageId":"509","endLine":26,"endColumn":24},{"ruleId":"506","severity":1,"message":"531","line":37,"column":9,"nodeType":"508","messageId":"509","endLine":37,"endColumn":16},{"ruleId":"506","severity":1,"message":"532","line":2,"column":10,"nodeType":"508","messageId":"509","endLine":2,"endColumn":20},{"ruleId":"506","severity":1,"message":"529","line":6,"column":10,"nodeType":"508","messageId":"509","endLine":6,"endColumn":21},{"ruleId":"533","severity":1,"message":"534","line":20,"column":5,"nodeType":"535","endLine":20,"endColumn":7,"suggestions":"536"},{"ruleId":"506","severity":1,"message":"529","line":6,"column":10,"nodeType":"508","messageId":"509","endLine":6,"endColumn":21},{"ruleId":"506","severity":1,"message":"527","line":7,"column":8,"nodeType":"508","messageId":"509","endLine":7,"endColumn":15},{"ruleId":"533","severity":1,"message":"537","line":74,"column":6,"nodeType":"535","endLine":74,"endColumn":8,"suggestions":"538"},{"ruleId":"506","severity":1,"message":"539","line":1,"column":27,"nodeType":"508","messageId":"509","endLine":1,"endColumn":36},{"ruleId":"506","severity":1,"message":"540","line":15,"column":8,"nodeType":"508","messageId":"509","endLine":15,"endColumn":23},{"ruleId":"506","severity":1,"message":"529","line":19,"column":10,"nodeType":"508","messageId":"509","endLine":19,"endColumn":21},{"ruleId":"506","severity":1,"message":"541","line":40,"column":23,"nodeType":"508","messageId":"509","endLine":40,"endColumn":32},{"ruleId":"506","severity":1,"message":"539","line":1,"column":27,"nodeType":"508","messageId":"509","endLine":1,"endColumn":36},{"ruleId":"506","severity":1,"message":"511","line":1,"column":17,"nodeType":"508","messageId":"509","endLine":1,"endColumn":25},{"ruleId":"506","severity":1,"message":"539","line":1,"column":27,"nodeType":"508","messageId":"509","endLine":1,"endColumn":36},{"ruleId":"506","severity":1,"message":"526","line":11,"column":8,"nodeType":"508","messageId":"509","endLine":11,"endColumn":13},{"ruleId":"506","severity":1,"message":"542","line":15,"column":8,"nodeType":"508","messageId":"509","endLine":15,"endColumn":25},{"ruleId":"506","severity":1,"message":"529","line":19,"column":10,"nodeType":"508","messageId":"509","endLine":19,"endColumn":21},{"ruleId":"506","severity":1,"message":"529","line":12,"column":10,"nodeType":"508","messageId":"509","endLine":12,"endColumn":21},{"ruleId":"533","severity":1,"message":"543","line":50,"column":6,"nodeType":"535","endLine":50,"endColumn":8,"suggestions":"544"},{"ruleId":"533","severity":1,"message":"543","line":48,"column":6,"nodeType":"535","endLine":48,"endColumn":8,"suggestions":"545"},{"ruleId":"506","severity":1,"message":"511","line":1,"column":17,"nodeType":"508","messageId":"509","endLine":1,"endColumn":25},{"ruleId":"506","severity":1,"message":"539","line":1,"column":27,"nodeType":"508","messageId":"509","endLine":1,"endColumn":36},{"ruleId":"506","severity":1,"message":"526","line":10,"column":8,"nodeType":"508","messageId":"509","endLine":10,"endColumn":13},{"ruleId":"506","severity":1,"message":"529","line":12,"column":10,"nodeType":"508","messageId":"509","endLine":12,"endColumn":21},{"ruleId":"506","severity":1,"message":"541","line":42,"column":23,"nodeType":"508","messageId":"509","endLine":42,"endColumn":32},{"ruleId":"506","severity":1,"message":"511","line":1,"column":17,"nodeType":"508","messageId":"509","endLine":1,"endColumn":25},{"ruleId":"533","severity":1,"message":"543","line":50,"column":6,"nodeType":"535","endLine":50,"endColumn":8,"suggestions":"546"},{"ruleId":"506","severity":1,"message":"511","line":1,"column":17,"nodeType":"508","messageId":"509","endLine":1,"endColumn":25},{"ruleId":"506","severity":1,"message":"539","line":1,"column":27,"nodeType":"508","messageId":"509","endLine":1,"endColumn":36},{"ruleId":"506","severity":1,"message":"526","line":10,"column":8,"nodeType":"508","messageId":"509","endLine":10,"endColumn":13},{"ruleId":"506","severity":1,"message":"528","line":12,"column":10,"nodeType":"508","messageId":"509","endLine":12,"endColumn":21},{"ruleId":"506","severity":1,"message":"547","line":73,"column":20,"nodeType":"508","messageId":"509","endLine":73,"endColumn":31},{"ruleId":"506","severity":1,"message":"528","line":25,"column":10,"nodeType":"508","messageId":"509","endLine":25,"endColumn":21},{"ruleId":"506","severity":1,"message":"548","line":26,"column":8,"nodeType":"508","messageId":"509","endLine":26,"endColumn":26},{"ruleId":"506","severity":1,"message":"547","line":72,"column":20,"nodeType":"508","messageId":"509","endLine":72,"endColumn":31},{"ruleId":"506","severity":1,"message":"549","line":8,"column":3,"nodeType":"508","messageId":"509","endLine":8,"endColumn":7},{"ruleId":"506","severity":1,"message":"550","line":9,"column":3,"nodeType":"508","messageId":"509","endLine":9,"endColumn":12},{"ruleId":"506","severity":1,"message":"551","line":21,"column":8,"nodeType":"508","messageId":"509","endLine":21,"endColumn":18},{"ruleId":"506","severity":1,"message":"539","line":1,"column":17,"nodeType":"508","messageId":"509","endLine":1,"endColumn":26},{"ruleId":"506","severity":1,"message":"510","line":20,"column":8,"nodeType":"508","messageId":"509","endLine":20,"endColumn":11},{"ruleId":"506","severity":1,"message":"529","line":22,"column":10,"nodeType":"508","messageId":"509","endLine":22,"endColumn":21},{"ruleId":"552","severity":1,"message":"553","line":124,"column":34,"nodeType":"554","messageId":"555","endLine":124,"endColumn":36},{"ruleId":"506","severity":1,"message":"510","line":20,"column":8,"nodeType":"508","messageId":"509","endLine":20,"endColumn":11},{"ruleId":"506","severity":1,"message":"529","line":22,"column":10,"nodeType":"508","messageId":"509","endLine":22,"endColumn":21},{"ruleId":"552","severity":1,"message":"553","line":130,"column":34,"nodeType":"554","messageId":"555","endLine":130,"endColumn":36},{"ruleId":"506","severity":1,"message":"556","line":22,"column":8,"nodeType":"508","messageId":"509","endLine":22,"endColumn":17},{"ruleId":"533","severity":1,"message":"557","line":136,"column":6,"nodeType":"535","endLine":136,"endColumn":8,"suggestions":"558"},{"ruleId":"506","severity":1,"message":"559","line":17,"column":8,"nodeType":"508","messageId":"509","endLine":17,"endColumn":20},{"ruleId":"506","severity":1,"message":"510","line":20,"column":8,"nodeType":"508","messageId":"509","endLine":20,"endColumn":11},{"ruleId":"506","severity":1,"message":"542","line":24,"column":8,"nodeType":"508","messageId":"509","endLine":24,"endColumn":25},{"ruleId":"506","severity":1,"message":"529","line":27,"column":10,"nodeType":"508","messageId":"509","endLine":27,"endColumn":21},{"ruleId":"506","severity":1,"message":"560","line":110,"column":9,"nodeType":"508","messageId":"509","endLine":110,"endColumn":24},{"ruleId":"506","severity":1,"message":"561","line":4,"column":10,"nodeType":"508","messageId":"509","endLine":4,"endColumn":17},{"ruleId":"506","severity":1,"message":"519","line":14,"column":8,"nodeType":"508","messageId":"509","endLine":14,"endColumn":24},{"ruleId":"506","severity":1,"message":"562","line":15,"column":8,"nodeType":"508","messageId":"509","endLine":15,"endColumn":14},{"ruleId":"563","severity":1,"message":"564","line":184,"column":19,"nodeType":"565","messageId":"566","endLine":184,"endColumn":21},{"ruleId":"506","severity":1,"message":"561","line":4,"column":10,"nodeType":"508","messageId":"509","endLine":4,"endColumn":17},{"ruleId":"506","severity":1,"message":"519","line":14,"column":8,"nodeType":"508","messageId":"509","endLine":14,"endColumn":24},{"ruleId":"506","severity":1,"message":"562","line":15,"column":8,"nodeType":"508","messageId":"509","endLine":15,"endColumn":14},{"ruleId":"506","severity":1,"message":"567","line":18,"column":10,"nodeType":"508","messageId":"509","endLine":18,"endColumn":15},{"ruleId":"506","severity":1,"message":"568","line":18,"column":17,"nodeType":"508","messageId":"509","endLine":18,"endColumn":26},{"ruleId":"533","severity":1,"message":"543","line":197,"column":6,"nodeType":"535","endLine":197,"endColumn":8,"suggestions":"569"},{"ruleId":"506","severity":1,"message":"521","line":5,"column":8,"nodeType":"508","messageId":"509","endLine":5,"endColumn":18},{"ruleId":"506","severity":1,"message":"570","line":6,"column":8,"nodeType":"508","messageId":"509","endLine":6,"endColumn":18},{"ruleId":"506","severity":1,"message":"571","line":7,"column":8,"nodeType":"508","messageId":"509","endLine":7,"endColumn":16},{"ruleId":"506","severity":1,"message":"572","line":2,"column":10,"nodeType":"508","messageId":"509","endLine":2,"endColumn":13},{"ruleId":"506","severity":1,"message":"570","line":17,"column":8,"nodeType":"508","messageId":"509","endLine":17,"endColumn":18},{"ruleId":"506","severity":1,"message":"573","line":18,"column":8,"nodeType":"508","messageId":"509","endLine":18,"endColumn":15},{"ruleId":"506","severity":1,"message":"519","line":19,"column":8,"nodeType":"508","messageId":"509","endLine":19,"endColumn":24},{"ruleId":"506","severity":1,"message":"562","line":20,"column":8,"nodeType":"508","messageId":"509","endLine":20,"endColumn":14},{"ruleId":"506","severity":1,"message":"512","line":22,"column":10,"nodeType":"508","messageId":"509","endLine":22,"endColumn":14},{"ruleId":"506","severity":1,"message":"574","line":24,"column":8,"nodeType":"508","messageId":"509","endLine":24,"endColumn":16},{"ruleId":"506","severity":1,"message":"575","line":132,"column":24,"nodeType":"508","messageId":"509","endLine":132,"endColumn":28},{"ruleId":"563","severity":1,"message":"564","line":179,"column":19,"nodeType":"565","messageId":"566","endLine":179,"endColumn":21},{"ruleId":"506","severity":1,"message":"576","line":187,"column":10,"nodeType":"508","messageId":"509","endLine":187,"endColumn":18},{"ruleId":"506","severity":1,"message":"577","line":187,"column":20,"nodeType":"508","messageId":"509","endLine":187,"endColumn":31},{"ruleId":"506","severity":1,"message":"529","line":23,"column":10,"nodeType":"508","messageId":"509","endLine":23,"endColumn":21},{"ruleId":"563","severity":1,"message":"564","line":288,"column":19,"nodeType":"565","messageId":"566","endLine":288,"endColumn":21},{"ruleId":"506","severity":1,"message":"578","line":345,"column":9,"nodeType":"508","messageId":"509","endLine":345,"endColumn":18},{"ruleId":"533","severity":1,"message":"543","line":63,"column":6,"nodeType":"535","endLine":63,"endColumn":8,"suggestions":"579"},{"ruleId":"552","severity":1,"message":"580","line":148,"column":31,"nodeType":"554","messageId":"555","endLine":148,"endColumn":33},{"ruleId":"506","severity":1,"message":"581","line":9,"column":3,"nodeType":"508","messageId":"509","endLine":9,"endColumn":7},{"ruleId":"506","severity":1,"message":"571","line":12,"column":3,"nodeType":"508","messageId":"509","endLine":12,"endColumn":11},{"ruleId":"506","severity":1,"message":"542","line":23,"column":8,"nodeType":"508","messageId":"509","endLine":23,"endColumn":25},{"ruleId":"506","severity":1,"message":"582","line":36,"column":8,"nodeType":"508","messageId":"509","endLine":36,"endColumn":16},{"ruleId":"506","severity":1,"message":"583","line":72,"column":10,"nodeType":"508","messageId":"509","endLine":72,"endColumn":16},{"ruleId":"506","severity":1,"message":"584","line":73,"column":10,"nodeType":"508","messageId":"509","endLine":73,"endColumn":14},{"ruleId":"506","severity":1,"message":"585","line":83,"column":9,"nodeType":"508","messageId":"509","endLine":83,"endColumn":21},{"ruleId":"533","severity":1,"message":"537","line":175,"column":6,"nodeType":"535","endLine":175,"endColumn":8,"suggestions":"586"},{"ruleId":"506","severity":1,"message":"587","line":3,"column":8,"nodeType":"508","messageId":"509","endLine":3,"endColumn":11},{"ruleId":"506","severity":1,"message":"588","line":4,"column":8,"nodeType":"508","messageId":"509","endLine":4,"endColumn":16},{"ruleId":"506","severity":1,"message":"529","line":15,"column":10,"nodeType":"508","messageId":"509","endLine":15,"endColumn":21},{"ruleId":"533","severity":1,"message":"543","line":58,"column":6,"nodeType":"535","endLine":58,"endColumn":8,"suggestions":"589"},{"ruleId":"533","severity":1,"message":"590","line":109,"column":6,"nodeType":"535","endLine":109,"endColumn":18,"suggestions":"591"},{"ruleId":"506","severity":1,"message":"561","line":4,"column":10,"nodeType":"508","messageId":"509","endLine":4,"endColumn":17},{"ruleId":"506","severity":1,"message":"519","line":14,"column":8,"nodeType":"508","messageId":"509","endLine":14,"endColumn":24},{"ruleId":"506","severity":1,"message":"562","line":15,"column":8,"nodeType":"508","messageId":"509","endLine":15,"endColumn":14},{"ruleId":"506","severity":1,"message":"592","line":17,"column":10,"nodeType":"508","messageId":"509","endLine":17,"endColumn":20},{"ruleId":"563","severity":1,"message":"564","line":187,"column":19,"nodeType":"565","messageId":"566","endLine":187,"endColumn":21},{"ruleId":"506","severity":1,"message":"578","line":212,"column":9,"nodeType":"508","messageId":"509","endLine":212,"endColumn":18},{"ruleId":"506","severity":1,"message":"561","line":4,"column":10,"nodeType":"508","messageId":"509","endLine":4,"endColumn":17},{"ruleId":"506","severity":1,"message":"519","line":14,"column":8,"nodeType":"508","messageId":"509","endLine":14,"endColumn":24},{"ruleId":"506","severity":1,"message":"562","line":15,"column":8,"nodeType":"508","messageId":"509","endLine":15,"endColumn":14},{"ruleId":"563","severity":1,"message":"564","line":173,"column":19,"nodeType":"565","messageId":"566","endLine":173,"endColumn":21},{"ruleId":"506","severity":1,"message":"529","line":15,"column":10,"nodeType":"508","messageId":"509","endLine":15,"endColumn":21},{"ruleId":"533","severity":1,"message":"543","line":186,"column":6,"nodeType":"535","endLine":186,"endColumn":8,"suggestions":"593"},{"ruleId":"533","severity":1,"message":"594","line":268,"column":6,"nodeType":"535","endLine":268,"endColumn":18,"suggestions":"595"},{"ruleId":"506","severity":1,"message":"511","line":1,"column":17,"nodeType":"508","messageId":"509","endLine":1,"endColumn":25},{"ruleId":"506","severity":1,"message":"596","line":3,"column":8,"nodeType":"508","messageId":"509","endLine":3,"endColumn":12},{"ruleId":"506","severity":1,"message":"597","line":13,"column":8,"nodeType":"508","messageId":"509","endLine":13,"endColumn":15},{"ruleId":"506","severity":1,"message":"521","line":14,"column":8,"nodeType":"508","messageId":"509","endLine":14,"endColumn":18},{"ruleId":"506","severity":1,"message":"520","line":16,"column":8,"nodeType":"508","messageId":"509","endLine":16,"endColumn":16},{"ruleId":"506","severity":1,"message":"570","line":17,"column":8,"nodeType":"508","messageId":"509","endLine":17,"endColumn":18},{"ruleId":"506","severity":1,"message":"573","line":18,"column":8,"nodeType":"508","messageId":"509","endLine":18,"endColumn":15},{"ruleId":"506","severity":1,"message":"519","line":19,"column":8,"nodeType":"508","messageId":"509","endLine":19,"endColumn":24},{"ruleId":"506","severity":1,"message":"562","line":20,"column":8,"nodeType":"508","messageId":"509","endLine":20,"endColumn":14},{"ruleId":"506","severity":1,"message":"574","line":21,"column":8,"nodeType":"508","messageId":"509","endLine":21,"endColumn":16},{"ruleId":"506","severity":1,"message":"598","line":23,"column":8,"nodeType":"508","messageId":"509","endLine":23,"endColumn":14},{"ruleId":"506","severity":1,"message":"599","line":24,"column":8,"nodeType":"508","messageId":"509","endLine":24,"endColumn":21},{"ruleId":"506","severity":1,"message":"600","line":25,"column":8,"nodeType":"508","messageId":"509","endLine":25,"endColumn":21},{"ruleId":"506","severity":1,"message":"542","line":26,"column":8,"nodeType":"508","messageId":"509","endLine":26,"endColumn":25},{"ruleId":"506","severity":1,"message":"601","line":27,"column":8,"nodeType":"508","messageId":"509","endLine":27,"endColumn":19},{"ruleId":"506","severity":1,"message":"523","line":28,"column":10,"nodeType":"508","messageId":"509","endLine":28,"endColumn":20},{"ruleId":"506","severity":1,"message":"529","line":30,"column":10,"nodeType":"508","messageId":"509","endLine":30,"endColumn":21},{"ruleId":"506","severity":1,"message":"602","line":148,"column":7,"nodeType":"508","messageId":"509","endLine":148,"endColumn":23},{"ruleId":"563","severity":1,"message":"564","line":196,"column":19,"nodeType":"565","messageId":"566","endLine":196,"endColumn":21},{"ruleId":"506","severity":1,"message":"587","line":5,"column":3,"nodeType":"508","messageId":"509","endLine":5,"endColumn":6},{"ruleId":"506","severity":1,"message":"603","line":6,"column":3,"nodeType":"508","messageId":"509","endLine":6,"endColumn":12},{"ruleId":"506","severity":1,"message":"604","line":7,"column":3,"nodeType":"508","messageId":"509","endLine":7,"endColumn":7},{"ruleId":"506","severity":1,"message":"605","line":14,"column":3,"nodeType":"508","messageId":"509","endLine":14,"endColumn":10},{"ruleId":"506","severity":1,"message":"549","line":2,"column":3,"nodeType":"508","messageId":"509","endLine":2,"endColumn":7},{"ruleId":"506","severity":1,"message":"527","line":7,"column":8,"nodeType":"508","messageId":"509","endLine":7,"endColumn":15},{"ruleId":"506","severity":1,"message":"522","line":7,"column":3,"nodeType":"508","messageId":"509","endLine":7,"endColumn":14},{"ruleId":"506","severity":1,"message":"603","line":12,"column":3,"nodeType":"508","messageId":"509","endLine":12,"endColumn":12},{"ruleId":"506","severity":1,"message":"606","line":16,"column":3,"nodeType":"508","messageId":"509","endLine":16,"endColumn":8},{"ruleId":"506","severity":1,"message":"549","line":24,"column":3,"nodeType":"508","messageId":"509","endLine":24,"endColumn":7},{"ruleId":"506","severity":1,"message":"607","line":25,"column":3,"nodeType":"508","messageId":"509","endLine":25,"endColumn":17},{"ruleId":"506","severity":1,"message":"512","line":34,"column":10,"nodeType":"508","messageId":"509","endLine":34,"endColumn":14},{"ruleId":"533","severity":1,"message":"608","line":180,"column":6,"nodeType":"535","endLine":180,"endColumn":8,"suggestions":"609"},{"ruleId":"533","severity":1,"message":"543","line":199,"column":8,"nodeType":"535","endLine":199,"endColumn":37,"suggestions":"610"},{"ruleId":"506","severity":1,"message":"611","line":228,"column":10,"nodeType":"508","messageId":"509","endLine":228,"endColumn":16},{"ruleId":"506","severity":1,"message":"612","line":228,"column":18,"nodeType":"508","messageId":"509","endLine":228,"endColumn":27},{"ruleId":"506","severity":1,"message":"613","line":235,"column":9,"nodeType":"508","messageId":"509","endLine":235,"endColumn":19},{"ruleId":"506","severity":1,"message":"603","line":10,"column":3,"nodeType":"508","messageId":"509","endLine":10,"endColumn":12},{"ruleId":"506","severity":1,"message":"606","line":14,"column":3,"nodeType":"508","messageId":"509","endLine":14,"endColumn":8},{"ruleId":"506","severity":1,"message":"549","line":26,"column":3,"nodeType":"508","messageId":"509","endLine":26,"endColumn":7},{"ruleId":"506","severity":1,"message":"607","line":27,"column":3,"nodeType":"508","messageId":"509","endLine":27,"endColumn":17},{"ruleId":"506","severity":1,"message":"512","line":36,"column":10,"nodeType":"508","messageId":"509","endLine":36,"endColumn":14},{"ruleId":"506","severity":1,"message":"614","line":78,"column":11,"nodeType":"508","messageId":"509","endLine":78,"endColumn":22},{"ruleId":"506","severity":1,"message":"615","line":136,"column":10,"nodeType":"508","messageId":"509","endLine":136,"endColumn":17},{"ruleId":"506","severity":1,"message":"547","line":140,"column":20,"nodeType":"508","messageId":"509","endLine":140,"endColumn":31},{"ruleId":"533","severity":1,"message":"616","line":199,"column":6,"nodeType":"535","endLine":199,"endColumn":8,"suggestions":"617"},{"ruleId":"506","severity":1,"message":"612","line":217,"column":18,"nodeType":"508","messageId":"509","endLine":217,"endColumn":27},{"ruleId":"506","severity":1,"message":"613","line":224,"column":9,"nodeType":"508","messageId":"509","endLine":224,"endColumn":19},{"ruleId":"506","severity":1,"message":"618","line":10,"column":3,"nodeType":"508","messageId":"509","endLine":10,"endColumn":17},{"ruleId":"506","severity":1,"message":"603","line":11,"column":3,"nodeType":"508","messageId":"509","endLine":11,"endColumn":12},{"ruleId":"506","severity":1,"message":"606","line":15,"column":3,"nodeType":"508","messageId":"509","endLine":15,"endColumn":8},{"ruleId":"506","severity":1,"message":"549","line":26,"column":3,"nodeType":"508","messageId":"509","endLine":26,"endColumn":7},{"ruleId":"506","severity":1,"message":"607","line":27,"column":3,"nodeType":"508","messageId":"509","endLine":27,"endColumn":17},{"ruleId":"506","severity":1,"message":"512","line":36,"column":10,"nodeType":"508","messageId":"509","endLine":36,"endColumn":14},{"ruleId":"506","severity":1,"message":"614","line":81,"column":11,"nodeType":"508","messageId":"509","endLine":81,"endColumn":22},{"ruleId":"506","severity":1,"message":"615","line":140,"column":10,"nodeType":"508","messageId":"509","endLine":140,"endColumn":17},{"ruleId":"506","severity":1,"message":"547","line":144,"column":20,"nodeType":"508","messageId":"509","endLine":144,"endColumn":31},{"ruleId":"533","severity":1,"message":"616","line":203,"column":6,"nodeType":"535","endLine":203,"endColumn":8,"suggestions":"619"},{"ruleId":"506","severity":1,"message":"611","line":221,"column":10,"nodeType":"508","messageId":"509","endLine":221,"endColumn":16},{"ruleId":"506","severity":1,"message":"612","line":221,"column":18,"nodeType":"508","messageId":"509","endLine":221,"endColumn":27},{"ruleId":"506","severity":1,"message":"613","line":228,"column":9,"nodeType":"508","messageId":"509","endLine":228,"endColumn":19},"no-native-reassign",["620"],"no-negated-in-lhs",["621"],"no-unused-vars","'NotFound' is defined but never used.","Identifier","unusedVar","'Joi' is defined but never used.","'useState' is defined but never used.","'Link' is defined but never used.","'Paper' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'InputLabel' is defined but never used.","'FormControl' is defined but never used.","'Button' is defined but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'Typography' is defined but never used.","'ButtonGroup' is defined but never used.","'useHistory' is defined but never used.","'hospital' is defined but never used.","'states' is defined but never used.","'axios' is defined but never used.","'logging' is defined but never used.","'useSelector' is defined but never used.","'useDispatch' is defined but never used.","'registerHospital' is defined but never used.","'classes' is assigned a value but never used.","'makeStyles' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loggedInState.userType'. Either include it or remove the dependency array.","ArrayExpression",["622"],"React Hook useEffect has missing dependencies: 'loggedInState.userToken' and 'loggedInState.userType'. Either include them or remove the dependency array.",["623"],"'useEffect' is defined but never used.","'TablePagination' is defined but never used.","'setDonors' is assigned a value but never used.","'DialogContentText' is defined but never used.","React Hook useEffect has a missing dependency: 'loggedInState.userToken'. Either include it or remove the dependency array.",["624"],["625"],["626"],"'setMaxLimit' is assigned a value but never used.","'registerIndividual' is defined but never used.","'Card' is defined but never used.","'CardMedia' is defined but never used.","'BloodTable' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'LineChart' is defined but never used.","React Hook useEffect has missing dependencies: 'currMonth', 'currYear', and 'loggedInState.userToken'. Either include them or remove the dependency array.",["627"],"'DateFnsUtils' is defined but never used.","'handleClickOpen' is assigned a value but never used.","'lighten' is defined but never used.","'Switch' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Modal' is defined but never used.","'TextField' is defined but never used.",["628"],"'IconButton' is defined but never used.","'MenuIcon' is defined but never used.","'Bar' is defined but never used.","'Tooltip' is defined but never used.","'SendIcon' is defined but never used.","'data' is assigned a value but never used.","'selected' is assigned a value but never used.","'setSelected' is assigned a value but never used.","'emptyRows' is assigned a value but never used.",["629"],"Expected '===' and instead saw '=='.","'Menu' is defined but never used.","'InfoIcon' is defined but never used.","'notify' is assigned a value but never used.","'name' is assigned a value but never used.","'handleToggle' is assigned a value but never used.",["630"],"'Box' is defined but never used.","'Collapse' is defined but never used.",["631"],"React Hook useEffect has missing dependencies: 'driveId' and 'history'. Either include them or remove the dependency array.",["632"],"'createData' is defined but never used.",["633"],"React Hook useEffect has missing dependencies: 'donationId' and 'history'. Either include them or remove the dependency array.",["634"],"'clsx' is defined but never used.","'Toolbar' is defined but never used.","'Dialog' is defined but never used.","'DialogActions' is defined but never used.","'DialogContent' is defined but never used.","'DialogTitle' is defined but never used.","'useToolbarStyles' is assigned a value but never used.","'Container' is defined but never used.","'Grid' is defined but never used.","'Divider' is defined but never used.","'Input' is defined but never used.","'CardActionArea' is defined but never used.","React Hook useEffect has missing dependencies: 'anotherAxios', 'initialValues.donorStatus', 'initialValues.lastDonationDate', and 'loggedInState.userToken'. Either include them or remove the dependency array.",["635"],["636"],"'values' is assigned a value but never used.","'setValues' is assigned a value but never used.","'handleEdit' is assigned a value but never used.","'strongRegex' is assigned a value but never used.","'touched' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'anotherAxios' and 'loggedInState.userToken'. Either include them or remove the dependency array.",["637"],"'FormHelperText' is defined but never used.",["638"],"no-global-assign","no-unsafe-negation",{"desc":"639","fix":"640"},{"desc":"641","fix":"642"},{"desc":"643","fix":"644"},{"desc":"643","fix":"645"},{"desc":"643","fix":"646"},{"desc":"647","fix":"648"},{"desc":"643","fix":"649"},{"desc":"643","fix":"650"},{"desc":"641","fix":"651"},{"desc":"643","fix":"652"},{"desc":"653","fix":"654"},{"desc":"643","fix":"655"},{"desc":"656","fix":"657"},{"desc":"658","fix":"659"},{"desc":"660","fix":"661"},{"desc":"662","fix":"663"},{"desc":"662","fix":"664"},"Update the dependencies array to be: [loggedInState.userType]",{"range":"665","text":"666"},"Update the dependencies array to be: [loggedInState.userToken, loggedInState.userType]",{"range":"667","text":"668"},"Update the dependencies array to be: [loggedInState.userToken]",{"range":"669","text":"670"},{"range":"671","text":"670"},{"range":"672","text":"670"},"Update the dependencies array to be: [currMonth, currYear, loggedInState.userToken]",{"range":"673","text":"674"},{"range":"675","text":"670"},{"range":"676","text":"670"},{"range":"677","text":"668"},{"range":"678","text":"670"},"Update the dependencies array to be: [donorsList, driveId, history]",{"range":"679","text":"680"},{"range":"681","text":"670"},"Update the dependencies array to be: [donationId, donorsList, history]",{"range":"682","text":"683"},"Update the dependencies array to be: [anotherAxios, initialValues.donorStatus, initialValues.lastDonationDate, loggedInState.userToken]",{"range":"684","text":"685"},"Update the dependencies array to be: [initialValues.donorStatus, loggedInState.userToken]",{"range":"686","text":"687"},"Update the dependencies array to be: [anotherAxios, loggedInState.userToken]",{"range":"688","text":"689"},{"range":"690","text":"689"},[596,598],"[loggedInState.userType]",[2184,2186],"[loggedInState.userToken, loggedInState.userType]",[1115,1117],"[loggedInState.userToken]",[1081,1083],[1102,1104],[3102,3104],"[currMonth, currYear, loggedInState.userToken]",[4992,4994],[1763,1765],[4661,4663],[1759,1761],[2967,2979],"[donorsList, driveId, history]",[4698,4700],[6797,6809],"[donationId, donorsList, history]",[4892,4894],"[anotherAxios, initialValues.donorStatus, initialValues.lastDonationDate, loggedInState.userToken]",[5465,5494],"[initialValues.donorStatus, loggedInState.userToken]",[5157,5159],"[anotherAxios, loggedInState.userToken]",[5243,5245]]