[{"D:\\Nineleaps\\RedBank-Web\\src\\index.js":"1","D:\\Nineleaps\\RedBank-Web\\src\\App.js":"2","D:\\Nineleaps\\RedBank-Web\\src\\redux\\store.js":"3","D:\\Nineleaps\\RedBank-Web\\src\\Components\\Auth\\Login.js":"4","D:\\Nineleaps\\RedBank-Web\\src\\Components\\Auth\\Options.js":"5","D:\\Nineleaps\\RedBank-Web\\src\\Components\\Auth\\ResetPassword.js":"6","D:\\Nineleaps\\RedBank-Web\\src\\Components\\Auth\\IndividualRegistration.js":"7","D:\\Nineleaps\\RedBank-Web\\src\\Components\\Auth\\HospitalRegistration.js":"8","D:\\Nineleaps\\RedBank-Web\\src\\Components\\Auth\\terms.js":"9","D:\\Nineleaps\\RedBank-Web\\src\\Components\\Auth\\BloodBankRegistration.js":"10","D:\\Nineleaps\\RedBank-Web\\src\\Components\\Auth\\ForgotPassword.js":"11","D:\\Nineleaps\\RedBank-Web\\src\\Components\\Auth\\VerifyCode.js":"12","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\home\\main.js":"13","D:\\Nineleaps\\RedBank-Web\\src\\Components\\Auth\\Test.js":"14","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\profile\\index.js":"15","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\about\\about.js":"16","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\upcomingDrive\\UpcomingDrive.js":"17","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\findDonors\\FindDonors.js":"18","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\buyBlood\\BuyBlood.js":"19","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\myCommitments\\MyCommitments.js":"20","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\activeDonorReq\\ActiveDonorReq.js":"21","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\myPurchases\\MyPurchases.js":"22","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\buyBlood\\product.js":"23","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\myDrives\\myDrives.js":"24","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\conductDrive\\conductDrive.js":"25","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\myInvites\\myInvites.js":"26","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\mysales\\mySales.js":"27","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\myInventory\\myInventory.js":"28","D:\\Nineleaps\\RedBank-Web\\src\\redux\\Reducers\\loggingInReducer.js":"29","D:\\Nineleaps\\RedBank-Web\\src\\redux\\Reducers\\registerIndividualReducer.js":"30","D:\\Nineleaps\\RedBank-Web\\src\\redux\\Reducers\\registerBloodBankReducer.js":"31","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\mysales\\table.js":"32","D:\\Nineleaps\\RedBank-Web\\src\\redux\\Reducers\\registerHospitalReducer.js":"33","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\myInvites\\table.js":"34","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\myDrives\\table.js":"35","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\myInventory\\table.js":"36","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\myPurchases\\table.js":"37","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\activeDonorReq\\useTable.js":"38","D:\\Nineleaps\\RedBank-Web\\src\\redux\\Actions\\login.js":"39","D:\\Nineleaps\\RedBank-Web\\src\\redux\\Actions\\registerBloodBank.js":"40","D:\\Nineleaps\\RedBank-Web\\src\\redux\\Actions\\registerIndividual.js":"41","D:\\Nineleaps\\RedBank-Web\\src\\redux\\Actions\\registerHospital.js":"42","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\myCommitments\\table.js":"43","D:\\Nineleaps\\RedBank-Web\\src\\Components\\layouts\\loggedoutNavbar.js":"44","D:\\Nineleaps\\RedBank-Web\\src\\Components\\layouts\\index.js":"45","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\buyBlood\\useTable.js":"46","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\findDonors\\useTable.js":"47","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\upcomingDrive\\useTable.js":"48","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\profile\\profile.js":"49","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\profile\\sideMenu.js":"50","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\home\\services\\indiServices.js":"51","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\home\\services\\HospitalServices.js":"52","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\home\\services\\BankServices.js":"53","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\home\\serviceCard.js":"54","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\home\\bloodCompatibilityTable.js":"55","D:\\Nineleaps\\RedBank-Web\\src\\Components\\layouts\\footer.js":"56","D:\\Nineleaps\\RedBank-Web\\src\\Components\\layouts\\navbar.js":"57","D:\\Nineleaps\\RedBank-Web\\src\\redux\\Types\\registration.js":"58","D:\\Nineleaps\\RedBank-Web\\src\\redux\\Types\\login.js":"59","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\profile\\profileForm.js":"60","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\profile\\orgForm.js":"61","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\profile\\pageHeader.js":"62","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\home\\BarChart.js":"63","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\home\\barChart.js":"64","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\myDrives\\acceptedDonors.js":"65","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\home\\pieChart.js":"66"},{"size":264,"mtime":1612701089865,"results":"67","hashOfConfig":"68"},{"size":4526,"mtime":1612768985271,"results":"69","hashOfConfig":"68"},{"size":610,"mtime":1612701121521,"results":"70","hashOfConfig":"68"},{"size":6086,"mtime":1612701121496,"results":"71","hashOfConfig":"68"},{"size":2453,"mtime":1612701121497,"results":"72","hashOfConfig":"68"},{"size":3716,"mtime":1612701121497,"results":"73","hashOfConfig":"68"},{"size":12877,"mtime":1612701121496,"results":"74","hashOfConfig":"68"},{"size":13460,"mtime":1612701121496,"results":"75","hashOfConfig":"68"},{"size":3413,"mtime":1612701089852,"results":"76","hashOfConfig":"68"},{"size":13571,"mtime":1612701121495,"results":"77","hashOfConfig":"68"},{"size":3035,"mtime":1612701089810,"results":"78","hashOfConfig":"68"},{"size":2714,"mtime":1612701089813,"results":"79","hashOfConfig":"68"},{"size":14095,"mtime":1612773949660,"results":"80","hashOfConfig":"68"},{"size":5117,"mtime":1612701089812,"results":"81","hashOfConfig":"68"},{"size":589,"mtime":1612701121512,"results":"82","hashOfConfig":"68"},{"size":5165,"mtime":1612712328708,"results":"83","hashOfConfig":"68"},{"size":6585,"mtime":1612701121519,"results":"84","hashOfConfig":"68"},{"size":8023,"mtime":1612701121515,"results":"85","hashOfConfig":"68"},{"size":9611,"mtime":1612701121513,"results":"86","hashOfConfig":"68"},{"size":1531,"mtime":1612701089861,"results":"87","hashOfConfig":"68"},{"size":1463,"mtime":1612701089858,"results":"88","hashOfConfig":"68"},{"size":1526,"mtime":1612701121518,"results":"89","hashOfConfig":"68"},{"size":4300,"mtime":1612773371900,"results":"90","hashOfConfig":"68"},{"size":1267,"mtime":1612710400776,"results":"91","hashOfConfig":"68"},{"size":12524,"mtime":1612711962351,"results":"92","hashOfConfig":"68"},{"size":1501,"mtime":1612701121517,"results":"93","hashOfConfig":"68"},{"size":1432,"mtime":1612710109122,"results":"94","hashOfConfig":"68"},{"size":1163,"mtime":1612701089863,"results":"95","hashOfConfig":"68"},{"size":392,"mtime":1612701121521,"results":"96","hashOfConfig":"68"},{"size":567,"mtime":1612701089868,"results":"97","hashOfConfig":"68"},{"size":556,"mtime":1612701089867,"results":"98","hashOfConfig":"68"},{"size":6696,"mtime":1612710199000,"results":"99","hashOfConfig":"68"},{"size":554,"mtime":1612701089867,"results":"100","hashOfConfig":"68"},{"size":8056,"mtime":1612707609559,"results":"101","hashOfConfig":"68"},{"size":4915,"mtime":1612772399678,"results":"102","hashOfConfig":"68"},{"size":4749,"mtime":1612701121517,"results":"103","hashOfConfig":"68"},{"size":7082,"mtime":1612701121518,"results":"104","hashOfConfig":"68"},{"size":6956,"mtime":1612701121513,"results":"105","hashOfConfig":"68"},{"size":175,"mtime":1612701121520,"results":"106","hashOfConfig":"68"},{"size":218,"mtime":1612701089866,"results":"107","hashOfConfig":"68"},{"size":222,"mtime":1612701089866,"results":"108","hashOfConfig":"68"},{"size":214,"mtime":1612701089866,"results":"109","hashOfConfig":"68"},{"size":7082,"mtime":1612771942495,"results":"110","hashOfConfig":"68"},{"size":987,"mtime":1612701089853,"results":"111","hashOfConfig":"68"},{"size":92,"mtime":1612701089853,"results":"112","hashOfConfig":"68"},{"size":9161,"mtime":1612701121514,"results":"113","hashOfConfig":"68"},{"size":12021,"mtime":1612701121515,"results":"114","hashOfConfig":"68"},{"size":12951,"mtime":1612712155464,"results":"115","hashOfConfig":"68"},{"size":1009,"mtime":1612701121512,"results":"116","hashOfConfig":"68"},{"size":474,"mtime":1612701089857,"results":"117","hashOfConfig":"68"},{"size":2169,"mtime":1612762972236,"results":"118","hashOfConfig":"68"},{"size":2492,"mtime":1612701121503,"results":"119","hashOfConfig":"68"},{"size":8391,"mtime":1612701121502,"results":"120","hashOfConfig":"68"},{"size":1383,"mtime":1612701121502,"results":"121","hashOfConfig":"68"},{"size":2442,"mtime":1612707772889,"results":"122","hashOfConfig":"68"},{"size":1823,"mtime":1612701121498,"results":"123","hashOfConfig":"68"},{"size":8325,"mtime":1612701121498,"results":"124","hashOfConfig":"68"},{"size":171,"mtime":1612701089868,"results":"125","hashOfConfig":"68"},{"size":41,"mtime":1612701089868,"results":"126","hashOfConfig":"68"},{"size":6508,"mtime":1612701089856,"results":"127","hashOfConfig":"68"},{"size":6456,"mtime":1612701089856,"results":"128","hashOfConfig":"68"},{"size":1033,"mtime":1612701089856,"results":"129","hashOfConfig":"68"},{"size":342,"mtime":1612764873874,"results":"130","hashOfConfig":"68"},{"size":1135,"mtime":1612773595314,"results":"131","hashOfConfig":"68"},{"size":3179,"mtime":1612773197158,"results":"132","hashOfConfig":"68"},{"size":849,"mtime":1612773803812,"results":"133","hashOfConfig":"68"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},"1a13yks",{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"136"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"136"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"136"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"136"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"136"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"136"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"136"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"168","messages":"169","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"136"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"136"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"190","messages":"191","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"136"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"136"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"136"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"136"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"136"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"136"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"236","messages":"237","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"136"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"136"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"136"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"136"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"136"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"136"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"136"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"136"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"136"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"136"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"136"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"136"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"290","messages":"291","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Nineleaps\\RedBank-Web\\src\\index.js",[],["294","295"],"D:\\Nineleaps\\RedBank-Web\\src\\App.js",[],"D:\\Nineleaps\\RedBank-Web\\src\\redux\\store.js",[],"D:\\Nineleaps\\RedBank-Web\\src\\Components\\Auth\\Login.js",["296","297"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport login from \"./images/login.png\";\r\nimport avatar from \"./images/avatar.png\";\r\nimport { Grid, Paper, TextField, Button, Typography } from \"@material-ui/core\";\r\nimport LoggedOutNavbar from \"../layouts/loggedoutNavbar\";\r\nimport Joi from \"joi\";\r\nimport axios from \"axios\";\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport logging from \"../../redux/Actions/login\";\r\n\r\nfunction Login() {\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n\r\n  const [data, setData] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  const [errors, setErrors] = useState({});\r\n  const [loggedInState, setLoggedInState] = useState({\r\n    isLoggedIn: false,\r\n    userType: \"\",\r\n  });\r\n\r\n  const paperStyle = {\r\n    display: \"flex\",\r\n    width: 380,\r\n    flexDirection: \"column\",\r\n    padding: \"30px\",\r\n  };\r\n\r\n  const margin = { marginTop: \"20px\" };\r\n\r\n  const schema = {\r\n    email: Joi.string().email({\r\n      minDomainSegments: 2,\r\n      tlds: { allow: [\"com\", \"in\"] },\r\n    }),\r\n    password: Joi.string()\r\n      .pattern(new RegExp(\"^[a-zA-Z0-9]{3,30}$\"))\r\n      .message(\"Enter a stronger password\")\r\n      .required(),\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(logging(loggedInState));\r\n  }, [loggedInState]);\r\n\r\n  const handleClick = (e) => {\r\n    e.preventDefault();\r\n    const errors = validate();\r\n\r\n    setErrors({ errors: errors || {} });\r\n    if (errors) return;\r\n\r\n    axios\r\n      .post(\"http://localhost:5000/login\", {\r\n        email: data.email,\r\n        password: data.password,\r\n      })\r\n      .then(function (response) {\r\n        if (response.data.success) {\r\n          const newState = { ...loggedInState };\r\n          newState.isLoggedIn = true;\r\n          newState.userType = response.data.userType;\r\n          setLoggedInState(newState);\r\n          history.push(\"/home\");\r\n        } else {\r\n          console.log(response.data.error);\r\n          if (response.data.error.includes(\"email\")) {\r\n            setErrors((prevErrors) => ({\r\n              ...prevErrors,\r\n              email: response.data.error,\r\n            }));\r\n          } else if (response.data.error.includes(\"password\")) {\r\n            setErrors((prevErrors) => ({\r\n              ...prevErrors,\r\n              password: response.data.error,\r\n            }));\r\n          }\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        window.alert(error.message);\r\n      });\r\n  };\r\n\r\n  const validateProperty = ({ name, value }) => {\r\n    const inputField = { [name]: value };\r\n    const fieldSchema = Joi.object({ [name]: schema[name] });\r\n    const { error } = fieldSchema.validate(inputField);\r\n    return error ? error.details[0].message : null;\r\n  };\r\n\r\n  const validate = () => {\r\n    const formSchema = Joi.object(schema);\r\n    const { error } = formSchema.validate(data, {\r\n      abortEarly: false,\r\n    });\r\n\r\n    if (!error) return null;\r\n\r\n    const allErrors = {};\r\n    for (let err of error.details) {\r\n      allErrors[err.path[0]] = err.message;\r\n    }\r\n    return allErrors;\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    const allErrors = { ...errors };\r\n    const errorMsg = validateProperty(e.target);\r\n    if (errorMsg) {\r\n      allErrors[name] = errorMsg;\r\n    } else {\r\n      delete allErrors[name];\r\n    }\r\n    const updatedData = { ...data };\r\n    updatedData[name] = value;\r\n    setData(updatedData);\r\n    setErrors(allErrors);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <LoggedOutNavbar />\r\n\r\n      <Grid\r\n        container\r\n        style={{ marginTop: \"100px\", backgroundColor: \"#E94364\" }}\r\n      >\r\n        <Grid item xs={6} container justify=\"center\" alignItems=\"center\">\r\n          <img src={login} alt=\"#\" />\r\n        </Grid>\r\n\r\n        <Grid item xs={6} container justify=\"center\" alignItems=\"center\">\r\n          <Paper style={paperStyle} elevation={5}>\r\n            <Grid align=\"center\">\r\n              <img alt=\"\" src={avatar} width=\"80px\" />\r\n              <h2 style={{ marginTop: \"10px\" }}>Sign In</h2>\r\n            </Grid>\r\n\r\n            <TextField\r\n              label=\"Email\"\r\n              placeholder=\"Enter your email\"\r\n              type=\"email\"\r\n              fullWidth\r\n              required\r\n              variant=\"outlined\"\r\n              style={margin}\r\n              name=\"email\"\r\n              value={data.email}\r\n              onChange={handleChange}\r\n              error={errors && errors.email}\r\n              helperText={errors && errors.email ? errors.email : null}\r\n            />\r\n\r\n            <TextField\r\n              label=\"Password\"\r\n              placeholder=\"Enter your password\"\r\n              type=\"password\"\r\n              fullWidth\r\n              required\r\n              variant=\"outlined\"\r\n              style={margin}\r\n              name=\"password\"\r\n              value={data.password}\r\n              onChange={handleChange}\r\n              error={errors && errors.password}\r\n              helperText={errors && errors.password ? errors.password : null}\r\n            />\r\n\r\n            <Typography style={margin}>\r\n              <Link to=\"/ForgotPassword\">Forgot password</Link>\r\n            </Typography>\r\n\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              fullWidth\r\n              style={{ marginTop: \"20px\", backgroundColor: \"#E94364\" }}\r\n              onClick={handleClick}\r\n              disabled={validate() ? true : false}\r\n            >\r\n              Login\r\n            </Button>\r\n\r\n            <Grid align=\"center\">\r\n              <Typography style={margin}>\r\n                <p>\r\n                  New user ? <Link to=\"/Options\">Sign up</Link>\r\n                </p>\r\n              </Typography>\r\n              <h3 style={margin}>OR</h3>\r\n              <Typography style={margin}>\r\n                <Link to=\"/Options\">Sign in with google account</Link>\r\n              </Typography>\r\n            </Grid>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Login;","D:\\Nineleaps\\RedBank-Web\\src\\Components\\Auth\\Options.js",["298"],"import React, { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { Grid, Paper, Typography, Divider, Button } from \"@material-ui/core\";\r\n\r\nimport LoggedOutNavbar from \"../layouts/loggedoutNavbar\";\r\n\r\nfunction Options() {\r\n  const paperStyle = {\r\n    display: \"flex\",\r\n    width: 380,\r\n    flexDirection: \"column\",\r\n    padding: \"30px\",\r\n  };\r\n  const margin = { marginTop: \"20px\" };\r\n\r\n  const history = useHistory();\r\n\r\n  const handleSet = (e, name) => {\r\n    var type = \"\";\r\n    if (name === \"individual\") {\r\n      type = \"0\";\r\n      history.push({ pathname: \"/IndividualRegistration\", type });\r\n    } else if (name === \"bloodbank\") {\r\n      type = \"1\";\r\n      history.push({ pathname: \"/BloodBankRegistration\", type });\r\n    } else {\r\n      type = \"2\";\r\n      history.push({ pathname: \"/HospitalRegistration\", type });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <LoggedOutNavbar />\r\n\r\n      <Grid\r\n        container\r\n        style={{ marginTop: \"100px\", backgroundColor: \"#E94364\" }}\r\n      >\r\n        <Grid item xs={12} container justify=\"center\" alignItems=\"center\">\r\n          <Paper elevation={5} style={paperStyle}>\r\n            <Grid align=\"center\">\r\n              <h2 style={{ marginTop: \"15px\" }}>Which type of user are you?</h2>\r\n              <Typography style={margin}>\r\n                <Button\r\n                  onClick={(e) => {\r\n                    handleSet(e, \"individual\");\r\n                  }}\r\n                >\r\n                  Individual\r\n                </Button>\r\n              </Typography>\r\n              <Typography style={margin}>\r\n                <Button\r\n                  onClick={(e) => {\r\n                    handleSet(e, \"bloodbank\");\r\n                  }}\r\n                >\r\n                  Blood-Bank\r\n                </Button>\r\n              </Typography>\r\n              <Typography style={margin}>\r\n                <Button\r\n                  onClick={(e) => {\r\n                    handleSet(e, \"hospital\");\r\n                  }}\r\n                >\r\n                  Hospital\r\n                </Button>\r\n              </Typography>\r\n              <Divider style={margin} />\r\n              <Typography style={margin}>\r\n                <p>\r\n                  Existing user ? <Link to=\"/\">Sign in</Link>\r\n                </p>\r\n              </Typography>\r\n            </Grid>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Options;","D:\\Nineleaps\\RedBank-Web\\src\\Components\\Auth\\ResetPassword.js",[],"D:\\Nineleaps\\RedBank-Web\\src\\Components\\Auth\\IndividualRegistration.js",["299","300"],"import {\r\n  Grid,\r\n  Paper,\r\n  TextField,\r\n  Select,\r\n  MenuItem,\r\n  InputLabel,\r\n  FormControl,\r\n  FormControlLabel,\r\n  Checkbox,\r\n  Button,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport individual from \"./images/individual.png\";\r\nimport states from \"./states.json\";\r\nimport Joi from \"joi\";\r\nimport LoggedOutNavbar from \"../layouts/loggedoutNavbar\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport registerIndividual from \"../../redux/Actions/registerIndividual\";\r\nimport axios from \"axios\";\r\nimport logging from \"../../redux/Actions/login\";\r\n\r\nfunction IndividualRegistration(props) {\r\n  console.log(props.location.type);\r\n  const [data, setData] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    dob: \"\",\r\n    phone: \"\",\r\n    address: \"\",\r\n    state: \"\",\r\n    district: \"\",\r\n    pincode: \"\",\r\n    bg: \"\",\r\n    password: \"\",\r\n    cPassword: \"\",\r\n    terms: false,\r\n  });\r\n\r\n  const dispatch = useDispatch();\r\n  const state = useSelector((state) => state);\r\n\r\n  const history = useHistory();\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const [enable, setEnable] = useState(true);\r\n  const [selectedStateIndex, setSelectedStateIndex] = useState(0);\r\n\r\n  const paperStyle = {\r\n    height: \"auto\",\r\n    width: \"450px\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    padding: \"30px\",\r\n  };\r\n  const margin = { marginTop: \"15px\" };\r\n\r\n  const validateProperty = ({ name, value }) => {\r\n    const inputField = { [name]: value };\r\n    const fieldSchema = Joi.object({ [name]: schema[name] });\r\n    const { error } = fieldSchema.validate(inputField);\r\n    return error ? error.details[0].message : null;\r\n  };\r\n\r\n  const validate = () => {\r\n    const formSchema = Joi.object(schema);\r\n    const { error } = formSchema.validate(data, {\r\n      abortEarly: false,\r\n    });\r\n\r\n    if (!error) return null;\r\n\r\n    const allErrors = {};\r\n    for (let err of error.details) {\r\n      allErrors[err.path[0]] = err.message;\r\n    }\r\n    return allErrors;\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    if (name === \"state\") {\r\n      setEnable(false);\r\n      setSelectedStateIndex(\r\n        states.states.findIndex((item) => item.state === value)\r\n      );\r\n    }\r\n\r\n    const allErrors = { ...errors };\r\n    const errorMsg = validateProperty(e.target);\r\n    if (errorMsg) {\r\n      allErrors[name] = errorMsg;\r\n    } else {\r\n      delete allErrors[name];\r\n    }\r\n    const updatedData = { ...data };\r\n    updatedData[name] = value;\r\n    setData(updatedData);\r\n    setErrors(allErrors);\r\n  };\r\n\r\n  const handleTermsCheck = (e) => {\r\n    const updatedData = { ...data };\r\n    updatedData[e.target.name] = e.target.checked;\r\n    const allErrors = { ...errors };\r\n    setData(updatedData);\r\n    setErrors(allErrors);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const errors = validate();\r\n\r\n    setErrors({ errors: errors || {} });\r\n    if (errors) return;\r\n\r\n    axios\r\n      .post(\"http://localhost:5000/login\", {\r\n        email: data.email,\r\n        password: data.password,\r\n      })\r\n      .then(function (response) {\r\n        if (response.data.success) {\r\n          dispatch(\r\n            logging({ isLoggedIn: true, userType: props.location.type })\r\n          );\r\n          history.push(\"/home\");\r\n        } else {\r\n          console.log(response.data.error);\r\n          if (response.data.error.includes(\"email\")) {\r\n            setErrors((prevErrors) => ({\r\n              ...prevErrors,\r\n              email: response.data.error,\r\n            }));\r\n          } else if (response.data.error.includes(\"password\")) {\r\n            setErrors((prevErrors) => ({\r\n              ...prevErrors,\r\n              password: response.data.error,\r\n            }));\r\n          }\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        window.alert(error.message);\r\n      });\r\n\r\n    // dispatch(registerIndividual(data));\r\n    // history.push(\"/home\");\r\n  };\r\n\r\n  const schema = {\r\n    name: Joi.string().min(3).max(30).required(),\r\n    email: Joi.string()\r\n      .email({ minDomainSegments: 2, tlds: { allow: [\"com\", \"in\"] } })\r\n      .required(),\r\n    dob: Joi.date()\r\n      .less(\"1-1-2003\")\r\n      .message(\"must be between 18-56 years\")\r\n      .greater(\"1-1-1957\")\r\n      .message(\"must be between 18-56 years\"),\r\n    phone: Joi.number().min(10).positive().required(),\r\n    address: Joi.string().required(),\r\n    state: Joi.string().required(),\r\n    district: Joi.string().required(),\r\n    pincode: Joi.number()\r\n      .positive()\r\n      .min(6)\r\n      .message(\"Pincode must contain 6 digits\")\r\n      .required(),\r\n    bg: Joi.required(),\r\n    password: Joi.string()\r\n      .pattern(new RegExp(\"^[a-zA-Z0-9]{3,30}$\"))\r\n      .message(\"Enter a stronger password\")\r\n      .required(),\r\n    cPassword: Joi.ref(\"password\"),\r\n    terms: Joi.boolean().required().invalid(false),\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <LoggedOutNavbar />\r\n\r\n      <Grid container style={{ margin: \"20px auto\" }}>\r\n        <Grid item xs={6} container justify=\"center\" alignItems=\"center\">\r\n          <img src={individual} alt=\"individual\" style={{ maxWidth: \"100%\" }} />\r\n        </Grid>\r\n\r\n        <Grid item xs={6} container justify=\"center\" alignItems=\"center\">\r\n          <form>\r\n            <Paper style={paperStyle} elevation={5}>\r\n              <h2 style={{ marginTop: \"10px\" }} align=\"center\">\r\n                Individual Registration\r\n              </h2>\r\n\r\n              <TextField\r\n                label=\"Name\"\r\n                placeholder=\"Enter your full name\"\r\n                type=\"text\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"name\"\r\n                value={data.name}\r\n                onChange={handleChange}\r\n                inputProps={{\r\n                  maxLength: 30,\r\n                }}\r\n                error={errors && errors.name}\r\n                helperText={errors && errors.name ? errors.name : null}\r\n              />\r\n\r\n              <TextField\r\n                label=\"Email\"\r\n                placeholder=\"Enter your email\"\r\n                type=\"email\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"email\"\r\n                value={data.email}\r\n                onChange={handleChange}\r\n                error={errors && errors.email}\r\n                helperText={errors && errors.email ? errors.email : null}\r\n              />\r\n\r\n              <InputLabel style={{ marginTop: \"35px\" }}>\r\n                Date of Birth\r\n              </InputLabel>\r\n              <TextField\r\n                type=\"date\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"dob\"\r\n                value={data.dob}\r\n                onChange={handleChange}\r\n                error={errors && errors.dob}\r\n                helperText={errors && errors.dob ? errors.dob : null}\r\n              />\r\n\r\n              <TextField\r\n                label=\"Phone\"\r\n                placeholder=\"Enter your phone number\"\r\n                type=\"text\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"phone\"\r\n                value={data.phone}\r\n                onChange={handleChange}\r\n                inputProps={{\r\n                  maxLength: 10,\r\n                }}\r\n                error={errors && errors.phone}\r\n                helperText={errors && errors.phone ? errors.phone : null}\r\n              />\r\n\r\n              <TextField\r\n                label=\"Current Address\"\r\n                placeholder=\"Enter your current address\"\r\n                type=\"text\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"address\"\r\n                value={data.address}\r\n                onChange={handleChange}\r\n                error={errors && errors.address}\r\n                helperText={errors && errors.address ? errors.address : null}\r\n              />\r\n\r\n              <FormControl style={margin}>\r\n                <InputLabel>State</InputLabel>\r\n                <Select\r\n                  name=\"state\"\r\n                  onChange={handleChange}\r\n                  value={data.state}\r\n                  error={errors && errors.state}\r\n                  helperText={errors && errors.state ? errors.state : null}\r\n                >\r\n                  {states.states.map((item) => (\r\n                    <MenuItem value={item.state}>{item.state}</MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n\r\n              <FormControl style={margin}>\r\n                <InputLabel>District</InputLabel>\r\n                <Select\r\n                  inputProps={{ readOnly: enable }}\r\n                  name=\"district\"\r\n                  onChange={handleChange}\r\n                  value={data.district}\r\n                  error={errors && errors.district}\r\n                  helperText={\r\n                    errors && errors.district ? errors.district : null\r\n                  }\r\n                >\r\n                  {states.states[selectedStateIndex].districts.map((item) => (\r\n                    <MenuItem value={item}>{item}</MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n\r\n              <TextField\r\n                label=\"Pincode\"\r\n                placeholder=\"Enter your pincode\"\r\n                type=\"text\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"pincode\"\r\n                value={data.pincode}\r\n                onChange={handleChange}\r\n                inputProps={{\r\n                  maxLength: 6,\r\n                }}\r\n                error={errors && errors.pincode}\r\n                helperText={errors && errors.pincode ? errors.pincode : null}\r\n              />\r\n\r\n              <FormControl style={margin}>\r\n                <InputLabel>Blood Group</InputLabel>\r\n                <Select name=\"bg\" onChange={handleChange} value={data.bg}>\r\n                  error={errors && errors.bg}\r\n                  helperText=\r\n                  {errors && errors.bg ? errors.bg : null}\r\n                  <MenuItem value={\"A+\"}>A+</MenuItem>\r\n                  <MenuItem value={\"A-\"}>A-</MenuItem>\r\n                  <MenuItem value={\"B+\"}>B+</MenuItem>\r\n                  <MenuItem value={\"B-\"}>B-</MenuItem>\r\n                  <MenuItem value={\"AB+\"}>AB+</MenuItem>\r\n                  <MenuItem value={\"AB-\"}>AB-</MenuItem>\r\n                  <MenuItem value={\"O+\"}>O+</MenuItem>\r\n                  <MenuItem value={\"O-\"}>O-</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n\r\n              <TextField\r\n                label=\"Password\"\r\n                placeholder=\"Create your password\"\r\n                type=\"password\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"password\"\r\n                value={data.password}\r\n                onChange={handleChange}\r\n                error={errors && errors.password}\r\n                helperText={errors && errors.password ? errors.password : null}\r\n              />\r\n\r\n              <TextField\r\n                label=\"Confirm Password\"\r\n                placeholder=\"Confirm your password\"\r\n                type=\"password\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"cPassword\"\r\n                value={data.cPassword}\r\n                onChange={handleChange}\r\n                error={data.password !== data.cPassword ? true : false}\r\n                helperText={\r\n                  data.password !== data.cPassword\r\n                    ? \"passwords do not match\"\r\n                    : null\r\n                }\r\n              />\r\n\r\n              <FormControlLabel\r\n                style={margin}\r\n                control={\r\n                  <Checkbox\r\n                    onChange={handleTermsCheck}\r\n                    inputProps={{ required: true }}\r\n                    name=\"terms\"\r\n                  />\r\n                }\r\n                label=\"Accept Terms and Conditions\"\r\n              />\r\n              <Link\r\n                to=\"/terms\"\r\n                style={{ color: \"#E94364\", fontWeight: \"bold\" }}\r\n              >\r\n                (Click here for terms and condition)\r\n              </Link>\r\n\r\n              <Button\r\n                variant=\"contained\"\r\n                style={{ backgroundColor: \"#E94364\", marginTop: \"20px\" }}\r\n                type=\"submit\"\r\n                disabled={validate()}\r\n                onClick={handleSubmit}\r\n              >\r\n                Sign up\r\n              </Button>\r\n\r\n              <Typography align=\"center\" style={margin}>\r\n                <Link to=\"/Login\">Already a user ? Sign in</Link>\r\n              </Typography>\r\n            </Paper>\r\n          </form>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default IndividualRegistration;","D:\\Nineleaps\\RedBank-Web\\src\\Components\\Auth\\HospitalRegistration.js",["301","302","303","304"],"import {\r\n  Grid,\r\n  Paper,\r\n  TextField,\r\n  Select,\r\n  MenuItem,\r\n  InputLabel,\r\n  FormControl,\r\n  Button,\r\n  FormControlLabel,\r\n  Checkbox,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport hospital from \"./images/hospital.jpg\";\r\nimport states from \"./states.json\";\r\nimport Joi from \"joi\";\r\nimport LoggedOutNavbar from \"../layouts/loggedoutNavbar\";\r\nimport axios from \"axios\";\r\nimport logging from \"../../redux/Actions/login\";\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport registerHospital from \"../../redux/Actions/registerHospital\";\r\n\r\nfunction BloodBankRegistration(props) {\r\n  console.log(props.location.type);\r\n\r\n  const [data, setData] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    license: \"\",\r\n    phone: [\"\"],\r\n    address: \"\",\r\n    state: \"\",\r\n    district: \"\",\r\n    pincode: \"\",\r\n    password: \"\",\r\n    cPassword: \"\",\r\n    terms: false,\r\n  });\r\n\r\n  const [isLoggedIn, setIsLoggedIn] = useState(true);\r\n  const dispatch = useDispatch();\r\n  const state = useSelector((state) => state);\r\n\r\n  const history = useHistory();\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const [maxLimit, setMaxLimit] = useState(\"Add a phone number\");\r\n  const [enable, setEnable] = useState(true);\r\n  const [selectedStateIndex, setSelectedStateIndex] = useState(0);\r\n\r\n  const paperStyle = {\r\n    height: \"auto\",\r\n    width: \"450px\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    padding: \"30px\",\r\n  };\r\n\r\n  const margin = { marginTop: \"15px\" };\r\n\r\n  const validateProperty = ({ name, value }) => {\r\n    const inputField = { [name]: value };\r\n    const fieldSchema = Joi.object({ [name]: schema[name] });\r\n    const { error } = fieldSchema.validate(inputField);\r\n    return error ? error.details[0].message : null;\r\n  };\r\n\r\n  const validate = () => {\r\n    const formSchema = Joi.object(schema);\r\n    const { error } = formSchema.validate(data, {\r\n      abortEarly: false,\r\n    });\r\n\r\n    if (!error) return null;\r\n\r\n    const allErrors = {};\r\n    for (let err of error.details) {\r\n      allErrors[err.path[0]] = err.message;\r\n    }\r\n    return allErrors;\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    if (name === \"state\") {\r\n      setEnable(false);\r\n      setSelectedStateIndex(\r\n        states.states.findIndex((item) => item.state === value)\r\n      );\r\n    }\r\n\r\n    const allErrors = { ...errors };\r\n    const errorMsg = validateProperty(e.target);\r\n    if (errorMsg) {\r\n      allErrors[name] = errorMsg;\r\n    } else {\r\n      delete allErrors[name];\r\n    }\r\n    const updatedData = { ...data };\r\n    updatedData[name] = value;\r\n    setData(updatedData);\r\n    setErrors(allErrors);\r\n  };\r\n\r\n  const handleTermsCheck = (e) => {\r\n    const updatedData = { ...data };\r\n    updatedData[e.target.name] = e.target.checked;\r\n    const allErrors = { ...errors };\r\n    setData(updatedData);\r\n    setErrors(allErrors);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const errors = validate();\r\n\r\n    setErrors({ errors: errors || {} });\r\n    if (errors) return;\r\n\r\n    axios\r\n      .post(\"http://localhost:5000/login\", {\r\n        email: data.email,\r\n        password: data.password,\r\n      })\r\n      .then(function (response) {\r\n        if (response.data.success) {\r\n          dispatch(\r\n            logging({ isLoggedIn: true, userType: props.location.type })\r\n          );\r\n          history.push(\"/home\");\r\n        } else {\r\n          console.log(response.data.error);\r\n          if (response.data.error.includes(\"email\")) {\r\n            setErrors((prevErrors) => ({\r\n              ...prevErrors,\r\n              email: response.data.error,\r\n            }));\r\n          } else if (response.data.error.includes(\"password\")) {\r\n            setErrors((prevErrors) => ({\r\n              ...prevErrors,\r\n              password: response.data.error,\r\n            }));\r\n          }\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        window.alert(error.message);\r\n      });\r\n  };\r\n\r\n  const schema = {\r\n    name: Joi.string().min(3).max(30).required(),\r\n    email: Joi.string()\r\n      .email({\r\n        minDomainSegments: 2,\r\n        tlds: { allow: [\"com\", \"in\"] },\r\n      })\r\n      .required(),\r\n    license: Joi.string().required(),\r\n    phone: Joi.array().items(Joi.number().min(10).required()).max(5),\r\n    address: Joi.string().required(),\r\n    state: Joi.string().required(),\r\n    district: Joi.string().required(),\r\n    pincode: Joi.number()\r\n      .positive()\r\n      .min(6)\r\n      .message(\"Pincode must contain 6 digits\")\r\n      .required(),\r\n    password: Joi.string()\r\n      .pattern(new RegExp(\"^[a-zA-Z0-9]{3,30}$\"))\r\n      .message(\"Enter a stronger password\")\r\n      .required(),\r\n    cPassword: Joi.ref(\"password\"),\r\n    terms: Joi.boolean().required().invalid(false),\r\n  };\r\n\r\n  const handleNumberChange = (e, id) => {\r\n    const allErrors = { ...errors };\r\n    const errorMsg = validatePhone(e.target);\r\n    if (errorMsg) {\r\n      errors[e.target.name] = errorMsg;\r\n    } else {\r\n      delete errors[e.target.name];\r\n    }\r\n\r\n    const updatedData = { ...data };\r\n    updatedData.phone[id] = e.target.value;\r\n    setData(updatedData);\r\n    setErrors(allErrors);\r\n  };\r\n\r\n  const validatePhone = ({ name, value }) => {\r\n    const phone = { [name]: value };\r\n    const phoneSchema = Joi.object({\r\n      [name]: Joi.number().min(10).label(\"Phone Number\"),\r\n    });\r\n    const { error } = phoneSchema.validate(phone);\r\n    return error ? error.details[0].message : null;\r\n  };\r\n\r\n  const handleAdd = () => {\r\n    if (data.phone.length < 5) {\r\n      setData((prevState) => ({\r\n        ...prevState,\r\n        phone: [...prevState.phone, \"\"],\r\n      }));\r\n    } else {\r\n      setMaxLimit(\"Maximum limit reached\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <LoggedOutNavbar />\r\n\r\n      <Grid container style={{ margin: \"20px auto\" }}>\r\n        <Grid item xs={6} container justify=\"center\" alignItems=\"center\">\r\n          <img src={hospital} alt=\"hospital\" style={{ maxWidth: \"100%\" }} />\r\n        </Grid>\r\n\r\n        <Grid item xs={6} container justify=\"center\" alignItems=\"center\">\r\n          <form>\r\n            <Paper style={paperStyle} elevation={5}>\r\n              <h2 style={{ marginTop: \"10px\" }} align=\"center\">\r\n                Hospital Registration\r\n              </h2>\r\n\r\n              <TextField\r\n                label=\"Name\"\r\n                placeholder=\"Enter your full name\"\r\n                type=\"text\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"name\"\r\n                value={data.name}\r\n                onChange={handleChange}\r\n                inputProps={{\r\n                  maxLength: 30,\r\n                }}\r\n                error={errors && errors.name ? true : false}\r\n                helperText={errors && errors.name ? errors.name : null}\r\n              />\r\n\r\n              <TextField\r\n                label=\"Email\"\r\n                placeholder=\"Enter your email\"\r\n                type=\"email\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"email\"\r\n                value={data.email}\r\n                onChange={handleChange}\r\n                error={errors && errors.email ? true : false}\r\n                helperText={errors && errors.email ? errors.email : null}\r\n              />\r\n\r\n              <TextField\r\n                label=\"License Number\"\r\n                placeholder=\"Enter your license number\"\r\n                type=\"text\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"license\"\r\n                value={data.license}\r\n                onChange={handleChange}\r\n                error={errors && errors.license ? true : false}\r\n                helperText={errors && errors.license ? errors.license : null}\r\n              />\r\n\r\n              {data.phone.map((val, idx) => (\r\n                <TextField\r\n                  label={`Phone-${idx + 1}`}\r\n                  placeholder=\"Enter your phone number\"\r\n                  type=\"text\"\r\n                  fullWidth\r\n                  style={margin}\r\n                  name={`phone${idx}`}\r\n                  value={val}\r\n                  onChange={(e) => {\r\n                    handleNumberChange(e, idx);\r\n                  }}\r\n                  key={idx}\r\n                  inputProps={{\r\n                    maxLength: 10,\r\n                  }}\r\n                  error={errors && errors[`phone${idx}`] ? true : false}\r\n                  helperText={\r\n                    errors && errors[`phone${idx}`]\r\n                      ? errors[`phone${idx}`]\r\n                      : null\r\n                  }\r\n                />\r\n              ))}\r\n              <Button onClick={handleAdd}>{maxLimit}</Button>\r\n\r\n              <TextField\r\n                label=\"Registered Address\"\r\n                placeholder=\"Enter your registered address\"\r\n                type=\"text\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"address\"\r\n                value={data.address}\r\n                onChange={handleChange}\r\n                error={errors && errors.address ? true : false}\r\n                helperText={errors && errors.address ? errors.address : null}\r\n              />\r\n\r\n              <FormControl style={margin}>\r\n                <InputLabel>State</InputLabel>\r\n                <Select name=\"state\" onChange={handleChange} value={data.state}>\r\n                  {states.states.map((item, id) => (\r\n                    <MenuItem value={item.state} key={id}>\r\n                      {item.state}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n\r\n              <FormControl style={margin}>\r\n                <InputLabel>District</InputLabel>\r\n                <Select\r\n                  inputProps={{ readOnly: enable }}\r\n                  name=\"district\"\r\n                  onChange={handleChange}\r\n                  value={data.district}\r\n                >\r\n                  {states.states[selectedStateIndex].districts.map(\r\n                    (item, id) => (\r\n                      <MenuItem value={item} key={id}>\r\n                        {item}\r\n                      </MenuItem>\r\n                    )\r\n                  )}\r\n                </Select>\r\n              </FormControl>\r\n\r\n              <TextField\r\n                label=\"Pincode\"\r\n                placeholder=\"Enter your pincode\"\r\n                type=\"text\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"pincode\"\r\n                value={data.pincode}\r\n                onChange={handleChange}\r\n                inputProps={{\r\n                  maxLength: 6,\r\n                }}\r\n                error={errors && errors.pincode ? true : false}\r\n                helperText={errors && errors.pincode ? errors.pincode : null}\r\n              />\r\n\r\n              <TextField\r\n                label=\"Password\"\r\n                placeholder=\"Create your password\"\r\n                type=\"password\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"password\"\r\n                value={data.password}\r\n                onChange={handleChange}\r\n                inputProps={{\r\n                  maxLength: 30,\r\n                }}\r\n                error={errors && errors.password ? true : false}\r\n                helperText={errors && errors.password ? errors.password : null}\r\n              />\r\n\r\n              <TextField\r\n                label=\"Confirm Password\"\r\n                placeholder=\"Confirm your password\"\r\n                type=\"password\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"cPassword\"\r\n                value={data.cPassword}\r\n                onChange={handleChange}\r\n                inputProps={{\r\n                  maxLength: 30,\r\n                }}\r\n                error={data.password !== data.cPassword ? true : false}\r\n                helperText={\r\n                  data.password !== data.cPassword\r\n                    ? \"passwords do not match\"\r\n                    : null\r\n                }\r\n              />\r\n\r\n              <FormControlLabel\r\n                style={margin}\r\n                control={\r\n                  <Checkbox\r\n                    onChange={handleTermsCheck}\r\n                    inputProps={{ required: true }}\r\n                    name=\"terms\"\r\n                  />\r\n                }\r\n                label=\"Accept Terms and Conditions\"\r\n              />\r\n              <Link\r\n                to=\"/terms\"\r\n                style={{ color: \"#E94364\", fontWeight: \"bold\" }}\r\n              >\r\n                (Click here for terms and condition)\r\n              </Link>\r\n\r\n              <Button\r\n                variant=\"contained\"\r\n                style={{\r\n                  backgroundColor: \"#E94364\",\r\n                  marginTop: \"20px\",\r\n                  // color: \"white\",\r\n                }}\r\n                type=\"submit\"\r\n                disabled={validate()}\r\n                onClick={handleSubmit}\r\n              >\r\n                Sign Up\r\n              </Button>\r\n\r\n              <Typography align=\"center\" style={margin}>\r\n                <Link to=\"/Login\">Already a user ? Sign in</Link>\r\n              </Typography>\r\n            </Paper>\r\n          </form>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default BloodBankRegistration;","D:\\Nineleaps\\RedBank-Web\\src\\Components\\Auth\\terms.js",[],"D:\\Nineleaps\\RedBank-Web\\src\\Components\\Auth\\BloodBankRegistration.js",["305","306"],"import {\r\n  Grid,\r\n  Paper,\r\n  TextField,\r\n  Select,\r\n  MenuItem,\r\n  InputLabel,\r\n  FormControl,\r\n  Button,\r\n  FormControlLabel,\r\n  Checkbox,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport bloodbank from \"./images/bloodbank.jpg\";\r\nimport states from \"./states.json\";\r\nimport Joi from \"joi\";\r\nimport LoggedOutNavbar from \"../layouts/loggedoutNavbar\";\r\nimport axios from \"axios\";\r\nimport logging from \"../../redux/Actions/login\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport registerBloodBank from \"../../redux/Actions/registerBloodBank\";\r\n\r\nfunction BloodBankRegistration(props) {\r\n  console.log(props.location.type);\r\n  const [data, setData] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    license: \"\",\r\n    phone: [\"\"],\r\n    address: \"\",\r\n    state: \"\",\r\n    district: \"\",\r\n    pincode: \"\",\r\n    password: \"\",\r\n    cPassword: \"\",\r\n    terms: false,\r\n  });\r\n\r\n  const dispatch = useDispatch();\r\n  const state = useSelector((state) => state);\r\n\r\n  const history = useHistory();\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const [maxLimit, setMaxLimit] = useState(\"Add a phone number\");\r\n  const [enable, setEnable] = useState(true);\r\n  const [selectedStateIndex, setSelectedStateIndex] = useState(0);\r\n\r\n  const paperStyle = {\r\n    height: \"auto\",\r\n    width: \"450px\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    padding: \"30px\",\r\n  };\r\n\r\n  const margin = { marginTop: \"15px\" };\r\n\r\n  const validateProperty = ({ name, value }) => {\r\n    const inputField = { [name]: value };\r\n    const fieldSchema = Joi.object({ [name]: schema[name] });\r\n    const { error } = fieldSchema.validate(inputField);\r\n    return error ? error.details[0].message : null;\r\n  };\r\n\r\n  const validate = () => {\r\n    const formSchema = Joi.object(schema);\r\n    const { error } = formSchema.validate(data, {\r\n      abortEarly: false,\r\n    });\r\n\r\n    if (!error) return null;\r\n\r\n    const allErrors = {};\r\n    for (let err of error.details) {\r\n      allErrors[err.path[0]] = err.message;\r\n    }\r\n    return allErrors;\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    if (name === \"state\") {\r\n      setEnable(false);\r\n      setSelectedStateIndex(\r\n        states.states.findIndex((item) => item.state === value)\r\n      );\r\n    }\r\n\r\n    const allErrors = { ...errors };\r\n    const errorMsg = validateProperty(e.target);\r\n    if (errorMsg) {\r\n      allErrors[name] = errorMsg;\r\n    } else {\r\n      delete allErrors[name];\r\n    }\r\n    const updatedData = { ...data };\r\n    updatedData[name] = value;\r\n    setData(updatedData);\r\n    setErrors(allErrors);\r\n  };\r\n\r\n  const handleTermsCheck = (e) => {\r\n    const updatedData = { ...data };\r\n    updatedData[e.target.name] = e.target.checked;\r\n    const allErrors = { ...errors };\r\n    setData(updatedData);\r\n    setErrors(allErrors);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const errors = validate();\r\n\r\n    setErrors({ errors: errors || {} });\r\n    if (errors) return;\r\n\r\n    axios\r\n      .post(\"http://localhost:5000/login\", {\r\n        email: data.email,\r\n        password: data.password,\r\n      })\r\n      .then(function (response) {\r\n        if (response.data.success) {\r\n          dispatch(\r\n            logging({ isLoggedIn: true, userType: props.location.type })\r\n          );\r\n          history.push(\"/home\");\r\n        } else {\r\n          console.log(response.data.error);\r\n          if (response.data.error.includes(\"email\")) {\r\n            setErrors((prevErrors) => ({\r\n              ...prevErrors,\r\n              email: response.data.error,\r\n            }));\r\n          } else if (response.data.error.includes(\"password\")) {\r\n            setErrors((prevErrors) => ({\r\n              ...prevErrors,\r\n              password: response.data.error,\r\n            }));\r\n          }\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        window.alert(error.message);\r\n      });\r\n  };\r\n\r\n  const schema = {\r\n    name: Joi.string().min(3).max(30).required(),\r\n    email: Joi.string()\r\n      .email({\r\n        minDomainSegments: 2,\r\n        tlds: { allow: [\"com\", \"in\"] },\r\n      })\r\n      .required(),\r\n    license: Joi.string().required(),\r\n    phone: Joi.array().items(Joi.number().min(10).required()).max(5),\r\n    address: Joi.string().required(),\r\n    state: Joi.string().required(),\r\n    district: Joi.string().required(),\r\n    pincode: Joi.number()\r\n      .positive()\r\n      .min(6)\r\n      .message(\"Pincode must contain 6 digits\")\r\n      .required(),\r\n    password: Joi.string()\r\n      .pattern(new RegExp(\"^[a-zA-Z0-9]{3,30}$\"))\r\n      .message(\"Enter a stronger password\")\r\n      .required(),\r\n    cPassword: Joi.ref(\"password\"),\r\n    terms: Joi.boolean().required().invalid(false),\r\n  };\r\n\r\n  const handleNumberChange = (e, id) => {\r\n    const allErrors = { ...errors };\r\n    const errorMsg = validatePhone(e.target);\r\n    if (errorMsg) {\r\n      errors[e.target.name] = errorMsg;\r\n    } else {\r\n      delete errors[e.target.name];\r\n    }\r\n\r\n    const updatedData = { ...data };\r\n    updatedData.phone[id] = e.target.value;\r\n    setData(updatedData);\r\n    setErrors(allErrors);\r\n  };\r\n\r\n  const validatePhone = ({ name, value }) => {\r\n    const phone = { [name]: value };\r\n    const phoneSchema = Joi.object({\r\n      [name]: Joi.number().min(10).label(\"Phone Number\"),\r\n    });\r\n    const { error } = phoneSchema.validate(phone);\r\n    return error ? error.details[0].message : null;\r\n  };\r\n\r\n  const handleAdd = () => {\r\n    if (data.phone.length < 5) {\r\n      setData((prevState) => ({\r\n        ...prevState,\r\n        phone: [...prevState.phone, \"\"],\r\n      }));\r\n    } else {\r\n      setMaxLimit(\"Maximum limit reached\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <LoggedOutNavbar />\r\n\r\n      <Grid container style={{ margin: \"20px auto\" }}>\r\n        <Grid item xs={6} container justify=\"center\" alignItems=\"center\">\r\n          <img src={bloodbank} alt=\"bloodbank\" style={{ maxWidth: \"100%\" }} />\r\n        </Grid>\r\n\r\n        <Grid item xs={6} container justify=\"center\" alignItems=\"center\">\r\n          <form>\r\n            <Paper style={paperStyle} elevation={5}>\r\n              <h2 style={{ marginTop: \"10px\" }} align=\"center\">\r\n                Blood-bank Registration\r\n              </h2>\r\n\r\n              <TextField\r\n                label=\"Name\"\r\n                placeholder=\"Enter your full name\"\r\n                type=\"text\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"name\"\r\n                value={data.name}\r\n                onChange={handleChange}\r\n                inputProps={{\r\n                  maxLength: 30,\r\n                }}\r\n                error={errors && errors.name ? true : false}\r\n                helperText={errors && errors.name ? errors.name : null}\r\n              />\r\n\r\n              <TextField\r\n                label=\"Email\"\r\n                placeholder=\"Enter your email\"\r\n                type=\"email\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"email\"\r\n                value={data.email}\r\n                onChange={handleChange}\r\n                error={errors && errors.email ? true : false}\r\n                helperText={errors && errors.email ? errors.email : null}\r\n              />\r\n\r\n              <TextField\r\n                label=\"License Number\"\r\n                placeholder=\"Enter your license number\"\r\n                type=\"text\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"license\"\r\n                value={data.license}\r\n                onChange={handleChange}\r\n                error={errors && errors.license ? true : false}\r\n                helperText={errors && errors.license ? errors.license : null}\r\n              />\r\n\r\n              {data.phone.map((val, idx) => (\r\n                <TextField\r\n                  label={`Phone-${idx + 1}`}\r\n                  placeholder=\"Enter your phone number\"\r\n                  type=\"text\"\r\n                  fullWidth\r\n                  style={margin}\r\n                  name={`phone${idx}`}\r\n                  value={val}\r\n                  onChange={(e) => {\r\n                    handleNumberChange(e, idx);\r\n                  }}\r\n                  key={idx}\r\n                  inputProps={{\r\n                    maxLength: 10,\r\n                  }}\r\n                  error={errors && errors[`phone${idx}`] ? true : false}\r\n                  helperText={\r\n                    errors && errors[`phone${idx}`]\r\n                      ? errors[`phone${idx}`]\r\n                      : null\r\n                  }\r\n                />\r\n              ))}\r\n              <Button onClick={handleAdd}>{maxLimit}</Button>\r\n\r\n              <TextField\r\n                label=\"Registered Address\"\r\n                placeholder=\"Enter your registered address\"\r\n                type=\"text\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"address\"\r\n                value={data.address}\r\n                onChange={handleChange}\r\n                error={errors && errors.address ? true : false}\r\n                helperText={errors && errors.address ? errors.address : null}\r\n              />\r\n\r\n              <FormControl style={margin}>\r\n                <InputLabel>State</InputLabel>\r\n                <Select name=\"state\" onChange={handleChange} value={data.state}>\r\n                  {states.states.map((item, id) => (\r\n                    <MenuItem value={item.state} key={id}>\r\n                      {item.state}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n\r\n              <FormControl style={margin}>\r\n                <InputLabel>District</InputLabel>\r\n                <Select\r\n                  inputProps={{ readOnly: enable }}\r\n                  name=\"district\"\r\n                  onChange={handleChange}\r\n                  value={data.district}\r\n                >\r\n                  {states.states[selectedStateIndex].districts.map(\r\n                    (item, id) => (\r\n                      <MenuItem value={item} key={id}>\r\n                        {item}\r\n                      </MenuItem>\r\n                    )\r\n                  )}\r\n                </Select>\r\n              </FormControl>\r\n\r\n              <TextField\r\n                label=\"Pincode\"\r\n                placeholder=\"Enter your pincode\"\r\n                type=\"text\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"pincode\"\r\n                value={data.pincode}\r\n                onChange={handleChange}\r\n                inputProps={{\r\n                  maxLength: 6,\r\n                }}\r\n                error={errors && errors.pincode ? true : false}\r\n                helperText={errors && errors.pincode ? errors.pincode : null}\r\n              />\r\n\r\n              <TextField\r\n                label=\"Password\"\r\n                placeholder=\"Create your password\"\r\n                type=\"password\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"password\"\r\n                value={data.password}\r\n                onChange={handleChange}\r\n                inputProps={{\r\n                  maxLength: 30,\r\n                }}\r\n                error={errors && errors.password ? true : false}\r\n                helperText={errors && errors.password ? errors.password : null}\r\n              />\r\n\r\n              <TextField\r\n                label=\"Confirm Password\"\r\n                placeholder=\"Confirm your password\"\r\n                type=\"password\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"cPassword\"\r\n                value={data.cPassword}\r\n                onChange={handleChange}\r\n                inputProps={{\r\n                  maxLength: 30,\r\n                }}\r\n                error={data.password !== data.cPassword ? true : false}\r\n                helperText={\r\n                  data.password !== data.cPassword\r\n                    ? \"passwords do not match\"\r\n                    : null\r\n                }\r\n              />\r\n\r\n              <FormControlLabel\r\n                style={margin}\r\n                control={\r\n                  <Checkbox\r\n                    onChange={handleTermsCheck}\r\n                    inputProps={{ required: true }}\r\n                    name=\"terms\"\r\n                    required\r\n                  />\r\n                }\r\n                label=\"Accept Terms and Conditions\"\r\n              />\r\n              <Link\r\n                to=\"/terms\"\r\n                style={{ color: \"#E94364\", fontWeight: \"bold\" }}\r\n              >\r\n                (Click here for terms and condition)\r\n              </Link>\r\n\r\n              <Button\r\n                variant=\"contained\"\r\n                style={{\r\n                  backgroundColor: \"#E94364\",\r\n                  marginTop: \"20px\",\r\n                  // color: \"white\",\r\n                }}\r\n                type=\"submit\"\r\n                disabled={validate()}\r\n                // onClick={function(event){handleSubmit(); forAxios();}}\r\n                onClick={handleSubmit}\r\n              >\r\n                {/* <Link to=\"/home\">Sign up</Link> */}\r\n                Sign Up\r\n              </Button>\r\n\r\n              <Typography align=\"center\" style={margin}>\r\n                <Link to=\"/Login\">Already a user ? Sign in</Link>\r\n              </Typography>\r\n            </Paper>\r\n          </form>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default BloodBankRegistration;","D:\\Nineleaps\\RedBank-Web\\src\\Components\\Auth\\ForgotPassword.js",["307","308"],"import React, { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport forgotPwd from \"./images/forgotPwd.png\";\r\nimport LoggedOutNavbar from \"../layouts/loggedoutNavbar\";\r\nimport { Grid, Paper, TextField, Button } from \"@material-ui/core\";\r\nimport Joi from \"joi\";\r\nimport axios from \"axios\";\r\n\r\nfunction ForgotPassword() {\r\n  const history = useHistory();\r\n  const [recoveryEmail, setRecoveryEmail] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const paperStyle = {\r\n    display: \"flex\",\r\n    width: 380,\r\n    flexDirection: \"column\",\r\n    padding: \"30px\",\r\n  };\r\n  const margin = { marginTop: \"20px\" };\r\n\r\n  const handleChange = (e) => {\r\n    setRecoveryEmail(e.target.value);\r\n  };\r\n\r\n  const validate = () => {\r\n    let error = \"\";\r\n    if (\r\n      new RegExp(/[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,15}/g).test(recoveryEmail)\r\n    )\r\n      error = \"\";\r\n    else error = \"Invalid email address\";\r\n\r\n    return error;\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const error = validate();\r\n    setError(error);\r\n    if (error) return;\r\n\r\n    axios\r\n      .post(\"http://localhost:5000/forgotpassword\", {\r\n        recoveryEmail: recoveryEmail,\r\n      })\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          history.push(\"/VerifyCode\");\r\n        } else {\r\n          setError(response.data.error);\r\n        }\r\n      });\r\n\r\n    console.log(\"submitted\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <LoggedOutNavbar />\r\n      <Grid\r\n        container\r\n        style={{ marginTop: \"100px\", backgroundColor: \"#E94364\" }}\r\n      >\r\n        <Grid item xs={6} container justify=\"center\" alignItems=\"center\">\r\n          <img src={forgotPwd} alt=\"fgtpwd\" width=\"800px\" height=\"600px\" />\r\n        </Grid>\r\n\r\n        <Grid item xs={6} container justify=\"center\" alignItems=\"center\">\r\n          <form onSubmit={handleSubmit}>\r\n            <Paper elevation={5} style={paperStyle}>\r\n              <Grid align=\"center\">\r\n                <h2 style={{ marginTop: \"20px\" }}>Find your Account</h2>\r\n                <p style={margin}>\r\n                  Help us find your account by entering your registered email.\r\n                </p>\r\n                <TextField\r\n                  label=\"Recovery Email\"\r\n                  name=\"recoveryEmail\"\r\n                  type=\"email\"\r\n                  value={recoveryEmail}\r\n                  onChange={handleChange}\r\n                  fullWidth\r\n                  required\r\n                  style={margin}\r\n                  error={error ? true : false}\r\n                  helperText={error ? error : null}\r\n                />\r\n                <Button\r\n                  variant=\"contained\"\r\n                  type=\"submit\"\r\n                  style={{ marginTop: \"20px\", backgroundColor: \"#E94364\" }}\r\n                >\r\n                  Next\r\n                </Button>\r\n              </Grid>\r\n            </Paper>\r\n          </form>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ForgotPassword;\r\n","D:\\Nineleaps\\RedBank-Web\\src\\Components\\Auth\\VerifyCode.js",["309"],"import React, { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport verifyCode from \"./images/verifyCode.png\";\r\nimport LoggedOutNavbar from \"../layouts/loggedoutNavbar\";\r\nimport { Grid, Paper, TextField, Button } from \"@material-ui/core\";\r\n\r\nimport axios from \"axios\";\r\n\r\nfunction VerifyCode() {\r\n  const paperStyle = {\r\n    display: \"flex\",\r\n    width: 380,\r\n    flexDirection: \"column\",\r\n    padding: \"30px\",\r\n  };\r\n  const margin = { marginTop: \"20px\" };\r\n\r\n  const [otp, setOtp] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const history = useHistory();\r\n\r\n  const handleChange = (e) => {\r\n    setOtp(e.target.value);\r\n  };\r\n\r\n  const handleClick = () => {\r\n    const error = validate();\r\n    setError(error);\r\n    if (error) return;\r\n\r\n    axios\r\n      .post(\"http://localhost:5000/otp\", {\r\n        otp: otp,\r\n      })\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          history.push(\"/ResetPassword\");\r\n        } else setError(response.data.error);\r\n      });\r\n  };\r\n\r\n  const validate = () => {\r\n    let error = \"\";\r\n    if (otp.length !== 6) error = \"Otp should contain 6 digits\";\r\n    return error;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <LoggedOutNavbar />\r\n      <Grid\r\n        container\r\n        style={{ marginTop: \"100px\", backgroundColor: \"#E94364\" }}\r\n      >\r\n        <Grid item xs={6} container justify=\"center\" alignItems=\"center\">\r\n          <img src={verifyCode} alt=\"verify\" style={{ width: \"80%\" }} />\r\n        </Grid>\r\n\r\n        <Grid item xs={6} container justify=\"center\" alignItems=\"center\">\r\n          <Paper elevation={5} style={paperStyle}>\r\n            <Grid align=\"center\">\r\n              <h2 style={{ marginTop: \"20px\" }}>Enter the code</h2>\r\n              <p style={margin}>\r\n                If the entered email address matches any account registered with\r\n                us, we will send u a mail. So, Check your Mailbox\r\n              </p>\r\n              <TextField\r\n                label=\"Enter the code sent\"\r\n                fullWidth\r\n                required\r\n                style={margin}\r\n                name=\"otp\"\r\n                value={otp}\r\n                type=\"number\"\r\n                onChange={handleChange}\r\n                error={error ? true : false}\r\n                helperText={error ? error : null}\r\n              />\r\n              <Button\r\n                variant=\"contained\"\r\n                style={{ marginTop: \"20px\", backgroundColor: \"#E94364\" }}\r\n                onClick={handleClick}\r\n              >\r\n                Verify\r\n              </Button>\r\n            </Grid>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default VerifyCode;\r\n","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\home\\main.js",["310","311"],"D:\\Nineleaps\\RedBank-Web\\src\\Components\\Auth\\Test.js",["312","313"],"import React, { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport login from \"./images/login.png\";\r\nimport avatar from \"./images/avatar.png\";\r\nimport { Grid, Paper, TextField, Button, Typography } from \"@material-ui/core\";\r\nimport LoggedOutNavbar from \"../layouts/loggedoutNavbar\";\r\nimport Joi from \"joi\";\r\nimport axios from \"axios\";\r\n\r\nfunction Login() {\r\n  const history = useHistory();\r\n\r\n  const [data, setData] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const paperStyle = {\r\n    display: \"flex\",\r\n    width: 380,\r\n    flexDirection: \"column\",\r\n    padding: \"30px\",\r\n  };\r\n\r\n  const margin = { marginTop: \"20px\" };\r\n\r\n  const schema = {\r\n    email: Joi.string().email({\r\n      minDomainSegments: 2,\r\n      tlds: { allow: [\"com\", \"in\"] },\r\n    }),\r\n    password: Joi.string()\r\n      .pattern(new RegExp(\"^[a-zA-Z0-9]{3,30}$\"))\r\n      .message(\"Enter a stronger password\")\r\n      .required(),\r\n  };\r\n\r\n  const handleClick = (e) => {\r\n    e.preventDefault();\r\n    const errors = validate();\r\n\r\n    setErrors({ errors: errors || {} });\r\n    if (errors) return;\r\n\r\n    // axios\r\n    //   .post(\"http://localhost:5000/login\", {\r\n    //     email: state.data.email,\r\n    //     password: state.data.password,\r\n    //   })\r\n    //   .then((response) => {\r\n    //     console.log(state);\r\n    //     console.log(response);\r\n    //     setState(!state.isLoggedIn);\r\n    //   });\r\n\r\n    // history.push(\"/home\");\r\n    console.log(data);\r\n  };\r\n\r\n  const validateProperty = ({ name, value }) => {\r\n    const inputField = { [name]: value };\r\n    const fieldSchema = Joi.object({ [name]: schema[name] });\r\n    const { error } = fieldSchema.validate(inputField);\r\n    return error ? error.details[0].message : null;\r\n  };\r\n\r\n  const validate = () => {\r\n    const formSchema = Joi.object(schema);\r\n    const { error } = formSchema.validate(data, {\r\n      abortEarly: false,\r\n    });\r\n\r\n    if (!error) return null;\r\n\r\n    const allErrors = {};\r\n    for (let err of error.details) {\r\n      allErrors[err.path[0]] = err.message;\r\n    }\r\n    return allErrors;\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    const allErrors = { ...errors };\r\n    const errorMsg = validateProperty(e.target);\r\n    if (errorMsg) {\r\n      allErrors[name] = errorMsg;\r\n    } else {\r\n      delete allErrors[name];\r\n    }\r\n    const updatedData = { ...data };\r\n    updatedData[name] = value;\r\n    setData(updatedData);\r\n    setErrors(allErrors);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <LoggedOutNavbar />\r\n\r\n      <Grid\r\n        container\r\n        style={{ marginTop: \"100px\", backgroundColor: \"#E94364\" }}\r\n      >\r\n        <Grid item xs={6} container justify=\"center\" alignItems=\"center\">\r\n          <img src={login} alt=\"#\" />\r\n        </Grid>\r\n\r\n        <Grid item xs={6} container justify=\"center\" alignItems=\"center\">\r\n          <Paper style={paperStyle} elevation={5}>\r\n            <Grid align=\"center\">\r\n              <img alt=\"\" src={avatar} width=\"80px\" />\r\n              <h2 style={{ marginTop: \"10px\" }}>Sign In</h2>\r\n            </Grid>\r\n\r\n            <TextField\r\n              label=\"Email\"\r\n              placeholder=\"Enter your email\"\r\n              type=\"email\"\r\n              fullWidth\r\n              required\r\n              variant=\"outlined\"\r\n              style={margin}\r\n              name=\"email\"\r\n              value={data.email}\r\n              onChange={handleChange}\r\n              error={errors && errors.email}\r\n              helperText={errors && errors.email ? errors.email : null}\r\n            />\r\n\r\n            <TextField\r\n              label=\"Password\"\r\n              placeholder=\"Enter your password\"\r\n              type=\"password\"\r\n              fullWidth\r\n              required\r\n              variant=\"outlined\"\r\n              style={margin}\r\n              name=\"password\"\r\n              value={data.password}\r\n              onChange={handleChange}\r\n              error={errors && errors.password}\r\n              helperText={errors && errors.password ? errors.password : null}\r\n            />\r\n\r\n            <Typography style={margin}>\r\n              <Link to=\"/ForgotPassword\">Forgot password</Link>\r\n            </Typography>\r\n\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              fullWidth\r\n              style={{ marginTop: \"20px\", backgroundColor: \"#E94364\" }}\r\n              onClick={handleClick}\r\n              disabled={validate() ? true : false}\r\n            >\r\n              Login\r\n            </Button>\r\n\r\n            <Grid align=\"center\">\r\n              <Typography style={margin}>\r\n                <p>\r\n                  New user ? <Link to=\"/Options\">Sign up</Link>\r\n                </p>\r\n              </Typography>\r\n              <h3 style={margin}>OR</h3>\r\n              <Typography style={margin}>\r\n                <Link to=\"/Options\">Sign in with google account</Link>\r\n              </Typography>\r\n            </Grid>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\profile\\index.js",[],"D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\about\\about.js",["314","315"],"import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Typography,\r\n  Box,\r\n  Container,\r\n  Grid,\r\n  Card,\r\n  CardMedia,\r\n  TextField,\r\n  Paper,\r\n  Button,\r\n} from \"@material-ui/core/\";\r\nimport { Navbar, Footer } from \"../../layouts\";\r\nimport axios from \"axios\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  hero: {\r\n    backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url('https://elements-cover-images-0.imgix.net/6e855666-1764-4019-be9e-998505bd3fdf?auto=compress&crop=edges&fit=crop&fm=jpeg&h=630&w=1200&s=fffbff5628fab9da0e2697d748790e92')`,\r\n    height: \"600px\",\r\n    backgroundPosition: \"center\",\r\n    backgroundRepeat: \"no-repeat\",\r\n    backgroundSize: \"cover\",\r\n    position: \"relative\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    color: \"#fff\",\r\n    fontSize: \"4rem\",\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      height: 300,\r\n      fontSize: \"3em\",\r\n    },\r\n  },\r\n  blogsContainer: {\r\n    paddingTop: theme.spacing(3),\r\n  },\r\n  blogTitle: {\r\n    fontWeight: 800,\r\n    paddingBottom: theme.spacing(3),\r\n  },\r\n  card: {\r\n    maxWidth: \"100%\",\r\n  },\r\n}));\r\n\r\nfunction Home(props) {\r\n  const [message, addMsg] = useState({\r\n    subject: \"\",\r\n    msg: \"\",\r\n  });\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    const updatedData = { ...message };\r\n    updatedData[name] = value;\r\n    addMsg(updatedData);\r\n    console.log(message.subject);\r\n  };\r\n\r\n  const handleClick = (e) => {\r\n    e.preventDefault();\r\n    axios\r\n      .post(\"http://localhost:5000/contact\", {\r\n        message,\r\n      })\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          window.alert(\"Your message has been Submiited!\");\r\n        }\r\n      });\r\n  };\r\n\r\n  const user = props.location.user;\r\n  console.log(user);\r\n  const classes = useStyles();\r\n  const paperStyle = {\r\n    display: \"flex\",\r\n    width: 580,\r\n    flexDirection: \"column\",\r\n    padding: \"30px\",\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Navbar user={user} />\r\n\r\n      <div className=\"Home\">\r\n        <Box className={classes.hero}>\r\n          <Box>About Us</Box>\r\n        </Box>\r\n        <Container maxWidth=\"lg\" className={classes.blogsContainer}></Container>\r\n        <Container maxWidth=\"lg\" className={classes.blogsContainer}>\r\n          <Grid container>\r\n            <Grid xs={5}>\r\n              <Card>\r\n                <Typography>\r\n                  Lorem Ipsum is simply dummy text of the printing and\r\n                  typesetting industry. Lorem Ipsum has been the industry's\r\n                  standard dummy text ever since the 1500s, when an unknown\r\n                  printer took a galley of type and scrambled it to make a type\r\n                  specimen book. It has survived not only five centuries, but\r\n                  also the leap into electronic typesetting, remaining\r\n                  essentially unchanged. It was popularised in the 1960s with\r\n                  the release of Letraset sheets containing Lorem Ipsum\r\n                  passages, and more recently with desktop publishing software\r\n                  like Aldus PageMaker including versions of Lorem Ipsum The\r\n                  leap into electronic typesetting, remaining essentially\r\n                  unchanged. It was popularised in the 1960s with the release of\r\n                  Letraset sheets containing Lorem Ipsum passages, and more\r\n                  recently with desktop publishing software like Aldus PageMaker\r\n                  including versions of Lorem Ipsum\r\n                </Typography>\r\n              </Card>\r\n            </Grid>\r\n            <Grid xs={2}></Grid>\r\n            <Grid xs={5} container justify=\"center\" alignItems=\"center\">\r\n              <Paper style={paperStyle} elevation={5}>\r\n                {/* <Card> */}\r\n                <Typography>Contact Us</Typography>\r\n                <TextField\r\n                  style={{ marginTop: \"10px\" }}\r\n                  className={classes.formControl}\r\n                  label=\"Subject:\"\r\n                  type=\"text\"\r\n                  onChange={(e) =>\r\n                    addMsg({ ...message, subject: e.target.value })\r\n                  }\r\n                  value={message.subject}\r\n                  variant=\"outlined\"\r\n                  inputProps={{ maxLength: 15 }}\r\n                />\r\n                <TextField\r\n                  style={{ marginTop: \"10px\" }}\r\n                  className={classes.formControl}\r\n                  label=\"Send a Message\"\r\n                  multiline\r\n                  onChange={handleChange}\r\n                  rows={7}\r\n                  onChange={(e) => addMsg({ ...message, msg: e.target.value })}\r\n                  value={message.msg}\r\n                  name=\"message\"\r\n                  variant=\"outlined\"\r\n                />\r\n                <Button style={{ marginTop: \"10px\" }} onClick={handleClick}>\r\n                  Submit\r\n                </Button>\r\n              </Paper>\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n      </div>\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\upcomingDrive\\UpcomingDrive.js",[],"D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\findDonors\\FindDonors.js",[],"D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\buyBlood\\BuyBlood.js",[],"D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\myCommitments\\MyCommitments.js",[],"D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\activeDonorReq\\ActiveDonorReq.js",[],"D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\myPurchases\\MyPurchases.js",[],"D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\buyBlood\\product.js",["316","317","318"],"D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\myDrives\\myDrives.js",["319","320","321"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  makeStyles,\r\n  Paper,\r\n  Typography,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport { Navbar, Footer } from \"../../../layouts\";\r\n\r\nimport Table from \"./table\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    width: \"100%\",\r\n\r\n    flexDirection: \"column\",\r\n    margin: \"auto\",\r\n    padding: theme.spacing(4),\r\n  },\r\n  table: {\r\n    marginTop: theme.spacing(7),\r\n  },\r\n}));\r\n\r\nfunction MyBloodDonationDrives() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <Paper square elevation={5} className={classes.paper}>\r\n        <Typography variant=\"h4\">My Blood Donation Drives</Typography>\r\n        <Divider />\r\n        <Typography variant=\"h6\">\r\n          A section showing details of all the drives you have conducted, or\r\n          which are yet to happen in the near future.\r\n        </Typography>\r\n      </Paper>\r\n      <Container maxWidth=\"lg\">\r\n        <Grid container justify=\"center\" className={classes.table}>\r\n          <Grid item xs={12}>\r\n            <Table />\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MyBloodDonationDrives;\r\n","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\conductDrive\\conductDrive.js",["322"],"import React, { useState } from \"react\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  makeStyles,\r\n  Paper,\r\n  FormControl,\r\n  Divider,\r\n  Typography,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  TextField,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport { Navbar, Footer } from \"../../../layouts\";\r\nimport statesData from \"../../../Auth/states.json\";\r\nimport Joi from \"joi\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport axios from \"axios\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    padding: theme.spacing(5),\r\n    width: \"650px\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  papers: {\r\n    width: \"100%\",\r\n\r\n    flexDirection: \"column\",\r\n    margin: \"auto\",\r\n    padding: theme.spacing(4),\r\n  },\r\n  formControl: {\r\n    marginTop: theme.spacing(3),\r\n    minWidth: 250,\r\n  },\r\n  tableContainer: {\r\n    marginTop: theme.spacing(9),\r\n    marginBottom: theme.spacing(3),\r\n  },\r\n  tables: {\r\n    padding: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nfunction ConductDrive() {\r\n  const [data, setData] = useState({\r\n    bg: [],\r\n    address: \"\",\r\n    state: \"\",\r\n    district: \"\",\r\n    pincode: \"\",\r\n    startTime: \"\",\r\n    startDate: \"\",\r\n    endTime: \"\",\r\n    endDate: \"\",\r\n    message: \"\",\r\n  });\r\n\r\n  const schema = {\r\n    bg: Joi.required(),\r\n    address: Joi.string().required(),\r\n    state: Joi.string().required(),\r\n    district: Joi.string().required(),\r\n    pincode: Joi.number()\r\n      .positive()\r\n      .min(6)\r\n      .message(\"Pincode must contain 6 digits\")\r\n      .required(),\r\n    startTime: Joi.string().required(),\r\n    startDate: Joi.string().required(),\r\n    endTime: Joi.string().required(),\r\n    endDate: Joi.string().required(),\r\n    message: Joi.required(),\r\n  };\r\n\r\n  const [errors, setErrors] = useState({});\r\n  const [enable, setEnable] = useState(true);\r\n  const [selectedStateIndex, setSelectedStateIndex] = useState(0);\r\n  const classes = useStyles();\r\n\r\n  const validateProperty = ({ name, value }) => {\r\n    const inputField = { [name]: value };\r\n    const fieldSchema = Joi.object({ [name]: schema[name] });\r\n    const { error } = fieldSchema.validate(inputField);\r\n    return error ? error.details[0].message : null;\r\n  };\r\n\r\n  const validate = () => {\r\n    const formSchema = Joi.object(schema);\r\n    const { error } = formSchema.validate(data, {\r\n      abortEarly: false,\r\n    });\r\n\r\n    if (!error) return null;\r\n\r\n    const allErrors = {};\r\n    for (let err of error.details) {\r\n      allErrors[err.path[0]] = err.message;\r\n    }\r\n    return allErrors;\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    if (name === \"state\") {\r\n      setEnable(false);\r\n      setSelectedStateIndex(\r\n        statesData.states.findIndex((item) => item.state === value)\r\n      );\r\n    }\r\n\r\n    const allErrors = { ...errors };\r\n    const errorMsg = validateProperty(e.target);\r\n    if (errorMsg) {\r\n      allErrors[name] = errorMsg;\r\n    } else {\r\n      delete allErrors[name];\r\n    }\r\n    const updatedData = { ...data };\r\n    updatedData[name] = value;\r\n    setData(updatedData);\r\n    setErrors(allErrors);\r\n  };\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClosed = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const errors = validate();\r\n\r\n    setErrors({ errors: errors || {} });\r\n    if (errors) return;\r\n\r\n    axios.post(\"http://localhost:5000/orgdrive\").then((response) => {\r\n      if (response.data.success) {\r\n        window.alert(\r\n          \"Drive has been initiated, check My Drives sections for more details\"\r\n        );\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <Paper square elevation={5} className={classes.papers}>\r\n        <Typography variant=\"h4\">Conduct Blood Donation Drive</Typography>\r\n        <Divider />\r\n        <Typography variant=\"h6\">\r\n          Here you can orgainze a Blood Donation drive and send notification to\r\n          eligible donors. They will recive all the necessary details filled\r\n          here for the drive. Fields with \"*\" are mandatory.\r\n        </Typography>\r\n      </Paper>\r\n      <Container maxWidth=\"lg\">\r\n        <Grid container justify=\"center\">\r\n          <Grid item>\r\n            <form onSubmit={handleSubmit}>\r\n              <Paper className={classes.paper} elevation={5}>\r\n                <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                  <InputLabel>Select required Blood Groups *</InputLabel>\r\n                  <Select\r\n                    required\r\n                    multiple\r\n                    label=\"Select required Blood Groups\"\r\n                    name=\"bg\"\r\n                    onChange={handleChange}\r\n                    value={data.bg}\r\n                    error={errors && errors.bg}\r\n                    helperText={errors && errors.bg ? errors.bg : null}\r\n                  >\r\n                    <MenuItem value={\"A+\"}>A+</MenuItem>\r\n                    <MenuItem value={\"A-\"}>A-</MenuItem>\r\n                    <MenuItem value={\"B+\"}>B+</MenuItem>\r\n                    <MenuItem value={\"B-\"}>B-</MenuItem>\r\n                    <MenuItem value={\"AB+\"}>AB+</MenuItem>\r\n                    <MenuItem value={\"AB-\"}>AB-</MenuItem>\r\n                    <MenuItem value={\"O+\"}>O+</MenuItem>\r\n                    <MenuItem value={\"O-\"}>O-</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n                <TextField\r\n                  className={classes.formControl}\r\n                  label=\"Enter your Address *\"\r\n                  type=\"text\"\r\n                  name=\"address\"\r\n                  value={data.address}\r\n                  variant=\"outlined\"\r\n                  onChange={handleChange}\r\n                  inputProps={{ maxLength: 6 }}\r\n                  error={errors && errors.address}\r\n                  helperText={errors && errors.address ? errors.address : null}\r\n                />\r\n                <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                  <InputLabel>Select your State *</InputLabel>\r\n                  <Select\r\n                    name=\"state\"\r\n                    value={data.state}\r\n                    onChange={handleChange}\r\n                    label=\"Select your State\"\r\n                    error={errors && errors.state}\r\n                    helperText={errors && errors.state ? errors.state : null}\r\n                  >\r\n                    {statesData.states.map((item, id) => (\r\n                      <MenuItem key={id} value={item.state}>\r\n                        {item.state}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n\r\n                <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                  <InputLabel>Select your District *</InputLabel>\r\n                  <Select\r\n                    inputProps={{ readOnly: enable }}\r\n                    name=\"district\"\r\n                    value={data.district}\r\n                    onChange={handleChange}\r\n                    label=\"Select your District\"\r\n                    error={errors && errors.district}\r\n                    helperText={\r\n                      errors && errors.district ? errors.district : null\r\n                    }\r\n                  >\r\n                    {statesData.states[selectedStateIndex].districts.map(\r\n                      (item, id) => (\r\n                        <MenuItem key={id} value={item}>\r\n                          {item}\r\n                        </MenuItem>\r\n                      )\r\n                    )}\r\n                  </Select>\r\n                </FormControl>\r\n\r\n                <TextField\r\n                  className={classes.formControl}\r\n                  label=\"Enter your Pincode *\"\r\n                  type=\"text\"\r\n                  name=\"pincode\"\r\n                  value={data.pincode}\r\n                  variant=\"outlined\"\r\n                  onChange={handleChange}\r\n                  inputProps={{ maxLength: 6 }}\r\n                  error={errors && errors.pincode}\r\n                  helperText={errors && errors.pincode ? errors.pincode : null}\r\n                />\r\n\r\n                <TextField\r\n                  className={classes.formControl}\r\n                  label=\"Start Time *:\"\r\n                  type=\"text\"\r\n                  name=\"startTime\"\r\n                  value={data.startTime}\r\n                  variant=\"outlined\"\r\n                  onChange={handleChange}\r\n                  inputProps={{ maxLength: 6 }}\r\n                  error={errors && errors.startTime}\r\n                  helperText={\r\n                    errors && errors.startTime ? errors.startTime : null\r\n                  }\r\n                />\r\n                <TextField\r\n                  className={classes.formControl}\r\n                  label=\"End Time *:\"\r\n                  type=\"text\"\r\n                  name=\"endTime\"\r\n                  value={data.endTime}\r\n                  variant=\"outlined\"\r\n                  onChange={handleChange}\r\n                  inputProps={{ maxLength: 6 }}\r\n                  error={errors && errors.endTime}\r\n                  helperText={errors && errors.endTime ? errors.endTime : null}\r\n                />\r\n                <TextField\r\n                  className={classes.formControl}\r\n                  label=\"Start Date *:\"\r\n                  type=\"text\"\r\n                  name=\"startDate\"\r\n                  value={data.startDate}\r\n                  variant=\"outlined\"\r\n                  onChange={handleChange}\r\n                  inputProps={{ maxLength: 6 }}\r\n                  error={errors && errors.startDate}\r\n                  helperText={\r\n                    errors && errors.startDate ? errors.startDate : null\r\n                  }\r\n                />\r\n                <TextField\r\n                  className={classes.formControl}\r\n                  label=\"End Date *:\"\r\n                  type=\"text\"\r\n                  name=\"endDate\"\r\n                  value={data.endDate}\r\n                  variant=\"outlined\"\r\n                  onChange={handleChange}\r\n                  inputProps={{ maxLength: 6 }}\r\n                  error={errors && errors.endDate}\r\n                  helperText={errors && errors.endDate ? errors.endDate : null}\r\n                />\r\n\r\n                <TextField\r\n                  className={classes.formControl}\r\n                  label=\"Send a Message\"\r\n                  multiline\r\n                  rows={7}\r\n                  name=\"message\"\r\n                  value={data.message}\r\n                  onChange={handleChange}\r\n                  variant=\"outlined\"\r\n                  error={errors && errors.message}\r\n                  helperText={errors && errors.message ? errors.message : null}\r\n                />\r\n\r\n                <Button\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  className={classes.formControl}\r\n                  disabled={validate()}\r\n                  onClick={handleClickOpen}\r\n                >\r\n                  Send Notification\r\n                </Button>\r\n                <Dialog\r\n                  open={open}\r\n                  onClose={handleClosed}\r\n                  aria-labelledby=\"alert-dialog-title\"\r\n                  aria-describedby=\"alert-dialog-description\"\r\n                >\r\n                  <DialogTitle id=\"alert-dialog-title\">\r\n                    {\"Are You Sure, you want to logout?\"}\r\n                  </DialogTitle>\r\n                  <DialogContent></DialogContent>\r\n                  <DialogActions>\r\n                    <Button onClick={handleClosed} color=\"primary\">\r\n                      No\r\n                    </Button>\r\n                    <Button color=\"primary\" autoFocus>\r\n                      Yes\r\n                    </Button>\r\n                  </DialogActions>\r\n                </Dialog>\r\n              </Paper>\r\n            </form>\r\n          </Grid>\r\n          <Grid item xs={12} className={classes.tableContainer}>\r\n            {/* <Table /> */}\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ConductDrive;\r\n","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\myInvites\\myInvites.js",[],"D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\mysales\\mySales.js",[],"D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\myInventory\\myInventory.js",["323"],"import React, { useState } from \"react\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  makeStyles,\r\n  Paper,\r\n  Typography,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport { Navbar, Footer } from \"../../../layouts\";\r\n\r\nimport Table from \"./table\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    width: \"100%\",\r\n\r\n    flexDirection: \"column\",\r\n    margin: \"auto\",\r\n    padding: theme.spacing(4),\r\n  },\r\n  table: {\r\n    margin: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nfunction MyInventory() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <Paper square elevation={5} className={classes.paper}>\r\n        <Typography variant=\"h4\">My Inventory</Typography>\r\n        <Divider />\r\n        <Typography variant=\"h6\">\r\n          Here you can view, as well as update the stock availability of all\r\n          your components\r\n        </Typography>\r\n      </Paper>\r\n      <Container maxWidth=\"lg\">\r\n        <Grid container justify=\"center\" className={classes.table}>\r\n          <Grid item xs={12}>\r\n            <Table />\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MyInventory;","D:\\Nineleaps\\RedBank-Web\\src\\redux\\Reducers\\loggingInReducer.js",[],"D:\\Nineleaps\\RedBank-Web\\src\\redux\\Reducers\\registerIndividualReducer.js",[],"D:\\Nineleaps\\RedBank-Web\\src\\redux\\Reducers\\registerBloodBankReducer.js",[],"D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\mysales\\table.js",["324","325","326","327"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === \"desc\"\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"id\",\r\n    label: \"Sale ID\",\r\n  },\r\n  {\r\n    id: \"buyer\",\r\n    label: \"Buyer\",\r\n  },\r\n  {\r\n    id: \"email\",\r\n    label: \"Buyer Email\",\r\n  },\r\n  {\r\n    id: \"contact\",\r\n    label: \"Buyer Contact\",\r\n  },\r\n  {\r\n    id: \"bg\",\r\n    label: \"Purchased Blood Group\",\r\n  },\r\n  {\r\n    id: \"component\",\r\n    label: \"Purchased Component\",\r\n  },\r\n  {\r\n    id: \"units\",\r\n    label: \"Purchase Quantity\",\r\n  },\r\n  {\r\n    id: \"bill\",\r\n    label: \"Bill\",\r\n  },\r\n];\r\n\r\nconst useHeaderStyles = makeStyles((theme) => ({\r\n  head: {\r\n    fontSize: 18,\r\n    fontWeight: \"bold\",\r\n  },\r\n  body: {\r\n    fontSize: 16,\r\n  },\r\n}));\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const headerClasses = useHeaderStyles();\r\n  const { classes, order, orderBy, onRequestSort } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align=\"center\"\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n            className={headerClasses.head}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : \"asc\"}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  paper: {\r\n    width: \"100%\",\r\n    marginBottom: theme.spacing(2),\r\n    padding: theme.spacing(1),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: \"rect(0 0 0 0)\",\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: \"hidden\",\r\n    padding: 0,\r\n    position: \"absolute\",\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}));\r\n\r\nexport default function EnhancedTable({ list }) {\r\n  var List = [];\r\n  console.log(list);\r\n  list.map((item) => {\r\n    List.push(item);\r\n  });\r\n\r\n  console.log(List);\r\n\r\n  const classes = useStyles();\r\n  const [order, setOrder] = React.useState(\"asc\");\r\n  const [orderBy, setOrderBy] = React.useState(\"Id\");\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <TableContainer>\r\n          <Table\r\n            className={classes.table}\r\n            aria-labelledby=\"tableTitle\"\r\n            size=\"medium\"\r\n          >\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onRequestSort={handleRequestSort}\r\n            />\r\n            <TableBody>\r\n              {stableSort(List, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  return (\r\n                    <TableRow hover tabIndex={-1} key={index}>\r\n                      <TableCell align=\"center\">{row.saleId}</TableCell>\r\n                      <TableCell align=\"center\">{row.buyerName}</TableCell>\r\n                      <TableCell align=\"center\">{row.buyerEmail}</TableCell>\r\n                      <TableCell align=\"center\">{row.buyerContact}</TableCell>\r\n                      <TableCell align=\"center\">{row.purchasedGroup}</TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {row.purchasedComponent}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">{row.purchasedQty}</TableCell>\r\n                      <TableCell align=\"center\">{row.bill}</TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={List.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Nineleaps\\RedBank-Web\\src\\redux\\Reducers\\registerHospitalReducer.js",[],"D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\myInvites\\table.js",["328","329","330","331","332"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport axios from \"axios\";\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === \"desc\"\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"inviteType\",\r\n    label: \"Type\",\r\n  },\r\n  {\r\n    id: \"recipientName\",\r\n    label: \"Name\",\r\n  },\r\n  {\r\n    id: \"inviteDate\",\r\n    label: \"Date\",\r\n  },\r\n  {\r\n    id: \"inviteTime\",\r\n    label: \"Time\",\r\n  },\r\n  {\r\n    id: \"address\",\r\n    label: \"Address\",\r\n  },\r\n  {\r\n    id: \"recipientContact\",\r\n    label: \"Contact\",\r\n  },\r\n  {\r\n    id: \"accept\",\r\n    label: \"\",\r\n  },\r\n  {\r\n    id: \"ignore\",\r\n    label: \"\",\r\n  },\r\n];\r\n\r\nconst useHeaderStyles = makeStyles((theme) => ({\r\n  head: {\r\n    fontSize: 18,\r\n    fontWeight: \"bold\",\r\n  },\r\n  body: {\r\n    fontSize: 16,\r\n  },\r\n}));\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const headerClasses = useHeaderStyles();\r\n  const { classes, order, orderBy, onRequestSort } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align=\"center\"\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n            className={headerClasses.head}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : \"asc\"}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  paper: {\r\n    width: \"100%\",\r\n    marginBottom: theme.spacing(2),\r\n    padding: theme.spacing(1),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: \"rect(0 0 0 0)\",\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: \"hidden\",\r\n    padding: 0,\r\n    position: \"absolute\",\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}));\r\n\r\nexport default function EnhancedTable({ list }) {\r\n  var List = [];\r\n  list.map((item) => {\r\n    List.push(item);\r\n  });\r\n  console.log(list);\r\n\r\n  const acceptAxios = (e) => {\r\n    axios.put(\"http://localhost:5000/invites\", {}).then((response) => {\r\n      console.log(response);\r\n    });\r\n  };\r\n\r\n  list.map((item) => {\r\n    let obj = {};\r\n    if (item.driveId) {\r\n      obj = {\r\n        driveId: item.driveId,\r\n        status: item.status,\r\n      };\r\n    } else {\r\n      obj = {\r\n        donationId: item.donationId,\r\n        status: item.status,\r\n      };\r\n    }\r\n    axios.put(\"http://localhost:5000/invites\", { obj }).then((response) => {\r\n      console.log(response);\r\n    });\r\n  });\r\n\r\n  const classes = useStyles();\r\n  const [order, setOrder] = React.useState(\"asc\");\r\n  const [orderBy, setOrderBy] = React.useState(\"Id\");\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <TableContainer>\r\n          <Table\r\n            className={classes.table}\r\n            aria-labelledby=\"tableTitle\"\r\n            size=\"medium\"\r\n          >\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onRequestSort={handleRequestSort}\r\n            />\r\n            <TableBody>\r\n              {stableSort(List, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  return (\r\n                    <TableRow hover tabIndex={-1} key={row.Id}>\r\n                      <TableCell id={index} align=\"center\">\r\n                        {row.inviteType}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">{row.recipientName}</TableCell>\r\n                      <TableCell align=\"center\">{row.inviteDate}</TableCell>\r\n                      <TableCell align=\"center\">{row.inviteTime}</TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {row.address},{row.district},{row.state},{row.pincode}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {row.recipientContact}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">\r\n                        <Button\r\n                          type=\"button\"\r\n                          variant=\"contained\"\r\n                          onClick={acceptAxios}\r\n                        >\r\n                          Accept\r\n                        </Button>\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">\r\n                        <Button\r\n                          type=\"button\"\r\n                          variant=\"contained\"\r\n                          onClick={(event) => {\r\n                            acceptAxios(event, row.ID);\r\n                          }}\r\n                        >\r\n                          Ignore\r\n                        </Button>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={List.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\myDrives\\table.js",["333","334","335"],"D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\myInventory\\table.js",[],"D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\myPurchases\\table.js",["336","337","338","339","340","341"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\n\r\nfunction createData(name, date, bg, component, units, contact, amount) {\r\n  return { name, date, bg, component, units, contact, amount };\r\n}\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === \"desc\"\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"name\",\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: \"Name of Blood Bank\",\r\n  },\r\n  {\r\n    id: \"date\",\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: \"Date of purchase\",\r\n  },\r\n  {\r\n    id: \"bg\",\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: \"Blood Group purchased\",\r\n  },\r\n  {\r\n    id: \"component\",\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: \"Component purchased\",\r\n  },\r\n  {\r\n    id: \"units\",\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: \"Units purchased\",\r\n  },\r\n  { id: \"contact\", numeric: true, disablePadding: false, label: \"Contact\" },\r\n  {\r\n    id: \"amount\",\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: \"Amount Paid (Rs)\",\r\n  },\r\n];\r\n\r\nconst useHeaderStyles = makeStyles((theme) => ({\r\n  head: {\r\n    fontSize: 17,\r\n    fontWeight: \"bold\",\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}));\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const headerClasses = useHeaderStyles();\r\n  const { classes, order, orderBy, onRequestSort } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align=\"center\"\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n            className={headerClasses.head}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : \"asc\"}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  paper: {\r\n    width: \"100%\",\r\n    marginBottom: theme.spacing(2),\r\n    padding: theme.spacing(1),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: \"rect(0 0 0 0)\",\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: \"hidden\",\r\n    padding: 0,\r\n    position: \"absolute\",\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}));\r\n\r\nexport default function EnhancedTable({ list }) {\r\n  var List = [];\r\n  list.map((item) => {\r\n    List.push(item);\r\n  });\r\n\r\n  const classes = useStyles();\r\n  const [order, setOrder] = React.useState(\"asc\");\r\n  const [orderBy, setOrderBy] = React.useState(\"calories\");\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const emptyRows =\r\n    rowsPerPage - Math.min(rowsPerPage, List.length - page * rowsPerPage);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <TableContainer>\r\n          <Table\r\n            className={classes.table}\r\n            aria-labelledby=\"tableTitle\"\r\n            size=\"medium\"\r\n          >\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onRequestSort={handleRequestSort}\r\n            />\r\n            <TableBody>\r\n              {stableSort(List, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  return (\r\n                    <TableRow hover tabIndex={-1} key={row.name}>\r\n                      <TableCell id={index} align=\"center\">\r\n                        {row.name}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">{row.date}</TableCell>\r\n                      <TableCell align=\"center\">{row.bg}</TableCell>\r\n                      <TableCell align=\"center\">{row.component}</TableCell>\r\n                      <TableCell align=\"center\">{row.units}</TableCell>\r\n                      <TableCell align=\"center\">{row.contact}</TableCell>\r\n                      <TableCell align=\"center\">{row.amount}</TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={List.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\activeDonorReq\\useTable.js",[],"D:\\Nineleaps\\RedBank-Web\\src\\redux\\Actions\\login.js",[],"D:\\Nineleaps\\RedBank-Web\\src\\redux\\Actions\\registerBloodBank.js",[],"D:\\Nineleaps\\RedBank-Web\\src\\redux\\Actions\\registerIndividual.js",[],"D:\\Nineleaps\\RedBank-Web\\src\\redux\\Actions\\registerHospital.js",[],"D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\myCommitments\\table.js",["342","343","344","345"],"D:\\Nineleaps\\RedBank-Web\\src\\Components\\layouts\\loggedoutNavbar.js",["346","347","348"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Logo from \"./logo.svg\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  logo:{\r\n    height:40,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nfunction LoggedOutNavbar() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" style={{background: '#E94364'}}>\r\n      <Toolbar to=\"/\" component={Link} variant=\"dense\">\r\n        <img src={Logo} alt=\"logo\" className={classes.logo} />\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoggedOutNavbar;","D:\\Nineleaps\\RedBank-Web\\src\\Components\\layouts\\index.js",[],"D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\buyBlood\\useTable.js",["349","350","351","352","353","354","355","356","357","358","359","360"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport clsx from \"clsx\";\r\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n// import Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === \"desc\"\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"name\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Name\",\r\n  },\r\n  { id: \"contact\", numeric: true, disablePadding: false, label: \"Contact\" },\r\n  { id: \"address\", numeric: true, disablePadding: false, label: \"Address\" },\r\n  { id: \"price\", numeric: true, disablePadding: false, label: \"Price (Rs.)\" },\r\n  { id: \"actions\", label: \"Actions\", disableSorting: false },\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const { classes, order, orderBy, onRequestSort } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align=\"center\"\r\n            style={{ paddingLeft: \"20px\", fontWeight: \"bold\" }}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : \"asc\"}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === \"light\"\r\n      ? {\r\n          color: \"theme.palette.secondary.main\",\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: \"1 1 100%\",\r\n  },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n  const classes = useToolbarStyles();\r\n  const { numSelected, data } = props;\r\n\r\n  return (\r\n    <Toolbar\r\n      className={clsx(classes.root, {\r\n        [classes.highlight]: numSelected > 0,\r\n      })}\r\n    >\r\n      <Typography\r\n        className={classes.title}\r\n        variant=\"h6\"\r\n        id=\"tableTitle\"\r\n        component=\"div\"\r\n      >\r\n        List of all available Blood Banks\r\n      </Typography>\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  paper: {\r\n    width: \"100%\",\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: \"rect(0 0 0 0)\",\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: \"hidden\",\r\n    padding: 0,\r\n    position: \"absolute\",\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}));\r\n\r\nexport default function EnhancedTable({ list, bg, component, units }) {\r\n  var List = [];\r\n  list.map((item) => {\r\n    List.push(item);\r\n  });\r\n  console.log(List);\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const [order, setOrder] = React.useState(\"asc\");\r\n  const [orderBy, setOrderBy] = React.useState(\"contact\");\r\n  const [selected, setSelected] = React.useState([]);\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n  // const [ buybtn , setOpenPopup ] = useState(null);\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const [iota, setBuybtn] = React.useState({\r\n    bg: bg,\r\n    component: component,\r\n    units: units,\r\n    amount: \"220\",\r\n  });\r\n\r\n  const handleClick = (event, price) => {\r\n    event.preventDefault();\r\n    history.push({\r\n      pathname: \"/BuyBlood/Product\",\r\n      iota,\r\n      price,\r\n    });\r\n  };\r\n\r\n  const isSelected = (contact) => selected.indexOf(contact) !== -1;\r\n\r\n  const emptyRows =\r\n    rowsPerPage - Math.min(rowsPerPage, List.length - page * rowsPerPage);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <EnhancedTableToolbar />\r\n        <TableContainer>\r\n          <Table\r\n            className={classes.table}\r\n            aria-labelledby=\"tableTitle\"\r\n            size=\"medium\"\r\n            aria-label=\"enhanced table\"\r\n          >\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onRequestSort={handleRequestSort}\r\n            />\r\n            <TableBody>\r\n              {stableSort(List, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      role=\"checkbox\"\r\n                      tabIndex={-1}\r\n                      key={row.name}\r\n                    >\r\n                      <TableCell\r\n                        component=\"th\"\r\n                        id={labelId}\r\n                        scope=\"row\"\r\n                        align=\"center\"\r\n                      >\r\n                        {row.name}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">{row.contact}</TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {row.address}, {row.district}, {row.state},{\" \"}\r\n                        {row.pincode}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">{row.price}</TableCell>\r\n                      <TableCell align=\"center\">\r\n                        <Button\r\n                          onClick={(event) => {\r\n                            handleClick(event, row.price);\r\n                          }}\r\n                          type=\"button\"\r\n                          variant=\"contained\"\r\n                        >\r\n                          Buy\r\n                        </Button>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={List.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\findDonors\\useTable.js",["361","362","363","364","365","366","367","368","369","370"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport clsx from \"clsx\";\r\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === \"desc\"\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"name\",\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: \"Name\",\r\n  },\r\n  { id: \"contact\", numeric: true, disablePadding: false, label: \"Contact\" },\r\n  { id: \"addrr\", numeric: true, disablePadding: false, label: \"Address\" },\r\n  { id: \"email\", numeric: true, disablePadding: false, label: \"Email\" },\r\n  {\r\n    id: \"bg\",\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: \"Blood Group\",\r\n  },\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ \"aria-label\": \"select all desserts\" }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            style={{ fontWeight: \"bold\" }}\r\n            align=\"center\"\r\n            padding={headCell.disablePadding ? \"none\" : \"default\"}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : \"asc\"}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === \"light\"\r\n      ? {\r\n          color: \"theme.palette.secondary.main\",\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: \"1 1 100%\",\r\n  },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n  const classes = useToolbarStyles();\r\n  const { numSelected, data } = props;\r\n\r\n  function handleSend(e, data) {\r\n    console.log(data);\r\n  }\r\n\r\n  const handleClick = () => {\r\n    window.alert(\"Notification sent.\");\r\n  };\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClosed = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <Toolbar\r\n      className={clsx(classes.root, {\r\n        [classes.highlight]: numSelected > 0,\r\n      })}\r\n    >\r\n      {numSelected > 0 ? (\r\n        <Typography\r\n          className={classes.title}\r\n          color=\"inherit\"\r\n          variant=\"subtitle1\"\r\n          component=\"div\"\r\n        >\r\n          {numSelected} selected\r\n        </Typography>\r\n      ) : (\r\n        <Typography\r\n          className={classes.title}\r\n          variant=\"h6\"\r\n          id=\"tableTitle\"\r\n          component=\"div\"\r\n        >\r\n          List of all available Donors\r\n        </Typography>\r\n      )}\r\n\r\n      {numSelected > 0 ? (\r\n        <>\r\n        <Tooltip title=\"Send Notification\">\r\n          <Button variant=\"contained\" onClick={handleClickOpen}>\r\n            Send\r\n          </Button>\r\n              \r\n        </Tooltip>\r\n        <Dialog\r\n        open={open}\r\n        onClose={handleClosed}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n      <DialogTitle id=\"alert-dialog-title\">{\"Are You Sure?\"}</DialogTitle>\r\n      <DialogActions>\r\n        <Button onClick={handleClosed} color=\"primary\">\r\n            No\r\n        </Button>\r\n        <Button onClick={()=>{\r\n          window.alert(\"Notification Sent\")\r\n          handleClosed();\r\n        }} color=\"primary\" autoFocus>\r\n            Yes\r\n        </Button>\r\n      </DialogActions>\r\n      </Dialog>\r\n      </>\r\n      ) : null}\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n  numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  paper: {\r\n    width: \"100%\",\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: \"rect(0 0 0 0)\",\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: \"hidden\",\r\n    padding: 0,\r\n    position: \"absolute\",\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}));\r\n\r\nexport default function EnhancedTable({ list }) {\r\n  var List = [];\r\n  list.map((item) => {\r\n    List.push(item);\r\n  });\r\n\r\n\r\n  const classes = useStyles();\r\n  const [order, setOrder] = React.useState(\"asc\");\r\n  const [orderBy, setOrderBy] = React.useState(\"contact\");\r\n  const [selected, setSelected] = React.useState([]);\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = List.map((n) => n.contact);\r\n      setSelected(newSelecteds);\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const isSelected = (contact) => selected.indexOf(contact) !== -1;\r\n\r\n  const emptyRows =\r\n    rowsPerPage - Math.min(rowsPerPage, List.length - page * rowsPerPage);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <EnhancedTableToolbar numSelected={selected.length} data={selected} />\r\n        <TableContainer>\r\n          <Table\r\n            className={classes.table}\r\n            aria-labelledby=\"tableTitle\"\r\n            size=\"medium\"\r\n            aria-label=\"enhanced table\"\r\n          >\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onSelectAllClick={handleSelectAllClick}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={List.length}\r\n            />\r\n            <TableBody>\r\n              {stableSort(List, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  const isItemSelected = isSelected(row.contact);\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      onClick={(event) => handleClick(event, row.contact)}\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={row.name}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          checked={isItemSelected}\r\n                          inputProps={{ \"aria-labelledby\": labelId }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell\r\n                        component=\"th\"\r\n                        id={labelId}\r\n                        scope=\"row\"\r\n                        align=\"center\"\r\n                      >\r\n                        {row.name}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">{row.contact}</TableCell>\r\n                      <TableCell align=\"center\">{row.addrr}</TableCell>\r\n                      <TableCell align=\"center\">{row.email}</TableCell>\r\n                      <TableCell align=\"center\">{row.bg}</TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={List.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\upcomingDrive\\useTable.js",["371","372","373","374","375","376","377","378","379"],"import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport clsx from \"clsx\";\r\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === \"desc\"\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"name\",\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: \"Organization Name\",\r\n  },\r\n  { id: \"contact\", numeric: true, disablePadding: false, label: \"Contact\" },\r\n  { id: \"date\", numeric: true, disablePadding: false, label: \"Date\" },\r\n  { id: \"time\", numeric: true, disablePadding: false, label: \"Time\" },\r\n  { id: \"address\", numeric: true, disablePadding: false, label: \"Address\" },\r\n  { id: \"bg\", numeric: true, disablePadding: false, label: \"Blood Group\" },\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ \"aria-label\": \"select all desserts\" }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            style={{ fontWeight: \"bold\" }}\r\n            align=\"center\"\r\n            padding={headCell.disablePadding ? \"none\" : \"default\"}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : \"asc\"}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === \"light\"\r\n      ? {\r\n          color: \"theme.palette.secondary.main\",\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: \"1 1 100%\",\r\n  },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n  const classes = useToolbarStyles();\r\n  const { numSelected, data } = props;\r\n  const history = useHistory();\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClosed = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <Toolbar\r\n      className={clsx(classes.root, {\r\n        [classes.highlight]: numSelected > 0,\r\n      })}\r\n    >\r\n      {numSelected > 0 ? (\r\n        <Typography\r\n          className={classes.title}\r\n          color=\"inherit\"\r\n          variant=\"subtitle1\"\r\n          component=\"div\"\r\n        >\r\n          {numSelected} selected\r\n        </Typography>\r\n      ) : (\r\n        <Typography\r\n          className={classes.title}\r\n          variant=\"h6\"\r\n          id=\"tableTitle\"\r\n          component=\"div\"\r\n        >\r\n          List of all upcoming drives\r\n        </Typography>\r\n      )}\r\n\r\n      {numSelected > 0 ? (\r\n        <>\r\n          <Tooltip title=\"Apply for Donation\" onClick={handleClickOpen}>\r\n            <Button variant=\"contained\">Apply</Button>\r\n          </Tooltip>\r\n          <Dialog\r\n            open={open}\r\n            onClose={handleClosed}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n          >\r\n            <DialogTitle id=\"alert-dialog-title\">{\"Are You Sure?\"}</DialogTitle>\r\n            <DialogContent></DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={handleClosed} color=\"primary\">\r\n                No\r\n              </Button>\r\n              <Button\r\n                onClick={() => {\r\n                  window.alert(\r\n                    \"Applied! you can see this and other commitments in My Commitments\"\r\n                  );\r\n                  history.push(\"/home\");\r\n                  handleClosed();\r\n                }}\r\n                color=\"primary\"\r\n                autoFocus\r\n              >\r\n                Yes\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </>\r\n      ) : null}\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n  numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  paper: {\r\n    width: \"100%\",\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: \"rect(0 0 0 0)\",\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: \"hidden\",\r\n    padding: 0,\r\n    position: \"absolute\",\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}));\r\n\r\nexport default function EnhancedTable({ list }) {\r\n  // console.log(props.list)\r\n  // const [list, setState] =useState(props.list);\r\n  var List = [];\r\n  list.map((item) => {\r\n    List.push(item);\r\n  });\r\n  console.log(list);\r\n  const classes = useStyles();\r\n  const [order, setOrder] = React.useState(\"asc\");\r\n  const [orderBy, setOrderBy] = React.useState(\"contact\");\r\n  const [selected, setSelected] = React.useState([]);\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = List.map((n) => n.driveId);\r\n      setSelected(newSelecteds);\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const isSelected = (contact) => selected.indexOf(contact) !== -1;\r\n\r\n  const emptyRows =\r\n    rowsPerPage - Math.min(rowsPerPage, List.length - page * rowsPerPage);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <EnhancedTableToolbar numSelected={selected.length} data={selected} />\r\n        <TableContainer>\r\n          <Table\r\n            className={classes.table}\r\n            aria-labelledby=\"tableTitle\"\r\n            size=\"medium\"\r\n            aria-label=\"enhanced table\"\r\n          >\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onSelectAllClick={handleSelectAllClick}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={List.length}\r\n            />\r\n            <TableBody>\r\n              {stableSort(List, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  const isItemSelected = isSelected(row.driveId);\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      onClick={(event) => handleClick(event, row.driveId)}\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={row.driveId}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          checked={isItemSelected}\r\n                          inputProps={{ \"aria-labelledby\": labelId }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell\r\n                        align=\"center\"\r\n                        component=\"th\"\r\n                        id={labelId}\r\n                        scope=\"row\"\r\n                        padding=\"none\"\r\n                      >\r\n                        {row.orgName}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">{row.orgContact}</TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {row.startDate} -- {row.endDate}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {row.startTime} -- {row.endTime}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {row.address}, {row.district}, {row.state},{\" \"}\r\n                        {row.pincode}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {row.bloodGroupsInvited}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={List.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\profile\\profile.js",[],"D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\profile\\sideMenu.js",[],"D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\home\\services\\indiServices.js",["380"],"import React from \"react\";\r\nimport saleImg from \"./images/mySales.jpg\";\r\nimport buyImg from \"./images/cart2.jpg\";\r\nimport findDonorImg from \"./images/findDonor.jpg\";\r\nimport commitmentImg from \"./images/myCommitments.jpg\";\r\nimport invitesImg from \"./images/myInvites.jpg\";\r\nimport sentRequestImg from \"./images/sentRequests.jpg\";\r\nimport upcomingDriveImg from \"./images/upcomingDrives.jpg\";\r\n\r\nconst IndividualServices = [\r\n  {\r\n    image: buyImg,\r\n    name: \"Buy Blood\",\r\n    description:\r\n      \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n    page: \"BuyBlood\",\r\n  },\r\n  {\r\n    image: findDonorImg,\r\n    name: \"Find Donors\",\r\n    description:\r\n      \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n    page: \"FindDonors\",\r\n  },\r\n  {\r\n    image: commitmentImg,\r\n    name: \"My Commitments\",\r\n    description:\r\n      \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n    page: \"MyCommitments\",\r\n  },\r\n  {\r\n    image: saleImg,\r\n    name: \"My Purchases\",\r\n    description:\r\n      \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n    page: \"MyPurchases\",\r\n  },\r\n  {\r\n    image: sentRequestImg,\r\n    name: \"Sent Request\",\r\n    description:\r\n      \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n    page: \"ActiveDonorReq\",\r\n  },\r\n  {\r\n    image: upcomingDriveImg,\r\n    name: \"Upcoming Drives\",\r\n    description:\r\n      \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n    page: \"ActiveDonorReq\",\r\n  },\r\n  {\r\n    image: invitesImg,\r\n    name: \"My Invites\",\r\n    description:\r\n      \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n    page: \"MyInvites\",\r\n  },\r\n];\r\n\r\nexport default IndividualServices;\r\n","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\home\\services\\HospitalServices.js",["381","382"],"import saleImg from \"./images/mySales.jpg\"\r\nimport buyImg from \"./images/cart2.jpg\"\r\nimport findDonorImg from \"./images/findDonor.jpg\"\r\nimport commitmentImg from \"./images/myCommitments.jpg\"\r\nimport invitesImg from \"./images/myInvites.jpg\"\r\nimport sentRequestImg from \"./images/sentRequests.jpg\"\r\nimport upcomingDriveImg from \"./images/upcomingDrives.jpg\"\r\n\r\n\r\n\r\nconst HospitalServices = [\r\n    {\r\n      image: buyImg,\r\n      name: \"Buy Blood\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"BuyBlood\",\r\n    },\r\n    {\r\n      image: findDonorImg,\r\n      name: \"Find Donors\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"FindDonors\",\r\n    },\r\n    {\r\n      image: commitmentImg,\r\n      name: \"My Commitments\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"MyCommitments\",\r\n    },\r\n    {\r\n      image: saleImg,\r\n      name: \"My Purchases\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"MyPurchases\",\r\n    },\r\n    {\r\n      image: sentRequestImg,\r\n      name: \"Sent Request\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"ActiveDonorReq\",\r\n    },\r\n    \r\n    {\r\n      image: saleImg,\r\n      name: \"My Inventory\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"MyInventory\",\r\n    },\r\n    {\r\n      image: saleImg,\r\n      name: \"Conduct a Drive\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"ConductDrive\",\r\n    },\r\n    {\r\n      image: saleImg,\r\n      name: \"My Drives\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"MyDrives\",\r\n    },\r\n  ];\r\n  \r\n  \r\n \r\n  \r\nexport default HospitalServices;\r\n  ","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\home\\services\\BankServices.js",["383","384"],"import saleImg from \"./images/mySales.jpg\"\r\nimport buyImg from \"./images/cart2.jpg\"\r\nimport findDonorImg from \"./images/findDonor.jpg\"\r\nimport commitmentImg from \"./images/myCommitments.jpg\"\r\nimport invitesImg from \"./images/myInvites.jpg\"\r\nimport sentRequestImg from \"./images/sentRequests.jpg\"\r\nimport upcomingDriveImg from \"./images/upcomingDrives.jpg\"\r\n\r\nconst BankServices = [\r\n    {\r\n      image: buyImg,\r\n      name: \"Buy Blood\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"BuyBlood\",\r\n    },\r\n    {\r\n      image: findDonorImg,\r\n      name: \"Find Donors\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"FindDonors\",\r\n    },\r\n    {\r\n      image: commitmentImg,\r\n      name: \"My Commitments\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"MyCommitments\",\r\n    },\r\n    {\r\n      image: saleImg,\r\n      name: \"My Purchases\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"MyPurchases\",\r\n    },\r\n    {\r\n      image: sentRequestImg,\r\n      name: \"Sent Request\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"ActiveDonorReq\",\r\n    },\r\n    {\r\n      image: saleImg,\r\n      name: \"My Inventory\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"MyInventory\",\r\n    },\r\n    {\r\n      image: saleImg,\r\n      name: \"Conduct a Drive\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"ConductDrive\",\r\n    },\r\n    {\r\n      image: saleImg,\r\n      name: \"My Drives\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"MyDrives\",\r\n    },\r\n    {\r\n      image: saleImg,\r\n      name: \"My Sales\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"MySales\",\r\n    },\r\n  ];\r\n\r\n\r\n  const BloodBankServices = [\r\n    {\r\n      image: buyImg,\r\n      name: \"Buy Blood\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"BuyBlood\",\r\n    },\r\n    {\r\n      image: findDonorImg,\r\n      name: \"Find Donors\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"FindDonors\",\r\n    },\r\n    {\r\n      image: commitmentImg,\r\n      name: \"My Commitments\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"MyCommitments\",\r\n    },\r\n    {\r\n      image: saleImg,\r\n      name: \"My Purchases\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"MyPurchases\",\r\n    },\r\n    {\r\n      image: sentRequestImg,\r\n      name: \"Sent Request\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"ActiveDonorReq\",\r\n    },\r\n    {\r\n      image: upcomingDriveImg,\r\n      name: \"Upcoming Drives\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"ActiveDonorReq\",\r\n    },\r\n    {\r\n      image: saleImg,\r\n      name: \"My Inventory\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"MyInventory\",\r\n    },\r\n    {\r\n      image: saleImg,\r\n      name: \"Conduct a Drive\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"ConductDrive\",\r\n    },\r\n    {\r\n      image: saleImg,\r\n      name: \"My Drives\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"MyDrives\",\r\n    },\r\n    {\r\n      image: saleImg,\r\n      name: \"My Sales\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"MySales\",\r\n    },\r\n    {\r\n   \r\n   image: invitesImg,\r\n      name: \"My Invites\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"MyInvites\",\r\n    },\r\n  ];\r\n\r\n  const HospitalServices = [\r\n    {\r\n      image: buyImg,\r\n      name: \"Buy Blood\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"BuyBlood\",\r\n    },\r\n    {\r\n      image: findDonorImg,\r\n      name: \"Find Donors\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"FindDonors\",\r\n    },\r\n    {\r\n      image: commitmentImg,\r\n      name: \"My Commitments\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"MyCommitments\",\r\n    },\r\n    {\r\n      image: saleImg,\r\n      name: \"My Purchases\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"MyPurchases\",\r\n    },\r\n    {\r\n      image: sentRequestImg,\r\n      name: \"Sent Request\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"ActiveDonorReq\",\r\n    },\r\n    {\r\n      image: upcomingDriveImg,\r\n      name: \"Upcoming Drives\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"ActiveDonorReq\",\r\n    },\r\n    {\r\n      image: saleImg,\r\n      name: \"My Inventory\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"MyInventory\",\r\n    },\r\n    {\r\n      image: saleImg,\r\n      name: \"Conduct a Drive\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"ConductDrive\",\r\n    },\r\n    {\r\n      image: saleImg,\r\n      name: \"My Drives\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"MyDrives\",\r\n    },\r\n    {\r\n      image: saleImg,\r\n      name: \"My Sales\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"MySales\",\r\n    },\r\n    {\r\n   \r\n   image: invitesImg,\r\n      name: \"My Invites\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"MyInvites\",\r\n    },\r\n  ];\r\n\r\nexport default BankServices;","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\home\\serviceCard.js",["385","386","387","388"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Typography,\r\n  Box,\r\n  Container,\r\n  Grid,\r\n  Card,\r\n  CardMedia,\r\n  CardActionArea,\r\n  CardContent,\r\n  CardActions,\r\n  Button,\r\n  Divider,\r\n} from \"@material-ui/core/\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    maxWidth: 345,\r\n  },\r\n}));\r\n\r\nfunction ServiceCard({ img, name, descp, page }) {\r\n  const classes = useStyles();\r\n  console.log(img)\r\n  const history = useHistory();\r\n\r\n  const handleClick = () => {\r\n    history.push({\r\n      pathname: page,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card className={classes.root}>\r\n        <CardActionArea>\r\n          <CardMedia\r\n            component=\"img\"\r\n            image={img}\r\n            height=\"150\"\r\n          />\r\n          <CardContent>\r\n            <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n              {name}\r\n            </Typography>\r\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n              {descp}\r\n            </Typography>\r\n          </CardContent>\r\n        </CardActionArea>\r\n        <CardActions>\r\n          <Button size=\"small\" color=\"secondary\" onClick={handleClick}>\r\n            Click\r\n          </Button>\r\n        </CardActions>\r\n      </Card>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ServiceCard;\r\n","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\home\\bloodCompatibilityTable.js",[],"D:\\Nineleaps\\RedBank-Web\\src\\Components\\layouts\\footer.js",[],"D:\\Nineleaps\\RedBank-Web\\src\\Components\\layouts\\navbar.js",["389","390"],"import React, { Fragment } from \"react\";\r\nimport {\r\n  makeStyles,\r\n  AppBar,\r\n  Toolbar,\r\n  Typography,\r\n  IconButton,\r\n  MenuItem,\r\n  Menu,\r\n  Button,\r\n  Badge,\r\n  MenuIcon,\r\n} from \"@material-ui/core/\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\r\nimport PowerSettingsNewIcon from \"@material-ui/icons/PowerSettingsNew\";\r\nimport Logo from \"./logo.svg\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport logging from \"../../redux/Actions/login\";\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  logo: {\r\n    height: 40,\r\n  },\r\n}));\r\n\r\nexport default function MenuAppBar({ user }) {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n  const handleMenu = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n  const loggedInState = useSelector((state) => state.loggedIn);\r\n  console.log(loggedInState);\r\n\r\n  const handleLogout = () => {\r\n    dispatch(logging({ isLoggedIn: false, userType: 0 }));\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClosed = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  console.log(loggedInState);\r\n\r\n  return (\r\n    <Fragment className={classes.root}>\r\n      <AppBar position=\"static\" style={{ background: \"#E94364\" }}>\r\n        <Toolbar>\r\n          {/* <Avatar alt=\"Remy Sharp\" src=\"./redbanklogo.svg\" /> */}\r\n          <Typography\r\n            to=\"/Home\"\r\n            component={Link}\r\n            variant=\"h6\"\r\n            className={classes.title}\r\n          >\r\n            <img src={Logo} alt=\"logo\" className={classes.logo} />\r\n          </Typography>\r\n          <div className={classes.sectionDesktop}>\r\n            <IconButton aria-label=\"show 17 new notifications\" color=\"inherit\">\r\n              <Badge badgeContent={17} color=\"secondary\">\r\n                <NotificationsIcon />\r\n              </Badge>\r\n            </IconButton>\r\n            <Button\r\n              color=\"inherit\"\r\n              component={Link}\r\n              to=\"/About\"\r\n              variant=\"h7\"\r\n            >\r\n              About{\" \"}\r\n            </Button>\r\n            <Button\r\n              onClick={handleMenu}\r\n              color=\"inherit\"\r\n              // style={{ padding: 5 }}\r\n              variant=\"h7\"\r\n            >\r\n              {\" \"}\r\n              Services{\" \"}\r\n            </Button>\r\n\r\n            <Menu\r\n              id=\"simple-menu\"\r\n              anchorEl={anchorEl}\r\n              keepMounted\r\n              open={Boolean(anchorEl)}\r\n              onClose={handleClose}\r\n            >\r\n              {loggedInState.userType === 0 ? (\r\n                <>\r\n                  <MenuItem onClick={handleClose}>\r\n                    <Link to=\"/BuyBlood\">Buy Blood</Link>\r\n                  </MenuItem>\r\n                  <MenuItem onClick={handleClose}>\r\n                    <Link to=\"/FindDonors\">Find Donors</Link>\r\n                  </MenuItem>\r\n                  <MenuItem onClick={handleClose}>\r\n                    <Link to=\"/MyCommitments\">My Commitments</Link>\r\n                  </MenuItem>\r\n                  <MenuItem onClick={handleClose}>\r\n                    <Link to=\"/MyPurchases\">My Purchases</Link>\r\n                  </MenuItem>\r\n                  <MenuItem onClick={handleClose}>\r\n                    <Link to=\"/ActiveDonorReq\">Active Donor Request</Link>\r\n                  </MenuItem>\r\n                  <MenuItem onClick={handleClose}>\r\n                    <Link to=\"/UpcomingDrive\">Upcoming Drives</Link>\r\n                  </MenuItem>\r\n                  <MenuItem onClick={handleClose}>\r\n                    <Link to=\"/MyInvites\">My Invites</Link>\r\n                  </MenuItem>\r\n                </>\r\n              ) : (\r\n                <>\r\n                {loggedInState.userType === 1 ?(\r\n                  <>\r\n                    <MenuItem onClick={handleClose}>\r\n                    <Link to=\"/BuyBlood\">Buy Blood</Link>\r\n                  </MenuItem>\r\n                  <MenuItem onClick={handleClose}>\r\n                    <Link to=\"/FindDonors\">Find Donors</Link>\r\n                  </MenuItem>\r\n                  <MenuItem onClick={handleClose}>\r\n                    <Link to=\"/MyCommitments\">My Commitments</Link>\r\n                  </MenuItem>\r\n                  <MenuItem onClick={handleClose}>\r\n                    <Link to=\"/MyPurchases\">My Purchases</Link>\r\n                  </MenuItem>\r\n                  <MenuItem onClick={handleClose}>\r\n                    <Link to=\"/ActiveDonorReq\">Active Donor Request</Link>\r\n                  </MenuItem>\r\n                  <MenuItem onClick={handleClose}>\r\n                    <Link to=\"/ConductDrive\">Conduct Drive</Link>\r\n                  </MenuItem>\r\n                  <MenuItem onClick={handleClose}>\r\n                    <Link to=\"/MyDrives\">My Drives</Link>\r\n                  </MenuItem>\r\n                  <MenuItem onClick={handleClose}>\r\n                    <Link to=\"/MyInventory\">My Inventory</Link>\r\n                  </MenuItem>\r\n                  <MenuItem onClick={handleClose}>\r\n                    <Link to=\"/MySales\">My Sales</Link>\r\n                  </MenuItem>\r\n                  </>\r\n                ):(\r\n                  <>\r\n                  <MenuItem onClick={handleClose}>\r\n                    <Link to=\"/BuyBlood\">Buy Blood</Link>\r\n                  </MenuItem>\r\n                  <MenuItem onClick={handleClose}>\r\n                    <Link to=\"/FindDonors\">Find Donors</Link>\r\n                  </MenuItem>\r\n                  <MenuItem onClick={handleClose}>\r\n                    <Link to=\"/MyCommitments\">My Commitments</Link>\r\n                  </MenuItem>\r\n                  <MenuItem onClick={handleClose}>\r\n                    <Link to=\"/MyPurchases\">My Purchases</Link>\r\n                  </MenuItem>\r\n                  <MenuItem onClick={handleClose}>\r\n                    <Link to=\"/ActiveDonorReq\">Active Donor Request</Link>\r\n                  </MenuItem>\r\n                  <MenuItem onClick={handleClose}>\r\n                    <Link to=\"/ConductDrive\">Conduct Drive</Link>\r\n                  </MenuItem>\r\n                  <MenuItem onClick={handleClose}>\r\n                    <Link to=\"/MyDrives\">My Drives</Link>\r\n                  </MenuItem>\r\n                  <MenuItem onClick={handleClose}>\r\n                    <Link to=\"/MyInventory\">My Inventory</Link>\r\n                  </MenuItem>\r\n                  </>\r\n                )}\r\n                </>\r\n              )}\r\n            </Menu>\r\n            <Button\r\n              color=\"inherit\"\r\n              component={Link}\r\n              to=\"/profile\"\r\n              // style={{ padding: 5 }}\r\n              variant=\"h7\"\r\n            >\r\n              Profile{\" \"}\r\n            </Button>\r\n            <IconButton color =\"inherit\" onClick={handleClickOpen}>\r\n                  <PowerSettingsNewIcon/>\r\n            </IconButton>\r\n            <Dialog\r\n              open={open}\r\n              onClose={handleClose}\r\n              aria-labelledby=\"alert-dialog-title\"\r\n              aria-describedby=\"alert-dialog-description\"\r\n            >\r\n            <DialogTitle id=\"alert-dialog-title\">{\"Are You Sure, you want to logout?\"}</DialogTitle>\r\n              <DialogContent>\r\n              </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={handleClosed} color=\"primary\">\r\n                  No\r\n              </Button>\r\n              <Button onClick={handleLogout} color=\"primary\" autoFocus>\r\n                  Yes\r\n              </Button>\r\n            </DialogActions>\r\n            </Dialog>    \r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </Fragment>\r\n  );\r\n}\r\n","D:\\Nineleaps\\RedBank-Web\\src\\redux\\Types\\registration.js",[],"D:\\Nineleaps\\RedBank-Web\\src\\redux\\Types\\login.js",[],"D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\profile\\profileForm.js",["391"],"import React, { useState } from \"react\";\r\nimport {\r\n  Grid,\r\n  TextField,\r\n  makeStyles,\r\n  Button,\r\n  ButtonGroup,\r\n} from \"@material-ui/core\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& .MuiFormControl-root\": {\r\n      width: \"80%\",\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  div1: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nconst initialValues = {\r\n  name: \"Aditya Tomar\",\r\n  email: \"adityatomar765@gmail.com\",\r\n  phone: \"812736191\",\r\n  bg: \"B+\",\r\n  dob: \"06-09-1998\",\r\n  address: \"79/3-A, address line 1\",\r\n  state: \"Uttarakhand\",\r\n  district: \"Dehradun\",\r\n  pincode: \"248001\",\r\n  password: \"aditya\",\r\n};\r\n\r\nfunction ProfileForm() {\r\n  const classes = useStyles();\r\n  const [values, setValues] = useState(initialValues);\r\n  const [enableReadOnly, setEdit] = useState(true);\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const [inputPassword, setPassword] = React.useState(\"\");\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setValues({\r\n      ...values,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const handleEdit = () => {\r\n    window.alert(\"You can start editing !\");\r\n    setEdit(false);\r\n  };\r\n\r\n  const handleSave = () => {\r\n    window.alert(\"Changes have been saved !\");\r\n    setEdit(true);\r\n    console.log(values);\r\n  };\r\n\r\n  const handlePasswordChange = () => {\r\n    var currPassword = window.prompt(\"Please enter current Password :\");\r\n\r\n    if (currPassword === values.password) {\r\n      handleClickOpen();\r\n    } else {\r\n      window.alert(\"wrong password\");\r\n    }\r\n  };\r\n\r\n  const handleInputPassword = (e) => {\r\n    setPassword(e.taget.value);\r\n  };\r\n  return (\r\n    <>\r\n      <form className={classes.root}>\r\n        <Grid container>\r\n          <Grid item xs={6}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              label=\"Full name\"\r\n              name=\"name\"\r\n              value={values.name}\r\n              onChange={handleChange}\r\n              InputProps={{\r\n                readOnly: true,\r\n              }}\r\n            />\r\n            \r\n            <TextField\r\n              variant=\"outlined\"\r\n              label=\"Email\"\r\n              name=\"email\"\r\n              value={values.email}\r\n              onChange={handleChange}\r\n              InputProps={{\r\n                readOnly: true,\r\n              }}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              label=\"Address\"\r\n              name=\"address\"\r\n              value={values.address}\r\n              onChange={handleChange}\r\n              InputProps={{\r\n                readOnly: enableReadOnly,\r\n              }}\r\n            />\r\n             \r\n            <TextField\r\n              variant=\"outlined\"\r\n              label=\"State\"\r\n              name=\"state\"\r\n              value={values.state}\r\n              onChange={handleChange}\r\n              InputProps={{\r\n                readOnly: enableReadOnly,\r\n              }}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              label=\"Password\"\r\n              name=\"password\"\r\n              value={values.password}\r\n              onChange={handleChange}\r\n              type=\"password\"\r\n              InputProps={{\r\n                readOnly: true,\r\n              }}\r\n            />\r\n            <div className={classes.div1}>\r\n              <Button onClick={handlePasswordChange}>\r\n                change your password ?\r\n              </Button>\r\n            </div>\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              label=\"Phone number\"\r\n              name=\"phone\"\r\n              value={values.phone}\r\n              onChange={handleChange}\r\n              type=\"number\"\r\n              InputProps={{\r\n                readOnly: enableReadOnly,\r\n              }}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              label=\"Blood Group\"\r\n              name=\"Blood Group\"\r\n              value={values.bg}\r\n              onChange={handleChange}\r\n              InputProps={{\r\n                readOnly: true,\r\n              }}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              label=\"District\"\r\n              name=\"district\"\r\n              value={values.district}\r\n              onChange={handleChange}\r\n              InputProps={{\r\n                readOnly: enableReadOnly,\r\n              }}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              label=\"Pincode\"\r\n              name=\"pincode\"\r\n              value={values.pincode}\r\n              onChange={handleChange}\r\n              type=\"number\"\r\n              InputProps={{\r\n                readOnly: enableReadOnly,\r\n              }}\r\n            />\r\n            <div className={classes.div1}>\r\n              <ButtonGroup\r\n                variant=\"contained\"\r\n                aria-label=\"contained primary button group\"\r\n              >\r\n                <Button color=\"secondary\" onClick={handleEdit}>\r\n                  Edit\r\n                </Button>\r\n                <Button onClick={handleSave}>Save</Button>\r\n              </ButtonGroup>\r\n            </div>\r\n\r\n            <Dialog\r\n              open={open}\r\n              onClose={handleClose}\r\n              aria-labelledby=\"alert-dialog-title\"\r\n              aria-describedby=\"alert-dialog-description\"\r\n            >\r\n              <DialogTitle id=\"alert-dialog-title\">\r\n                {\"Reset Password\"}\r\n              </DialogTitle>\r\n              <DialogContent>\r\n                <TextField\r\n                  label=\"enter new password\"\r\n                  value={inputPassword}\r\n                  onchange={handleInputPassword}\r\n                />\r\n              </DialogContent>\r\n              <DialogActions>\r\n                <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n                  Change\r\n                </Button>\r\n              </DialogActions>\r\n            </Dialog>\r\n          </Grid>\r\n        </Grid>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\nexport default ProfileForm;\r\n","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\profile\\orgForm.js",["392"],"import React, { useState } from \"react\";\r\nimport {\r\n  Grid,\r\n  TextField,\r\n  makeStyles,\r\n  Button,\r\n  ButtonGroup,\r\n} from \"@material-ui/core\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& .MuiFormControl-root\": {\r\n      width: \"80%\",\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  div1: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nconst initialValues = {\r\n  name: \"Aditya Tomar\",\r\n  email: \"adityatomar765@gmail.com\",\r\n  phone: \"812736191\",\r\n  license: \"ABV1234\",\r\n  address: \"79/3-A, address line 1\",\r\n  state: \"Uttarakhand\",\r\n  district: \"Dehradun\",\r\n  pincode: \"248001\",\r\n  password: \"aditya\",\r\n};\r\n\r\nfunction OrgForm() {\r\n  const classes = useStyles();\r\n  const [values, setValues] = useState(initialValues);\r\n  const [enableReadOnly, setEdit] = useState(true);\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const [inputPassword, setPassword] = React.useState(\"\");\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setValues({\r\n      ...values,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const handleEdit = () => {\r\n    window.alert(\"You can start editing !\");\r\n    setEdit(false);\r\n  };\r\n\r\n  const handleSave = () => {\r\n    window.alert(\"Changes have been saved !\");\r\n    setEdit(true);\r\n    console.log(values);\r\n  };\r\n\r\n  const handlePasswordChange = () => {\r\n    var currPassword = window.prompt(\"Please enter current Password :\");\r\n\r\n    if (currPassword === values.password) {\r\n      handleClickOpen();\r\n    } else {\r\n      window.alert(\"wrong password\");\r\n    }\r\n  };\r\n\r\n  const handleInputPassword = (e) => {\r\n    setPassword(e.taget.value);\r\n  };\r\n  return (\r\n    <>\r\n      <form className={classes.root}>\r\n        <Grid container>\r\n          <Grid item xs={6}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              label=\"Full name\"\r\n              name=\"name\"\r\n              value={values.name}\r\n              onChange={handleChange}\r\n              InputProps={{\r\n                readOnly: true,\r\n              }}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              label=\"Email\"\r\n              name=\"email\"\r\n              value={values.email}\r\n              onChange={handleChange}\r\n              InputProps={{\r\n                readOnly: true,\r\n              }}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              label=\"Address\"\r\n              name=\"address\"\r\n              value={values.address}\r\n              onChange={handleChange}\r\n              InputProps={{\r\n                readOnly: enableReadOnly,\r\n              }}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              label=\"State\"\r\n              name=\"state\"\r\n              value={values.state}\r\n              onChange={handleChange}\r\n              InputProps={{\r\n                readOnly: enableReadOnly,\r\n              }}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              label=\"Password\"\r\n              name=\"password\"\r\n              value={values.password}\r\n              onChange={handleChange}\r\n              type=\"password\"\r\n              InputProps={{\r\n                readOnly: true,\r\n              }}\r\n            />\r\n            <div className={classes.div1}>\r\n              <Button onClick={handlePasswordChange}>\r\n                change your password ?\r\n              </Button>\r\n            </div>\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              label=\"Phone number\"\r\n              name=\"phone\"\r\n              value={values.phone}\r\n              onChange={handleChange}\r\n              type=\"number\"\r\n              InputProps={{\r\n                readOnly: enableReadOnly,\r\n              }}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              label=\"License\"\r\n              name=\"license\"\r\n              value={values.license}\r\n              onChange={handleChange}\r\n              InputProps={{\r\n                readOnly: true,\r\n              }}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              label=\"District\"\r\n              name=\"district\"\r\n              value={values.district}\r\n              onChange={handleChange}\r\n              InputProps={{\r\n                readOnly: enableReadOnly,\r\n              }}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              label=\"Pincode\"\r\n              name=\"pincode\"\r\n              value={values.pincode}\r\n              onChange={handleChange}\r\n              type=\"number\"\r\n              InputProps={{\r\n                readOnly: enableReadOnly,\r\n              }}\r\n            />\r\n            <div className={classes.div1}>\r\n              <ButtonGroup\r\n                variant=\"contained\"\r\n                aria-label=\"contained primary button group\"\r\n              >\r\n                <Button color=\"secondary\" onClick={handleEdit}>\r\n                  Edit\r\n                </Button>\r\n                <Button onClick={handleSave}>Save</Button>\r\n              </ButtonGroup>\r\n            </div>\r\n\r\n            <Dialog\r\n              open={open}\r\n              onClose={handleClose}\r\n              aria-labelledby=\"alert-dialog-title\"\r\n              aria-describedby=\"alert-dialog-description\"\r\n            >\r\n              <DialogTitle id=\"alert-dialog-title\">\r\n                {\"Reset Password\"}\r\n              </DialogTitle>\r\n              <DialogContent>\r\n                <TextField\r\n                  label=\"enter new password\"\r\n                  value={inputPassword}\r\n                  onchange={handleInputPassword}\r\n                />\r\n              </DialogContent>\r\n              <DialogActions>\r\n                <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n                  Change\r\n                </Button>\r\n              </DialogActions>\r\n            </Dialog>\r\n          </Grid>\r\n        </Grid>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\nexport default OrgForm;\r\n","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\profile\\pageHeader.js",["393"],"import {\r\n  Card,\r\n  makeStyles,\r\n  Paper,\r\n  Typography,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: \"#CCCCCC\",\r\n  },\r\n  PageHeader: {\r\n    diplay: \"flex\",\r\n    padding: theme.spacing(6),\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n\r\n  PageTitle: {\r\n    paddingLeft: theme.spacing(4),\r\n    \"& .MuiTypography-h6\": {\r\n      opacity: \"0.6\",\r\n    },\r\n  },\r\n}));\r\n\r\nfunction PageHeader(props) {\r\n  const classes = useStyles();\r\n  const { title, subtitle } = props;\r\n  return (\r\n    <Paper elevation={5} square className={classes.root}>\r\n      <div className={classes.PageHeader}>\r\n        <div className={classes.PageTitle}>\r\n          <Typography variant=\"h3\" component=\"div\">\r\n            {title}\r\n          </Typography>\r\n          <Divider />\r\n          <Typography variant=\"h6\" component=\"div\">\r\n            {subtitle}\r\n          </Typography>\r\n        </div>\r\n      </div>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nexport default PageHeader;\r\n","D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\home\\BarChart.js",[],"D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\home\\barChart.js",[],"D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\services\\myDrives\\acceptedDonors.js",["394","395","396","397"],"D:\\Nineleaps\\RedBank-Web\\src\\Components\\screen\\home\\pieChart.js",[],{"ruleId":"398","replacedBy":"399"},{"ruleId":"400","replacedBy":"401"},{"ruleId":"402","severity":1,"message":"403","line":10,"column":10,"nodeType":"404","messageId":"405","endLine":10,"endColumn":21},{"ruleId":"406","severity":1,"message":"407","line":50,"column":6,"nodeType":"408","endLine":50,"endColumn":21,"suggestions":"409"},{"ruleId":"402","severity":1,"message":"410","line":1,"column":17,"nodeType":"404","messageId":"405","endLine":1,"endColumn":25},{"ruleId":"402","severity":1,"message":"411","line":21,"column":8,"nodeType":"404","messageId":"405","endLine":21,"endColumn":26},{"ruleId":"402","severity":1,"message":"412","line":43,"column":9,"nodeType":"404","messageId":"405","endLine":43,"endColumn":14},{"ruleId":"402","severity":1,"message":"413","line":24,"column":8,"nodeType":"404","messageId":"405","endLine":24,"endColumn":24},{"ruleId":"402","severity":1,"message":"414","line":43,"column":10,"nodeType":"404","messageId":"405","endLine":43,"endColumn":20},{"ruleId":"402","severity":1,"message":"415","line":43,"column":22,"nodeType":"404","messageId":"405","endLine":43,"endColumn":35},{"ruleId":"402","severity":1,"message":"412","line":45,"column":9,"nodeType":"404","messageId":"405","endLine":45,"endColumn":14},{"ruleId":"402","severity":1,"message":"416","line":23,"column":8,"nodeType":"404","messageId":"405","endLine":23,"endColumn":25},{"ruleId":"402","severity":1,"message":"412","line":42,"column":9,"nodeType":"404","messageId":"405","endLine":42,"endColumn":14},{"ruleId":"402","severity":1,"message":"417","line":2,"column":10,"nodeType":"404","messageId":"405","endLine":2,"endColumn":14},{"ruleId":"402","severity":1,"message":"418","line":6,"column":8,"nodeType":"404","messageId":"405","endLine":6,"endColumn":11},{"ruleId":"402","severity":1,"message":"417","line":2,"column":10,"nodeType":"404","messageId":"405","endLine":2,"endColumn":14},{"ruleId":"402","severity":1,"message":"419","line":13,"column":10,"nodeType":"404","messageId":"405","endLine":13,"endColumn":21},{"ruleId":"402","severity":1,"message":"420","line":14,"column":8,"nodeType":"404","messageId":"405","endLine":14,"endColumn":15},{"ruleId":"402","severity":1,"message":"421","line":8,"column":8,"nodeType":"404","messageId":"405","endLine":8,"endColumn":13},{"ruleId":"402","severity":1,"message":"422","line":11,"column":9,"nodeType":"404","messageId":"405","endLine":11,"endColumn":16},{"ruleId":"402","severity":1,"message":"423","line":9,"column":3,"nodeType":"404","messageId":"405","endLine":9,"endColumn":12},{"ruleId":"424","severity":1,"message":"425","line":140,"column":19,"nodeType":"426","endLine":140,"endColumn":80},{"ruleId":"402","severity":1,"message":"427","line":15,"column":8,"nodeType":"404","messageId":"405","endLine":15,"endColumn":25},{"ruleId":"402","severity":1,"message":"428","line":38,"column":7,"nodeType":"404","messageId":"405","endLine":38,"endColumn":18},{"ruleId":"402","severity":1,"message":"429","line":46,"column":33,"nodeType":"404","messageId":"405","endLine":46,"endColumn":39},{"ruleId":"402","severity":1,"message":"410","line":1,"column":17,"nodeType":"404","messageId":"405","endLine":1,"endColumn":25},{"ruleId":"402","severity":1,"message":"430","line":1,"column":27,"nodeType":"404","messageId":"405","endLine":1,"endColumn":36},{"ruleId":"402","severity":1,"message":"421","line":10,"column":8,"nodeType":"404","messageId":"405","endLine":10,"endColumn":13},{"ruleId":"402","severity":1,"message":"427","line":22,"column":8,"nodeType":"404","messageId":"405","endLine":22,"endColumn":25},{"ruleId":"402","severity":1,"message":"410","line":1,"column":17,"nodeType":"404","messageId":"405","endLine":1,"endColumn":25},{"ruleId":"402","severity":1,"message":"431","line":4,"column":10,"nodeType":"404","messageId":"405","endLine":4,"endColumn":17},{"ruleId":"402","severity":1,"message":"432","line":14,"column":8,"nodeType":"404","messageId":"405","endLine":14,"endColumn":24},{"ruleId":"402","severity":1,"message":"433","line":15,"column":8,"nodeType":"404","messageId":"405","endLine":15,"endColumn":14},{"ruleId":"434","severity":1,"message":"435","line":162,"column":19,"nodeType":"436","messageId":"437","endLine":162,"endColumn":21},{"ruleId":"402","severity":1,"message":"431","line":4,"column":10,"nodeType":"404","messageId":"405","endLine":4,"endColumn":17},{"ruleId":"402","severity":1,"message":"432","line":14,"column":8,"nodeType":"404","messageId":"405","endLine":14,"endColumn":24},{"ruleId":"402","severity":1,"message":"433","line":15,"column":8,"nodeType":"404","messageId":"405","endLine":15,"endColumn":14},{"ruleId":"434","severity":1,"message":"435","line":163,"column":19,"nodeType":"436","messageId":"437","endLine":163,"endColumn":21},{"ruleId":"434","severity":1,"message":"435","line":174,"column":19,"nodeType":"436","messageId":"437","endLine":174,"endColumn":21},{"ruleId":"402","severity":1,"message":"438","line":3,"column":8,"nodeType":"404","messageId":"405","endLine":3,"endColumn":11},{"ruleId":"402","severity":1,"message":"439","line":4,"column":8,"nodeType":"404","messageId":"405","endLine":4,"endColumn":16},{"ruleId":"406","severity":1,"message":"440","line":92,"column":6,"nodeType":"408","endLine":92,"endColumn":22,"suggestions":"441"},{"ruleId":"402","severity":1,"message":"431","line":4,"column":10,"nodeType":"404","messageId":"405","endLine":4,"endColumn":17},{"ruleId":"402","severity":1,"message":"432","line":14,"column":8,"nodeType":"404","messageId":"405","endLine":14,"endColumn":24},{"ruleId":"402","severity":1,"message":"433","line":15,"column":8,"nodeType":"404","messageId":"405","endLine":15,"endColumn":14},{"ruleId":"402","severity":1,"message":"442","line":17,"column":10,"nodeType":"404","messageId":"405","endLine":17,"endColumn":20},{"ruleId":"434","severity":1,"message":"435","line":170,"column":19,"nodeType":"436","messageId":"437","endLine":170,"endColumn":21},{"ruleId":"402","severity":1,"message":"443","line":195,"column":9,"nodeType":"404","messageId":"405","endLine":195,"endColumn":18},{"ruleId":"402","severity":1,"message":"431","line":4,"column":10,"nodeType":"404","messageId":"405","endLine":4,"endColumn":17},{"ruleId":"402","severity":1,"message":"432","line":14,"column":8,"nodeType":"404","messageId":"405","endLine":14,"endColumn":24},{"ruleId":"402","severity":1,"message":"433","line":15,"column":8,"nodeType":"404","messageId":"405","endLine":15,"endColumn":14},{"ruleId":"434","severity":1,"message":"435","line":161,"column":19,"nodeType":"436","messageId":"437","endLine":161,"endColumn":21},{"ruleId":"402","severity":1,"message":"444","line":5,"column":8,"nodeType":"404","messageId":"405","endLine":5,"endColumn":18},{"ruleId":"402","severity":1,"message":"445","line":6,"column":8,"nodeType":"404","messageId":"405","endLine":6,"endColumn":18},{"ruleId":"402","severity":1,"message":"446","line":7,"column":8,"nodeType":"404","messageId":"405","endLine":7,"endColumn":16},{"ruleId":"402","severity":1,"message":"445","line":17,"column":8,"nodeType":"404","messageId":"405","endLine":17,"endColumn":18},{"ruleId":"402","severity":1,"message":"447","line":18,"column":8,"nodeType":"404","messageId":"405","endLine":18,"endColumn":15},{"ruleId":"402","severity":1,"message":"432","line":19,"column":8,"nodeType":"404","messageId":"405","endLine":19,"endColumn":24},{"ruleId":"402","severity":1,"message":"433","line":20,"column":8,"nodeType":"404","messageId":"405","endLine":20,"endColumn":14},{"ruleId":"402","severity":1,"message":"417","line":22,"column":10,"nodeType":"404","messageId":"405","endLine":22,"endColumn":14},{"ruleId":"402","severity":1,"message":"448","line":24,"column":8,"nodeType":"404","messageId":"405","endLine":24,"endColumn":16},{"ruleId":"402","severity":1,"message":"449","line":132,"column":24,"nodeType":"404","messageId":"405","endLine":132,"endColumn":28},{"ruleId":"434","severity":1,"message":"435","line":178,"column":19,"nodeType":"436","messageId":"437","endLine":178,"endColumn":21},{"ruleId":"402","severity":1,"message":"450","line":186,"column":20,"nodeType":"404","messageId":"405","endLine":186,"endColumn":31},{"ruleId":"402","severity":1,"message":"451","line":206,"column":16,"nodeType":"404","messageId":"405","endLine":206,"endColumn":25},{"ruleId":"402","severity":1,"message":"452","line":222,"column":9,"nodeType":"404","messageId":"405","endLine":222,"endColumn":19},{"ruleId":"402","severity":1,"message":"443","line":224,"column":9,"nodeType":"404","messageId":"405","endLine":224,"endColumn":18},{"ruleId":"402","severity":1,"message":"445","line":17,"column":8,"nodeType":"404","messageId":"405","endLine":17,"endColumn":18},{"ruleId":"402","severity":1,"message":"432","line":19,"column":8,"nodeType":"404","messageId":"405","endLine":19,"endColumn":24},{"ruleId":"402","severity":1,"message":"433","line":20,"column":8,"nodeType":"404","messageId":"405","endLine":20,"endColumn":14},{"ruleId":"402","severity":1,"message":"453","line":24,"column":8,"nodeType":"404","messageId":"405","endLine":24,"endColumn":21},{"ruleId":"402","severity":1,"message":"427","line":25,"column":8,"nodeType":"404","messageId":"405","endLine":25,"endColumn":25},{"ruleId":"402","severity":1,"message":"449","line":156,"column":24,"nodeType":"404","messageId":"405","endLine":156,"endColumn":28},{"ruleId":"402","severity":1,"message":"454","line":158,"column":12,"nodeType":"404","messageId":"405","endLine":158,"endColumn":22},{"ruleId":"402","severity":1,"message":"428","line":162,"column":9,"nodeType":"404","messageId":"405","endLine":162,"endColumn":20},{"ruleId":"434","severity":1,"message":"435","line":265,"column":19,"nodeType":"436","messageId":"437","endLine":265,"endColumn":21},{"ruleId":"402","severity":1,"message":"443","line":323,"column":9,"nodeType":"404","messageId":"405","endLine":323,"endColumn":18},{"ruleId":"402","severity":1,"message":"410","line":1,"column":17,"nodeType":"404","messageId":"405","endLine":1,"endColumn":25},{"ruleId":"402","severity":1,"message":"445","line":17,"column":8,"nodeType":"404","messageId":"405","endLine":17,"endColumn":18},{"ruleId":"402","severity":1,"message":"432","line":19,"column":8,"nodeType":"404","messageId":"405","endLine":19,"endColumn":24},{"ruleId":"402","severity":1,"message":"433","line":20,"column":8,"nodeType":"404","messageId":"405","endLine":20,"endColumn":14},{"ruleId":"402","severity":1,"message":"448","line":21,"column":8,"nodeType":"404","messageId":"405","endLine":21,"endColumn":16},{"ruleId":"402","severity":1,"message":"427","line":26,"column":8,"nodeType":"404","messageId":"405","endLine":26,"endColumn":25},{"ruleId":"402","severity":1,"message":"449","line":154,"column":24,"nodeType":"404","messageId":"405","endLine":154,"endColumn":28},{"ruleId":"434","severity":1,"message":"435","line":263,"column":19,"nodeType":"436","messageId":"437","endLine":263,"endColumn":21},{"ruleId":"402","severity":1,"message":"443","line":320,"column":9,"nodeType":"404","messageId":"405","endLine":320,"endColumn":18},{"ruleId":"402","severity":1,"message":"455","line":1,"column":8,"nodeType":"404","messageId":"405","endLine":1,"endColumn":13},{"ruleId":"402","severity":1,"message":"456","line":5,"column":8,"nodeType":"404","messageId":"405","endLine":5,"endColumn":18},{"ruleId":"402","severity":1,"message":"457","line":7,"column":8,"nodeType":"404","messageId":"405","endLine":7,"endColumn":24},{"ruleId":"402","severity":1,"message":"458","line":76,"column":9,"nodeType":"404","messageId":"405","endLine":76,"endColumn":26},{"ruleId":"402","severity":1,"message":"459","line":157,"column":9,"nodeType":"404","messageId":"405","endLine":157,"endColumn":25},{"ruleId":"402","severity":1,"message":"438","line":5,"column":3,"nodeType":"404","messageId":"405","endLine":5,"endColumn":6},{"ruleId":"402","severity":1,"message":"460","line":6,"column":3,"nodeType":"404","messageId":"405","endLine":6,"endColumn":12},{"ruleId":"402","severity":1,"message":"461","line":7,"column":3,"nodeType":"404","messageId":"405","endLine":7,"endColumn":7},{"ruleId":"402","severity":1,"message":"462","line":14,"column":3,"nodeType":"404","messageId":"405","endLine":14,"endColumn":10},{"ruleId":"402","severity":1,"message":"446","line":12,"column":3,"nodeType":"404","messageId":"405","endLine":12,"endColumn":11},{"ruleId":"402","severity":1,"message":"427","line":23,"column":8,"nodeType":"404","messageId":"405","endLine":23,"endColumn":25},{"ruleId":"402","severity":1,"message":"427","line":12,"column":8,"nodeType":"404","messageId":"405","endLine":12,"endColumn":25},{"ruleId":"402","severity":1,"message":"427","line":12,"column":8,"nodeType":"404","messageId":"405","endLine":12,"endColumn":25},{"ruleId":"402","severity":1,"message":"463","line":2,"column":3,"nodeType":"404","messageId":"405","endLine":2,"endColumn":7},{"ruleId":"402","severity":1,"message":"410","line":1,"column":17,"nodeType":"404","messageId":"405","endLine":1,"endColumn":25},{"ruleId":"402","severity":1,"message":"430","line":1,"column":27,"nodeType":"404","messageId":"405","endLine":1,"endColumn":36},{"ruleId":"402","severity":1,"message":"438","line":3,"column":8,"nodeType":"404","messageId":"405","endLine":3,"endColumn":11},{"ruleId":"402","severity":1,"message":"439","line":4,"column":8,"nodeType":"404","messageId":"405","endLine":4,"endColumn":16},"no-native-reassign",["464"],"no-negated-in-lhs",["465"],"no-unused-vars","'useSelector' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["466"],"'useState' is defined but never used.","'registerIndividual' is defined but never used.","'state' is assigned a value but never used.","'registerHospital' is defined but never used.","'isLoggedIn' is assigned a value but never used.","'setIsLoggedIn' is assigned a value but never used.","'registerBloodBank' is defined but never used.","'Link' is defined but never used.","'Joi' is defined but never used.","'useDispatch' is defined but never used.","'logging' is defined but never used.","'axios' is defined but never used.","'history' is assigned a value but never used.","'CardMedia' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'DialogContentText' is defined but never used.","'handleClick' is assigned a value but never used.","'amount' is assigned a value but never used.","'useEffect' is defined but never used.","'lighten' is defined but never used.","'FormControlLabel' is defined but never used.","'Switch' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Box' is defined but never used.","'Collapse' is defined but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["467"],"'createData' is defined but never used.","'emptyRows' is assigned a value but never used.","'Typography' is defined but never used.","'IconButton' is defined but never used.","'MenuIcon' is defined but never used.","'Tooltip' is defined but never used.","'SendIcon' is defined but never used.","'data' is assigned a value but never used.","'setSelected' is assigned a value but never used.","'setBuybtn' is assigned a value but never used.","'isSelected' is assigned a value but never used.","'DialogContent' is defined but never used.","'handleSend' is defined but never used.","'React' is defined but never used.","'invitesImg' is defined but never used.","'upcomingDriveImg' is defined but never used.","'BloodBankServices' is assigned a value but never used.","'HospitalServices' is assigned a value but never used.","'Container' is defined but never used.","'Grid' is defined but never used.","'Divider' is defined but never used.","'Card' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"468","fix":"469"},{"desc":"470","fix":"471"},"Update the dependencies array to be: [dispatch, loggedInState]",{"range":"472","text":"473"},"Update the dependencies array to be: [acceptedDonors, history]",{"range":"474","text":"475"},[1332,1347],"[dispatch, loggedInState]",[2616,2632],"[acceptedDonors, history]"]