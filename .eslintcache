[{"D:\\Nineleaps\\New folder\\RedBank-Web\\src\\index.js":"1","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\App.js":"2","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\redux\\store.js":"3","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\redux\\Reducers\\registerIndividualReducer.js":"4","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\redux\\Reducers\\registerBloodBankReducer.js":"5","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\Auth\\Login.js":"6","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\redux\\Reducers\\registerHospitalReducer.js":"7","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\Auth\\ForgotPassword.js":"8","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\redux\\Reducers\\loggingInReducer.js":"9","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\Auth\\Options.js":"10","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\Auth\\VerifyCode.js":"11","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\Auth\\ResetPassword.js":"12","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\Auth\\IndividualRegistration.js":"13","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\Auth\\HospitalRegistration.js":"14","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\Auth\\BloodBankRegistration.js":"15","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\Auth\\terms.js":"16","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\Auth\\Test.js":"17","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\home\\main.js":"18","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\profile\\index.js":"19","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\findDonors\\FindDonors.js":"20","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\buyBlood\\BuyBlood.js":"21","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\about\\about.js":"22","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\upcomingDrive\\UpcomingDrive.js":"23","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\myCommitments\\MyCommitments.js":"24","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\buyBlood\\product.js":"25","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\myPurchases\\MyPurchases.js":"26","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\activeDonorReq\\ActiveDonorReq.js":"27","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\conductDrive\\conductDrive.js":"28","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\myInventory\\myInventory.js":"29","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\mysales\\mySales.js":"30","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\myInvites\\myInvites.js":"31","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\myDrives\\myDrives.js":"32","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\myDrives\\table.js":"33","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\myInvites\\table.js":"34","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\myInventory\\table.js":"35","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\mysales\\table.js":"36","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\activeDonorReq\\useTable.js":"37","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\myPurchases\\table.js":"38","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\myCommitments\\table.js":"39","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\layouts\\loggedoutNavbar.js":"40","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\redux\\Types\\registration.js":"41","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\redux\\Types\\login.js":"42","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\redux\\Actions\\login.js":"43","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\layouts\\index.js":"44","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\upcomingDrive\\useTable.js":"45","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\buyBlood\\useTable.js":"46","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\findDonors\\useTable.js":"47","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\profile\\profile.js":"48","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\home\\services\\HospitalServices.js":"49","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\home\\services\\BankServices.js":"50","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\home\\services\\indiServices.js":"51","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\layouts\\footer.js":"52","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\layouts\\navbar.js":"53","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\profile\\pageHeader.js":"54","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\profile\\orgForm.js":"55","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\profile\\profileForm.js":"56","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\redux\\Actions\\registerBloodBank.js":"57","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\home\\serviceCard.js":"58","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\redux\\Actions\\registerHospital.js":"59","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\redux\\Actions\\registerIndividual.js":"60","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\myDrives\\acceptedDonors.js":"61","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\myanalytics\\MyAnalytics.js":"62","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\myanalytics\\barChart.js":"63","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\myanalytics\\lineChart.js":"64","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\about\\bloodCompatibilityTable.js":"65","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\NotFound.js":"66","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\activeDonorReq\\inviteesList.js":"67"},{"size":380,"mtime":1612776923753,"results":"68","hashOfConfig":"69"},{"size":5397,"mtime":1614343757590,"results":"70","hashOfConfig":"69"},{"size":610,"mtime":1612776923754,"results":"71","hashOfConfig":"69"},{"size":567,"mtime":1612776909419,"results":"72","hashOfConfig":"69"},{"size":556,"mtime":1612776909418,"results":"73","hashOfConfig":"69"},{"size":5135,"mtime":1614431642625,"results":"74","hashOfConfig":"69"},{"size":554,"mtime":1612776909419,"results":"75","hashOfConfig":"69"},{"size":3035,"mtime":1612776909338,"results":"76","hashOfConfig":"69"},{"size":481,"mtime":1614343624866,"results":"77","hashOfConfig":"69"},{"size":2455,"mtime":1614336607979,"results":"78","hashOfConfig":"69"},{"size":2714,"mtime":1612776909341,"results":"79","hashOfConfig":"69"},{"size":3613,"mtime":1614348609000,"results":"80","hashOfConfig":"69"},{"size":14398,"mtime":1614426917462,"results":"81","hashOfConfig":"69"},{"size":15891,"mtime":1614425611002,"results":"82","hashOfConfig":"69"},{"size":15875,"mtime":1614425057509,"results":"83","hashOfConfig":"69"},{"size":3413,"mtime":1612776909397,"results":"84","hashOfConfig":"69"},{"size":13013,"mtime":1614322463534,"results":"85","hashOfConfig":"69"},{"size":3605,"mtime":1614079126969,"results":"86","hashOfConfig":"69"},{"size":621,"mtime":1612848615434,"results":"87","hashOfConfig":"69"},{"size":8958,"mtime":1614427562108,"results":"88","hashOfConfig":"69"},{"size":10134,"mtime":1614259517858,"results":"89","hashOfConfig":"69"},{"size":16402,"mtime":1614402766327,"results":"90","hashOfConfig":"69"},{"size":6759,"mtime":1614099600442,"results":"91","hashOfConfig":"69"},{"size":1781,"mtime":1614321656056,"results":"92","hashOfConfig":"69"},{"size":4780,"mtime":1614353143548,"results":"93","hashOfConfig":"69"},{"size":1760,"mtime":1614321615318,"results":"94","hashOfConfig":"69"},{"size":1169,"mtime":1614320582938,"results":"95","hashOfConfig":"69"},{"size":14290,"mtime":1614430971167,"results":"96","hashOfConfig":"69"},{"size":1163,"mtime":1612776909412,"results":"97","hashOfConfig":"69"},{"size":1717,"mtime":1614321620463,"results":"98","hashOfConfig":"69"},{"size":1252,"mtime":1614154905119,"results":"99","hashOfConfig":"69"},{"size":1267,"mtime":1614321603568,"results":"100","hashOfConfig":"69"},{"size":6412,"mtime":1614238707941,"results":"101","hashOfConfig":"69"},{"size":13413,"mtime":1614167868539,"results":"102","hashOfConfig":"69"},{"size":21420,"mtime":1614431318698,"results":"103","hashOfConfig":"69"},{"size":7532,"mtime":1614317739140,"results":"104","hashOfConfig":"69"},{"size":9781,"mtime":1614320508797,"results":"105","hashOfConfig":"69"},{"size":7651,"mtime":1614231384915,"results":"106","hashOfConfig":"69"},{"size":8598,"mtime":1614172713641,"results":"107","hashOfConfig":"69"},{"size":987,"mtime":1612776909399,"results":"108","hashOfConfig":"69"},{"size":171,"mtime":1612776909420,"results":"109","hashOfConfig":"69"},{"size":84,"mtime":1614346637378,"results":"110","hashOfConfig":"69"},{"size":247,"mtime":1614346648516,"results":"111","hashOfConfig":"69"},{"size":92,"mtime":1612776909399,"results":"112","hashOfConfig":"69"},{"size":9346,"mtime":1614173772139,"results":"113","hashOfConfig":"69"},{"size":8675,"mtime":1614261244968,"results":"114","hashOfConfig":"69"},{"size":12526,"mtime":1614257655816,"results":"115","hashOfConfig":"69"},{"size":785,"mtime":1612848629323,"results":"116","hashOfConfig":"69"},{"size":2492,"mtime":1612776923732,"results":"117","hashOfConfig":"69"},{"size":8391,"mtime":1612776923732,"results":"118","hashOfConfig":"69"},{"size":2169,"mtime":1612776923742,"results":"119","hashOfConfig":"69"},{"size":1823,"mtime":1612776923728,"results":"120","hashOfConfig":"69"},{"size":11395,"mtime":1614435022707,"results":"121","hashOfConfig":"69"},{"size":1033,"mtime":1612776909402,"results":"122","hashOfConfig":"69"},{"size":6456,"mtime":1612776909402,"results":"123","hashOfConfig":"69"},{"size":4509,"mtime":1612851265194,"results":"124","hashOfConfig":"69"},{"size":218,"mtime":1612776909417,"results":"125","hashOfConfig":"69"},{"size":1383,"mtime":1612776923732,"results":"126","hashOfConfig":"69"},{"size":214,"mtime":1612776909417,"results":"127","hashOfConfig":"69"},{"size":222,"mtime":1612776909418,"results":"128","hashOfConfig":"69"},{"size":3689,"mtime":1614239005007,"results":"129","hashOfConfig":"69"},{"size":2196,"mtime":1612806785172,"results":"130","hashOfConfig":"69"},{"size":1007,"mtime":1612805998427,"results":"131","hashOfConfig":"69"},{"size":1078,"mtime":1612806482542,"results":"132","hashOfConfig":"69"},{"size":2442,"mtime":1612807039982,"results":"133","hashOfConfig":"69"},{"size":163,"mtime":1612847778812,"results":"134","hashOfConfig":"69"},{"size":3826,"mtime":1614319646489,"results":"135","hashOfConfig":"69"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},"7xndx4",{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"138"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"138"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"138"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"138"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"138"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"138"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"138"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"138"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"138"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"138"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"138"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"138"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"138"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"138"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"138"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"138"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"138"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"138"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"138"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"138"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"138"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"138"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"138"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"138"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"138"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"138"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"138"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"138"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"138"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"138"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"138"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"138"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"138"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"138"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"138"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"138"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"138"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"138"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"138"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"138"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"283","messages":"284","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"138"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"138"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"138"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"294"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"138"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"138"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307","usedDeprecatedRules":"138"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"138"},"D:\\Nineleaps\\New folder\\RedBank-Web\\src\\index.js",[],["319","320"],"D:\\Nineleaps\\New folder\\RedBank-Web\\src\\App.js",["321"],"import React, { useEffect } from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\n\r\nimport Login from \"./Components/Auth/Login\";\r\nimport Options from \"./Components/Auth/Options\";\r\nimport ForgotPassword from \"./Components/Auth/ForgotPassword\";\r\nimport VerifyCode from \"./Components/Auth/VerifyCode\";\r\nimport ResetPassword from \"./Components/Auth/ResetPassword\";\r\nimport IndividualRegistration from \"./Components/Auth/IndividualRegistration\";\r\nimport HospitalRegistration from \"./Components/Auth/HospitalRegistration\";\r\nimport BloodBankRegistration from \"./Components/Auth/BloodBankRegistration\";\r\nimport Home from \"./Components/screen/home/main\";\r\nimport Terms from \"./Components/Auth/terms\";\r\nimport Test from \"./Components/Auth/Test\";\r\nimport Profile from \"./Components/screen/profile/index\";\r\nimport About from \"./Components/screen/about/about\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\n//profile pages\r\n// import MainIndividual from \"./Components/screen/profile/Individual/MainIndividual\";\r\n// import MainHospital from \"./Components/screen/profile/Hospital/MainHospital\";\r\n\r\n//services\r\nimport FindDonors from \"./Components/screen/services/findDonors/FindDonors\";\r\nimport InviteesList from \"./Components/screen/services/activeDonorReq/inviteesList\";\r\nimport UpcomingDrive from \"./Components/screen/services/upcomingDrive/UpcomingDrive\";\r\nimport BuyBlood from \"./Components/screen/services/buyBlood/BuyBlood\";\r\nimport Product from \"./Components/screen/services/buyBlood/product\";\r\nimport MyCommitments from \"./Components/screen/services/myCommitments/MyCommitments\";\r\nimport MyPurchases from \"./Components/screen/services/myPurchases/MyPurchases\";\r\nimport ActiveDonorReq from \"./Components/screen/services/activeDonorReq/ActiveDonorReq\";\r\nimport ConductDrive from \"./Components/screen/services/conductDrive/conductDrive\";\r\nimport MyDrives from \"./Components/screen/services/myDrives/myDrives\";\r\nimport MyInventory from \"./Components/screen/services/myInventory/myInventory\";\r\nimport MySales from \"./Components/screen/services/mysales/mySales\";\r\nimport MyInvites from \"./Components/screen/services/myInvites/myInvites\";\r\nimport AcceptedDonors from \"./Components/screen/services/myDrives/acceptedDonors\";\r\nimport MyAnalytics from \"./Components/screen/services/myanalytics/MyAnalytics\";\r\nimport NotFound from \"./Components/screen/NotFound\";\r\nimport { logging } from \"./redux/Actions/login\";\r\nimport Cookies from \"universal-cookie\";\r\n\r\nfunction App() {\r\n  const loggedIn = useSelector((state) => state.loggedIn);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    const cookies = new Cookies();\r\n    const authObj = cookies.get(\"Auth\");\r\n    if (authObj) {\r\n      dispatch(logging(authObj));\r\n    }\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <>\r\n      <Switch>\r\n        {loggedIn.isLoggedIn ? (\r\n          <>\r\n            <Route exact path=\"/\" component={Home} />\r\n            <Route exact path=\"/home\" component={Home} />\r\n            <Route exact path=\"/profile\" component={Profile} />\r\n            <Route exact path=\"/About\" component={About} />\r\n            <Route exact path=\"/ActiveDonorReq\" component={ActiveDonorReq} />\r\n            <Route exact path=\"/FindDonors\" component={FindDonors} />\r\n            <Route exact path=\"/UpcomingDrive\" component={UpcomingDrive} />\r\n            <Route exact path=\"/BuyBlood\" component={BuyBlood} />\r\n            <Route exact path=\"/BuyBlood/Product\" component={Product} />\r\n            <Route exact path=\"/MyCommitments\" component={MyCommitments} />\r\n            <Route exact path=\"/MyPurchases\" component={MyPurchases} />\r\n            <Route exact path=\"/ConductDrive\" component={ConductDrive} />\r\n            <Route exact path=\"/MyDrives\" component={MyDrives} />\r\n            <Route exact path=\"/AcceptedDonors\" component={AcceptedDonors} />\r\n            <Route exact path=\"/MyInventory\" component={MyInventory} />\r\n            <Route exact path=\"/MySales\" component={MySales} />\r\n            <Route exact path=\"/MyInvites\" component={MyInvites} />\r\n            <Route exact path=\"/MyAnalytics\" component={MyAnalytics} />\r\n            <Route exact path=\"/inviteesList\" component={InviteesList} />\r\n            {/* <Route component={NotFound} /> */}\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Route exact path=\"/\" component={Login} />\r\n            <Route\r\n              exact\r\n              path=\"/BloodBankRegistration\"\r\n              component={BloodBankRegistration}\r\n            />\r\n            <Route exact path=\"/Login\" component={Login} />\r\n            <Route exact path=\"/terms\" component={Terms} />\r\n\r\n            <Route exact path=\"/ForgotPassword\" component={ForgotPassword} />\r\n            <Route exact path=\"/VerifyCode\" component={VerifyCode} />\r\n            <Route exact path=\"/ResetPassword\" component={ResetPassword} />\r\n            <Route exact path=\"/Options\" component={Options} />\r\n            <Route\r\n              exact\r\n              path=\"/IndividualRegistration\"\r\n              component={IndividualRegistration}\r\n            />\r\n            <Route\r\n              exact\r\n              path=\"/HospitalRegistration\"\r\n              component={HospitalRegistration}\r\n            />\r\n            <Route exact path=\"/Test\" component={Test} />\r\n            {/* <Route component={NotFound} /> */}\r\n          </>\r\n        )}\r\n      </Switch>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\redux\\store.js",[],"D:\\Nineleaps\\New folder\\RedBank-Web\\src\\redux\\Reducers\\registerIndividualReducer.js",[],"D:\\Nineleaps\\New folder\\RedBank-Web\\src\\redux\\Reducers\\registerBloodBankReducer.js",[],"D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\Auth\\Login.js",["322"],"import React, { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport login from \"./images/login.png\";\r\nimport avatar from \"./images/avatar.png\";\r\nimport { Grid, Paper, TextField, Button, Typography } from \"@material-ui/core\";\r\nimport LoggedOutNavbar from \"../layouts/loggedoutNavbar\";\r\nimport Joi from \"joi\";\r\nimport axios from \"axios\";\r\nimport Cookies from \"universal-cookie\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { logging } from \"../../redux/Actions/login\";\r\n\r\nfunction Login() {\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  const [errors, setErrors] = useState({});\r\n  const [data, setData] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n  const paperStyle = {\r\n    display: \"flex\",\r\n    width: 380,\r\n    flexDirection: \"column\",\r\n    padding: \"30px\",\r\n  };\r\n  const margin = { marginTop: \"20px\" };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const errors = validate();\r\n    setErrors(errors);\r\n    if (errors) return;\r\n\r\n    axios\r\n      .post(\"http://localhost:8080/authenticate\", {\r\n        email: data.email,\r\n        password: data.password,\r\n      })\r\n      .then(function (response) {\r\n        console.log(response);\r\n        dispatch(\r\n          logging({\r\n            userType: response.data.userType,\r\n            userToken: response.data.userToken,\r\n            userId: response.data.userId,\r\n          })\r\n        );\r\n        const cookies = new Cookies();\r\n        cookies.set(\r\n          \"Auth\",\r\n          {\r\n            userType: response.data.userType,\r\n            userToken: response.data.userToken,\r\n            userId: response.data.userId,\r\n          },\r\n          { path: \"/\" }\r\n        );\r\n\r\n        history.push(\"/home\");\r\n      })\r\n      .catch(function (error) {\r\n        setErrors({\r\n          email: \"Email / Password is invalid\",\r\n          password: \"Email / Password is invalid\",\r\n        });\r\n      });\r\n  };\r\n\r\n  const validate = () => {\r\n    const errors = {};\r\n\r\n    if (!/^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[A-Za-z]+$/.test(data.email.trim())) {\r\n      errors.email = \"Email is either empty or invalid\";\r\n    }\r\n    if (!data.password) {\r\n      errors.password = \"Password cannot be empty\";\r\n    }\r\n\r\n    return Object.keys(errors).length === 0 ? null : errors;\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    const updatedData = { ...data };\r\n    updatedData[name] = value;\r\n    setData(updatedData);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <LoggedOutNavbar />\r\n\r\n      <Grid\r\n        container\r\n        style={{ marginTop: \"100px\", backgroundColor: \"#E94364\" }}\r\n      >\r\n        <Grid\r\n          item\r\n          xs={false}\r\n          sm={6}\r\n          container\r\n          justify=\"center\"\r\n          alignItems=\"center\"\r\n        >\r\n          <img src={login} alt=\"#\" />\r\n        </Grid>\r\n\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          sm={6}\r\n          container\r\n          justify=\"center\"\r\n          alignItems=\"center\"\r\n        >\r\n          <Paper style={paperStyle} elevation={5}>\r\n            <Grid align=\"center\">\r\n              <img alt=\"\" src={avatar} width=\"80px\" />\r\n              <h2 style={{ marginTop: \"10px\" }}>Sign In</h2>\r\n            </Grid>\r\n\r\n            <TextField\r\n              label=\"Email\"\r\n              placeholder=\"Enter your email\"\r\n              type=\"email\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              style={margin}\r\n              name=\"email\"\r\n              value={data.email}\r\n              onChange={handleChange}\r\n              error={errors && errors.email}\r\n              helperText={errors && errors.email ? errors.email : null}\r\n            />\r\n\r\n            <TextField\r\n              label=\"Password\"\r\n              placeholder=\"Enter your password\"\r\n              type=\"password\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              style={margin}\r\n              name=\"password\"\r\n              value={data.password}\r\n              onChange={handleChange}\r\n              error={errors && errors.password}\r\n              helperText={errors && errors.password ? errors.password : null}\r\n            />\r\n\r\n            <Typography style={margin} align=\"right\">\r\n              <Link to=\"/ForgotPassword\">Forgot password </Link>\r\n            </Typography>\r\n\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              fullWidth\r\n              style={{ marginTop: \"20px\", backgroundColor: \"#E94364\" }}\r\n              onClick={handleSubmit}\r\n            >\r\n              Login\r\n            </Button>\r\n\r\n            <Grid align=\"center\">\r\n              <Typography style={margin}>\r\n                <p>\r\n                  New user ? <Link to=\"/Options\">Sign up</Link>\r\n                </p>\r\n              </Typography>\r\n              <h3 style={margin}>OR</h3>\r\n              <Typography style={margin}>\r\n                <Link to=\"/Options\">Sign in with google account</Link>\r\n              </Typography>\r\n            </Grid>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\redux\\Reducers\\registerHospitalReducer.js",[],"D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\Auth\\ForgotPassword.js",["323","324"],"import React, { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport forgotPwd from \"./images/forgotPwd.png\";\r\nimport LoggedOutNavbar from \"../layouts/loggedoutNavbar\";\r\nimport { Grid, Paper, TextField, Button } from \"@material-ui/core\";\r\nimport Joi from \"joi\";\r\nimport axios from \"axios\";\r\n\r\nfunction ForgotPassword() {\r\n  const history = useHistory();\r\n  const [recoveryEmail, setRecoveryEmail] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const paperStyle = {\r\n    display: \"flex\",\r\n    width: 380,\r\n    flexDirection: \"column\",\r\n    padding: \"30px\",\r\n  };\r\n  const margin = { marginTop: \"20px\" };\r\n\r\n  const handleChange = (e) => {\r\n    setRecoveryEmail(e.target.value);\r\n  };\r\n\r\n  const validate = () => {\r\n    let error = \"\";\r\n    if (\r\n      new RegExp(/[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,15}/g).test(recoveryEmail)\r\n    )\r\n      error = \"\";\r\n    else error = \"Invalid email address\";\r\n\r\n    return error;\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const error = validate();\r\n    setError(error);\r\n    if (error) return;\r\n\r\n    axios\r\n      .post(\"http://localhost:5000/forgotpassword\", {\r\n        recoveryEmail: recoveryEmail,\r\n      })\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          history.push(\"/VerifyCode\");\r\n        } else {\r\n          setError(response.data.error);\r\n        }\r\n      });\r\n\r\n    console.log(\"submitted\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <LoggedOutNavbar />\r\n      <Grid\r\n        container\r\n        style={{ marginTop: \"100px\", backgroundColor: \"#E94364\" }}\r\n      >\r\n        <Grid item xs={6} container justify=\"center\" alignItems=\"center\">\r\n          <img src={forgotPwd} alt=\"fgtpwd\" width=\"800px\" height=\"600px\" />\r\n        </Grid>\r\n\r\n        <Grid item xs={6} container justify=\"center\" alignItems=\"center\">\r\n          <form onSubmit={handleSubmit}>\r\n            <Paper elevation={5} style={paperStyle}>\r\n              <Grid align=\"center\">\r\n                <h2 style={{ marginTop: \"20px\" }}>Find your Account</h2>\r\n                <p style={margin}>\r\n                  Help us find your account by entering your registered email.\r\n                </p>\r\n                <TextField\r\n                  label=\"Recovery Email\"\r\n                  name=\"recoveryEmail\"\r\n                  type=\"email\"\r\n                  value={recoveryEmail}\r\n                  onChange={handleChange}\r\n                  fullWidth\r\n                  required\r\n                  style={margin}\r\n                  error={error ? true : false}\r\n                  helperText={error ? error : null}\r\n                />\r\n                <Button\r\n                  variant=\"contained\"\r\n                  type=\"submit\"\r\n                  style={{ marginTop: \"20px\", backgroundColor: \"#E94364\" }}\r\n                >\r\n                  Next\r\n                </Button>\r\n              </Grid>\r\n            </Paper>\r\n          </form>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ForgotPassword;\r\n","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\redux\\Reducers\\loggingInReducer.js",[],"D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\Auth\\Options.js",["325"],"import React, { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { Grid, Paper, Typography, Divider, Button } from \"@material-ui/core\";\r\n\r\nimport LoggedOutNavbar from \"../layouts/loggedoutNavbar\";\r\n\r\nfunction Options() {\r\n  const paperStyle = {\r\n    display: \"flex\",\r\n    width: 380,\r\n    flexDirection: \"column\",\r\n    padding: \"30px\",\r\n  };\r\n  const margin = { marginTop: \"20px\" };\r\n\r\n  const history = useHistory();\r\n\r\n  const handleSet = (e, name) => {\r\n    var type = \"\";\r\n    if (name === \"individual\") {\r\n      type = \"1\";\r\n      history.push({ pathname: \"/IndividualRegistration\", type });\r\n    } else if (name === \"bloodbank\") {\r\n      type = \"3\";\r\n      history.push({ pathname: \"/BloodBankRegistration\", type });\r\n    } else {\r\n      type = \"2\";\r\n      history.push({ pathname: \"/HospitalRegistration\", type });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <LoggedOutNavbar />\r\n\r\n      <Grid\r\n        container\r\n        style={{ marginTop: \"100px\", backgroundColor: \"#E94364\" }}\r\n      >\r\n        <Grid item xs={12} container justify=\"center\" alignItems=\"center\">\r\n          <Paper elevation={5} style={paperStyle}>\r\n            <Grid align=\"center\">\r\n              <h2 style={{ marginTop: \"15px\" }}>Which type of user are you?</h2>\r\n              <Typography style={margin}>\r\n                <Button\r\n                  onClick={(e) => {\r\n                    handleSet(e, \"individual\");\r\n                  }}\r\n                >\r\n                  Individual\r\n                </Button>\r\n              </Typography>\r\n              <Typography style={margin}>\r\n                <Button\r\n                  onClick={(e) => {\r\n                    handleSet(e, \"bloodbank\");\r\n                  }}\r\n                >\r\n                  Blood-Bank\r\n                </Button>\r\n              </Typography>\r\n              <Typography style={margin}>\r\n                <Button\r\n                  onClick={(e) => {\r\n                    handleSet(e, \"hospital\");\r\n                  }}\r\n                >\r\n                  Hospital\r\n                </Button>\r\n              </Typography>\r\n              <Divider style={margin} />\r\n              <Typography style={margin}>\r\n                <p>\r\n                  Existing user ? <Link to=\"/\">Sign in</Link>\r\n                </p>\r\n              </Typography>\r\n            </Grid>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Options;\r\n","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\Auth\\VerifyCode.js",["326"],"import React, { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport verifyCode from \"./images/verifyCode.png\";\r\nimport LoggedOutNavbar from \"../layouts/loggedoutNavbar\";\r\nimport { Grid, Paper, TextField, Button } from \"@material-ui/core\";\r\n\r\nimport axios from \"axios\";\r\n\r\nfunction VerifyCode() {\r\n  const paperStyle = {\r\n    display: \"flex\",\r\n    width: 380,\r\n    flexDirection: \"column\",\r\n    padding: \"30px\",\r\n  };\r\n  const margin = { marginTop: \"20px\" };\r\n\r\n  const [otp, setOtp] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const history = useHistory();\r\n\r\n  const handleChange = (e) => {\r\n    setOtp(e.target.value);\r\n  };\r\n\r\n  const handleClick = () => {\r\n    const error = validate();\r\n    setError(error);\r\n    if (error) return;\r\n\r\n    axios\r\n      .post(\"http://localhost:5000/otp\", {\r\n        otp: otp,\r\n      })\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          history.push(\"/ResetPassword\");\r\n        } else setError(response.data.error);\r\n      });\r\n  };\r\n\r\n  const validate = () => {\r\n    let error = \"\";\r\n    if (otp.length !== 6) error = \"Otp should contain 6 digits\";\r\n    return error;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <LoggedOutNavbar />\r\n      <Grid\r\n        container\r\n        style={{ marginTop: \"100px\", backgroundColor: \"#E94364\" }}\r\n      >\r\n        <Grid item xs={6} container justify=\"center\" alignItems=\"center\">\r\n          <img src={verifyCode} alt=\"verify\" style={{ width: \"80%\" }} />\r\n        </Grid>\r\n\r\n        <Grid item xs={6} container justify=\"center\" alignItems=\"center\">\r\n          <Paper elevation={5} style={paperStyle}>\r\n            <Grid align=\"center\">\r\n              <h2 style={{ marginTop: \"20px\" }}>Enter the code</h2>\r\n              <p style={margin}>\r\n                If the entered email address matches any account registered with\r\n                us, we will send u a mail. So, Check your Mailbox\r\n              </p>\r\n              <TextField\r\n                label=\"Enter the code sent\"\r\n                fullWidth\r\n                required\r\n                style={margin}\r\n                name=\"otp\"\r\n                value={otp}\r\n                type=\"number\"\r\n                onChange={handleChange}\r\n                error={error ? true : false}\r\n                helperText={error ? error : null}\r\n              />\r\n              <Button\r\n                variant=\"contained\"\r\n                style={{ marginTop: \"20px\", backgroundColor: \"#E94364\" }}\r\n                onClick={handleClick}\r\n              >\r\n                Verify\r\n              </Button>\r\n            </Grid>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default VerifyCode;\r\n","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\Auth\\ResetPassword.js",["327","328"],"import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Grid, Paper, TextField, Button } from \"@material-ui/core\";\r\nimport resetPwd from \"./images/resetPwd.png\";\r\nimport LoggedOutNavbar from \"../layouts/loggedoutNavbar\";\r\nimport axios from \"axios\";\r\n\r\nfunction ResetPassword() {\r\n  const history = useHistory();\r\n  const paperStyle = {\r\n    display: \"flex\",\r\n    width: 380,\r\n    flexDirection: \"column\",\r\n    padding: \"30px\",\r\n  };\r\n  const margin = { marginTop: \"20px\" };\r\n\r\n  const [password, setPassword] = useState(\"\");\r\n  const [cPassword, setCPassword] = useState(\"\");\r\n  const [errors, setError] = useState({});\r\n\r\n  const handleChange = (e) => {\r\n    if (e.target.name === \"password\") setPassword(e.target.value);\r\n    else if (e.target.name === \"cPassword\") setCPassword(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const errors = validate();\r\n    setError(errors);\r\n    if (errors) return;\r\n  };\r\n\r\n  const validate = () => {\r\n    let errors = {};\r\n    const strongRegex = new RegExp(\r\n      \"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,})\"\r\n    );\r\n\r\n    if (!strongRegex.test(password.trim())) {\r\n      errors.password = \"Enter a stronger password\";\r\n    }\r\n    if (cPassword !== password || cPassword === \"\") {\r\n      errors.cPassword = \"Password is either empty or Passwords do not match\";\r\n    }\r\n\r\n    return Object.keys(errors).length === 0 ? null : errors;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <LoggedOutNavbar />\r\n      <Grid\r\n        container\r\n        style={{ marginTop: \"100px\", backgroundColor: \"#E94364\" }}\r\n      >\r\n        <Grid item xs={6} container justify=\"center\" alignItems=\"center\">\r\n          <img src={resetPwd} alt=\"reset\" width=\"600px\" height=\"600px\" />\r\n        </Grid>\r\n\r\n        <Grid item xs={6} container justify=\"center\" alignItems=\"center\">\r\n          <form onSubmit={handleSubmit}>\r\n            <Paper elevation={5} style={paperStyle}>\r\n              <Grid align=\"center\">\r\n                <h2 style={{ marginTop: \"20px\" }}>Reset your Password</h2>\r\n                <p style={margin}>create a new password</p>\r\n                <TextField\r\n                  label=\"Enter a new password\"\r\n                  type=\"password\"\r\n                  fullWidth\r\n                  required\r\n                  style={margin}\r\n                  name=\"password\"\r\n                  value={password}\r\n                  onChange={handleChange}\r\n                  error={errors && errors.password ? true : false}\r\n                  helperText={\r\n                    errors && errors.password ? errors.password : null\r\n                  }\r\n                />\r\n                <TextField\r\n                  label=\"Confirm the new password\"\r\n                  type=\"password\"\r\n                  fullWidth\r\n                  required\r\n                  style={margin}\r\n                  name=\"cPassword\"\r\n                  value={cPassword}\r\n                  onChange={handleChange}\r\n                  error={errors && errors.cPassword ? true : false}\r\n                  helperText={\r\n                    errors && errors.cPassword ? errors.cPassword : null\r\n                  }\r\n                />\r\n                <Button\r\n                  variant=\"contained\"\r\n                  type=\"submit\"\r\n                  style={{ marginTop: \"20px\", backgroundColor: \"#E94364\" }}\r\n                >\r\n                  Reset\r\n                </Button>\r\n              </Grid>\r\n            </Paper>\r\n          </form>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ResetPassword;\r\n","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\Auth\\IndividualRegistration.js",["329","330","331"],"import {\r\n  Grid,\r\n  Paper,\r\n  TextField,\r\n  Select,\r\n  MenuItem,\r\n  InputLabel,\r\n  FormControl,\r\n  FormControlLabel,\r\n  Checkbox,\r\n  Button,\r\n  Typography,\r\n  FormHelperText,\r\n} from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport individual from \"./images/individual.png\";\r\nimport states from \"./states.json\";\r\nimport Joi from \"joi\";\r\nimport LoggedOutNavbar from \"../layouts/loggedoutNavbar\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport registerIndividual from \"../../redux/Actions/registerIndividual\";\r\nimport axios from \"axios\";\r\nimport { logging } from \"../../redux/Actions/login\";\r\nimport Cookies from \"universal-cookie\";\r\n\r\nfunction IndividualRegistration(props) {\r\n  const [data, setData] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    dob: \"2021-02-27\",\r\n    phone: \"\",\r\n    address: \"\",\r\n    state: \"\",\r\n    district: \"\",\r\n    pincode: \"\",\r\n    bloodGroup: \"\",\r\n    password: \"\",\r\n    cPassword: \"\",\r\n    terms: false,\r\n  });\r\n\r\n  const reqBody = {};\r\n\r\n  const [errors, setErrors] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    dob: \"\",\r\n    phone: \"\",\r\n    address: \"\",\r\n    state: \"\",\r\n    district: \"\",\r\n    pincode: \"\",\r\n    bloodGroup: \"\",\r\n    password: \"\",\r\n    cPassword: \"\",\r\n    terms: \"\",\r\n  });\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const [enable, setEnable] = useState(true);\r\n  const [selectedStateIndex, setSelectedStateIndex] = useState(0);\r\n\r\n  const paperStyle = {\r\n    height: \"auto\",\r\n    width: \"450px\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    padding: \"30px\",\r\n  };\r\n  const margin = { marginTop: \"15px\" };\r\n\r\n  const validate = () => {\r\n    const strongRegex = new RegExp(\r\n      \"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,})\"\r\n    );\r\n    const errors = {};\r\n\r\n    if (\r\n      !/^(?=.{5,20}$)(?![.])(?!.*[.]{2})[a-zA-Z0-9.]+(?<![.])$/.test(\r\n        data.name.trim()\r\n      )\r\n    ) {\r\n      errors.name = \" Username is either empty or invalid \";\r\n    }\r\n    if (!/^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[A-Za-z]+$/.test(data.email.trim())) {\r\n      errors.email = \"Email is either empty or invalid\";\r\n    }\r\n    if (data.address.trim() === \"\") {\r\n      errors.address = \"Address cannot be empty\";\r\n    }\r\n    if (data.state === \"\") {\r\n      errors.state = \"State cannot be empty\";\r\n    }\r\n    if (data.bloodGroup === \"\") {\r\n      errors.bloodGroup = \"Blood Group cannot be empty\";\r\n    }\r\n    if (data.district === \"\") {\r\n      errors.district = \"District cannot be empty\";\r\n    }\r\n    if (!/^[1-9][0-9]{5}$/.test(data.pincode.trim())) {\r\n      errors.pincode = \"Invalid pincode format\";\r\n    }\r\n    if (!strongRegex.test(data.password.trim())) {\r\n      errors.password = \"Enter a stronger password\";\r\n    }\r\n    if (data.cPassword !== data.password || data.cPassword === \"\") {\r\n      errors.cPassword = \"Password is either empty or Passwords do not match\";\r\n    }\r\n    if (!data.terms) {\r\n      errors.terms = \"Please accept our terms and conditions\";\r\n    }\r\n\r\n    let age = new Date().getFullYear() - new Date(data.dob).getFullYear();\r\n    const m = new Date().getMonth() - new Date(data.dob).getMonth();\r\n    if (\r\n      m < 0 ||\r\n      (m === 0 && new Date().getDate() < new Date(data.dob).getDate())\r\n    ) {\r\n      age--;\r\n    }\r\n    if (age < 18 || age > 65) {\r\n      errors.dob = \"User must be between 18 and 65 of age\";\r\n    }\r\n\r\n    if (!/^\\d{10}$/.test(data.phone.trim())) {\r\n      errors.phone = \"Invalid Phone number\";\r\n    }\r\n\r\n    return Object.keys(errors).length === 0 ? null : errors;\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    if (name === \"terms\") {\r\n      const updatedData = { ...data };\r\n      updatedData[e.target.name] = e.target.checked;\r\n      setData(updatedData);\r\n    } else {\r\n      if (name === \"state\") {\r\n        setEnable(false);\r\n        setSelectedStateIndex(\r\n          states.states.findIndex((item) => item.state === value)\r\n        );\r\n      }\r\n      const updatedData = { ...data };\r\n      updatedData[name] = value;\r\n      setData(updatedData);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log(data);\r\n    const errors = validate();\r\n    console.log(errors);\r\n    setErrors(errors);\r\n    if (errors) return;\r\n\r\n    // making a request object to send to the backend\r\n    reqBody.name = data.name;\r\n    reqBody.email = data.email;\r\n    reqBody.dob = new Date(data.dob).toLocaleDateString();\r\n    reqBody.phone = data.phone;\r\n    reqBody.address = data.address;\r\n    reqBody.state = data.state;\r\n    reqBody.district = data.district;\r\n    reqBody.pincode = data.pincode;\r\n    reqBody.bloodGroup = data.bloodGroup;\r\n    reqBody.password = data.password;\r\n\r\n    axios\r\n      .post(\"http://localhost:8080/registerind\", reqBody)\r\n      .then(function (response) {\r\n        // if (response.headers.success) {\r\n        console.log(response);\r\n        dispatch(\r\n          logging({\r\n            isLoggedIn: true,\r\n            userType: props.location.type,\r\n            userToken: response.data.userToken,\r\n            userId: response.data.userId,\r\n          })\r\n        );\r\n        const cookies = new Cookies();\r\n        cookies.set(\r\n          \"Auth\",\r\n          {\r\n            userType: response.data.userType,\r\n            userToken: response.data.userToken,\r\n            userId: response.data.userId,\r\n          },\r\n          { path: \"/\" }\r\n        );\r\n        history.push(\"/home\");\r\n        // } else {\r\n        //   if (response.headers.error == \"Email is already taken\") {\r\n        //     setErrors((prevErrors) => ({\r\n        //       ...prevErrors,\r\n        //       email: response.headers.error,\r\n        //     }));\r\n        //   }\r\n        // }\r\n      })\r\n      .catch(function (error) {\r\n        window.alert(error.message);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <LoggedOutNavbar />\r\n\r\n      <Grid container style={{ margin: \"20px auto\" }}>\r\n        <Grid item xs={6} container justify=\"center\" alignItems=\"center\">\r\n          <img src={individual} alt=\"individual\" style={{ maxWidth: \"100%\" }} />\r\n        </Grid>\r\n\r\n        <Grid item xs={6} container justify=\"center\" alignItems=\"center\">\r\n          <form>\r\n            <Paper style={paperStyle} elevation={5}>\r\n              <h2 style={{ marginTop: \"10px\" }} align=\"center\">\r\n                Individual Registration\r\n              </h2>\r\n\r\n              <TextField\r\n                label=\"Name\"\r\n                placeholder=\"Enter your full name\"\r\n                type=\"text\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"name\"\r\n                value={data.name}\r\n                onChange={handleChange}\r\n                inputProps={{\r\n                  maxLength: 30,\r\n                }}\r\n                error={errors && errors.name}\r\n                helperText={errors && errors.name ? errors.name : null}\r\n              />\r\n\r\n              <TextField\r\n                label=\"Email\"\r\n                placeholder=\"Enter your email\"\r\n                type=\"email\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"email\"\r\n                value={data.email}\r\n                onChange={handleChange}\r\n                error={errors && errors.email}\r\n                helperText={errors && errors.email ? errors.email : null}\r\n              />\r\n\r\n              <TextField\r\n                label=\"Date of Birth\"\r\n                type=\"date\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"dob\"\r\n                value={data.dob}\r\n                onChange={handleChange}\r\n                error={errors && errors.dob}\r\n                helperText={errors && errors.dob ? errors.dob : null}\r\n              />\r\n\r\n              <TextField\r\n                label=\"Phone\"\r\n                placeholder=\"Enter your phone number\"\r\n                type=\"text\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"phone\"\r\n                value={data.phone}\r\n                onChange={handleChange}\r\n                inputProps={{\r\n                  maxLength: 10,\r\n                }}\r\n                error={errors && errors.phone}\r\n                helperText={errors && errors.phone ? errors.phone : null}\r\n              />\r\n\r\n              <TextField\r\n                label=\"Current Address\"\r\n                placeholder=\"Enter your current address\"\r\n                type=\"text\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"address\"\r\n                value={data.address}\r\n                onChange={handleChange}\r\n                error={errors && errors.address}\r\n                helperText={errors && errors.address ? errors.address : null}\r\n              />\r\n\r\n              <FormControl\r\n                style={margin}\r\n                error={errors && errors.state ? true : false}\r\n              >\r\n                <InputLabel>Select required State</InputLabel>\r\n                <Select\r\n                  label=\"Select required State\"\r\n                  name=\"state\"\r\n                  onChange={handleChange}\r\n                  value={data.state}\r\n                >\r\n                  {states.states.map((item, id) => (\r\n                    <MenuItem value={item.state} key={id}>\r\n                      {item.state}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                <FormHelperText>\r\n                  {errors && errors.state ? errors.state : null}\r\n                </FormHelperText>\r\n              </FormControl>\r\n\r\n              <FormControl\r\n                style={margin}\r\n                error={errors && errors.district ? true : false}\r\n              >\r\n                <InputLabel>Select required District</InputLabel>\r\n                <Select\r\n                  label=\"Select required District\"\r\n                  inputProps={{ readOnly: enable }}\r\n                  name=\"district\"\r\n                  value={data.district}\r\n                  onChange={handleChange}\r\n                >\r\n                  {states.states[selectedStateIndex].districts.map(\r\n                    (item, id) => (\r\n                      <MenuItem key={id} value={item}>\r\n                        {item}\r\n                      </MenuItem>\r\n                    )\r\n                  )}\r\n                </Select>\r\n                <FormHelperText>\r\n                  {errors && errors.district ? errors.district : null}\r\n                </FormHelperText>\r\n              </FormControl>\r\n\r\n              <TextField\r\n                label=\"Pincode\"\r\n                placeholder=\"Enter your pincode\"\r\n                type=\"text\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"pincode\"\r\n                value={data.pincode}\r\n                onChange={handleChange}\r\n                inputProps={{\r\n                  maxLength: 6,\r\n                }}\r\n                error={errors && errors.pincode}\r\n                helperText={errors && errors.pincode ? errors.pincode : null}\r\n              />\r\n\r\n              <FormControl\r\n                style={margin}\r\n                error={errors && errors.bloodGroup ? true : false}\r\n              >\r\n                <InputLabel>Select required Blood Group</InputLabel>\r\n                <Select\r\n                  label=\"Select required Blood Group\"\r\n                  name=\"bloodGroup\"\r\n                  onChange={handleChange}\r\n                  value={data.bloodGroup}\r\n                >\r\n                  <MenuItem value={\"A+\"}>A+</MenuItem>\r\n                  <MenuItem value={\"A-\"}>A-</MenuItem>\r\n                  <MenuItem value={\"B+\"}>B+</MenuItem>\r\n                  <MenuItem value={\"B-\"}>B-</MenuItem>\r\n                  <MenuItem value={\"AB+\"}>AB+</MenuItem>\r\n                  <MenuItem value={\"AB-\"}>AB-</MenuItem>\r\n                  <MenuItem value={\"O+\"}>O+</MenuItem>\r\n                  <MenuItem value={\"O-\"}>O-</MenuItem>\r\n                </Select>\r\n                <FormHelperText>\r\n                  {errors && errors.bloodGroup ? errors.bloodGroup : null}\r\n                </FormHelperText>\r\n              </FormControl>\r\n\r\n              <TextField\r\n                label=\"Password\"\r\n                placeholder=\"Create your password\"\r\n                type=\"password\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"password\"\r\n                value={data.password}\r\n                onChange={handleChange}\r\n                error={errors && errors.password}\r\n                helperText={errors && errors.password ? errors.password : null}\r\n              />\r\n\r\n              <TextField\r\n                label=\"Confirm Password\"\r\n                placeholder=\"Confirm your password\"\r\n                type=\"password\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"cPassword\"\r\n                value={data.cPassword}\r\n                onChange={handleChange}\r\n                inputProps={{\r\n                  maxLength: 30,\r\n                }}\r\n                error={errors && errors.cPassword ? true : false}\r\n                helperText={\r\n                  errors && errors.cPassword ? errors.cPassword : null\r\n                }\r\n              />\r\n\r\n              <FormControlLabel\r\n                style={margin}\r\n                control={<Checkbox onChange={handleChange} name=\"terms\" />}\r\n                label={\r\n                  errors && errors.terms\r\n                    ? errors.terms\r\n                    : \"Accept Terms and Conditions\"\r\n                }\r\n              />\r\n              <Link\r\n                to=\"/terms\"\r\n                style={{ color: \"#E94364\", fontWeight: \"bold\" }}\r\n              >\r\n                (Click here for terms and condition)\r\n              </Link>\r\n\r\n              <Button\r\n                variant=\"contained\"\r\n                style={{ backgroundColor: \"#E94364\", marginTop: \"20px\" }}\r\n                type=\"submit\"\r\n                onClick={handleSubmit}\r\n              >\r\n                Sign up\r\n              </Button>\r\n\r\n              <Typography align=\"center\" style={margin}>\r\n                <Link to=\"/Login\">Already a user ? Sign in</Link>\r\n              </Typography>\r\n            </Paper>\r\n          </form>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default IndividualRegistration;\r\n","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\Auth\\HospitalRegistration.js",["332","333","334"],"import {\r\n  Grid,\r\n  Paper,\r\n  TextField,\r\n  Select,\r\n  MenuItem,\r\n  InputLabel,\r\n  FormControl,\r\n  Button,\r\n  FormControlLabel,\r\n  Checkbox,\r\n  Typography,\r\n  FormHelperText,\r\n  ButtonGroup,\r\n} from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport hospital from \"./images/hospital.jpg\";\r\nimport states from \"./states.json\";\r\nimport Joi from \"joi\";\r\nimport LoggedOutNavbar from \"../layouts/loggedoutNavbar\";\r\nimport axios from \"axios\";\r\nimport { logging } from \"../../redux/Actions/login\";\r\nimport Cookies from \"universal-cookie\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nfunction HospitalRegistration(props) {\r\n  const [data, setData] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    license: \"\",\r\n    phone: [\"\"],\r\n    address: \"\",\r\n    state: \"\",\r\n    district: \"\",\r\n    pincode: \"\",\r\n    password: \"\",\r\n    cPassword: \"\",\r\n    terms: false,\r\n  });\r\n\r\n  const [errors, setErrors] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    license: \"\",\r\n    phone: [\"\"],\r\n    address: \"\",\r\n    state: \"\",\r\n    district: \"\",\r\n    pincode: \"\",\r\n    password: \"\",\r\n    cPassword: \"\",\r\n    terms: \"\",\r\n  });\r\n\r\n  const reqBody = {\r\n    name: \"\",\r\n    email: \"\",\r\n    licenseNumber: \"\",\r\n    phone: [\"\"],\r\n    address: \"\",\r\n    state: \"\",\r\n    district: \"\",\r\n    pincode: \"\",\r\n    password: \"\",\r\n  };\r\n\r\n  const [maxLimit, setMaxLimit] = useState(\"Add a phone number\");\r\n  const [enable, setEnable] = useState(true);\r\n  const [visibility, setVisibility] = useState(\"visible\");\r\n  const [selectedStateIndex, setSelectedStateIndex] = useState(0);\r\n\r\n  const paperStyle = {\r\n    height: \"auto\",\r\n    width: \"450px\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    padding: \"30px\",\r\n  };\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const margin = { marginTop: \"15px\" };\r\n\r\n  // filling the form data\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    if (name === \"terms\") {\r\n      const updatedData = { ...data };\r\n      updatedData[e.target.name] = e.target.checked;\r\n      setData(updatedData);\r\n    } else {\r\n      if (name === \"state\") {\r\n        setEnable(false);\r\n        setSelectedStateIndex(\r\n          states.states.findIndex((item) => item.state === value)\r\n        );\r\n      }\r\n\r\n      const updatedData = { ...data };\r\n      updatedData[name] = value;\r\n      setData(updatedData);\r\n    }\r\n  };\r\n\r\n  const handleNumberChange = (e, id) => {\r\n    const updatedData = { ...data };\r\n    updatedData.phone[id] = e.target.value;\r\n    setData(updatedData);\r\n  };\r\n\r\n  const handleAdd = () => {\r\n    if (data.phone.length < 5) {\r\n      setData((prevState) => ({\r\n        ...prevState,\r\n        phone: [...prevState.phone, \"\"],\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    if (data.phone.length > 1) {\r\n      setVisibility(\"visible\");\r\n      setData((prevState) => {\r\n        const newState = { ...prevState };\r\n        newState.phone.pop();\r\n        return newState;\r\n      });\r\n    }\r\n  };\r\n\r\n  // submission and validation\r\n  const validate = () => {\r\n    const strongRegex = new RegExp(\r\n      \"^(?=.[a-z])(?=.[A-Z])(?=.[0-9])(?=.[!@#$%^&*])(?=.{8,})\"\r\n    );\r\n    const errors = {};\r\n\r\n    if (\r\n      !/^(?=.{5,20}$)(?![.])(?!.*[.]{2})[a-zA-Z0-9.]+(?<![.])$/.test(\r\n        data.name.trim()\r\n      )\r\n    ) {\r\n      errors.name = \" Username is either empty or invalid \";\r\n    }\r\n    if (!/^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[A-Za-z]+$/.test(data.email.trim())) {\r\n      errors.email = \"Email is either empty or invalid\";\r\n    }\r\n    if (\r\n      !/^(?=.{5,20}$)(?![.])(?!.*[.]{2})[a-zA-Z0-9.]+(?<![.])$/.test(\r\n        data.license.trim()\r\n      )\r\n    ) {\r\n      errors.license = \" License is either empty or invalid \";\r\n    }\r\n    if (data.address.trim() === \"\") {\r\n      errors.address = \"Address cannot be empty\";\r\n    }\r\n    if (data.state === \"\") {\r\n      errors.state = \"State cannot be empty\";\r\n    }\r\n    if (data.district === \"\") {\r\n      errors.district = \"District cannot be empty\";\r\n    }\r\n    if (!/^[1-9][0-9]{5}$/.test(data.pincode.trim())) {\r\n      errors.pincode = \"Invalid pincode format\";\r\n    }\r\n    if (!strongRegex.test(data.password.trim())) {\r\n      errors.password = \"Enter a stronger password\";\r\n    }\r\n    if (data.cPassword !== data.password || data.cPassword === \"\") {\r\n      errors.cPassword = \"Password is either empty or Passwords do not match\";\r\n    }\r\n    if (!data.terms) {\r\n      errors.terms = \"Please accept our terms and conditions\";\r\n    }\r\n    if (data.phone.length >= 1 && !data.phone[0]) {\r\n      console.log(\"Working error\");\r\n      errors.phone = \"wrong number\";\r\n    }\r\n    if (data.phone.length >= 2 && !data.phone[1]) {\r\n      console.log(\"Working error\");\r\n      errors.phone = \"wrong number\";\r\n    }\r\n    if (data.phone.length >= 3 && !data.phone[2]) {\r\n      console.log(\"Working error\");\r\n      errors.phone = \"wrong number\";\r\n    }\r\n    if (data.phone.length >= 4 && !data.phone[3]) {\r\n      console.log(\"Working error\");\r\n      errors.phone = \"wrong number\";\r\n    }\r\n    if (data.phone.length >= 5 && !data.phone[4]) {\r\n      console.log(\"Working error\");\r\n      errors.phone = \"wrong number\";\r\n    }\r\n\r\n    return Object.keys(errors).length === 0 ? null : errors;\r\n  };\r\n  const [touched, setTouched] = useState([false, false, false, false, false]);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log(data);\r\n    const errors = validate();\r\n    setTouched([true, true, true, true, true]);\r\n    console.log(errors);\r\n    setErrors(errors);\r\n    if (errors) return;\r\n    console.log(\"axios call here\");\r\n\r\n    reqBody.name = data.name;\r\n    reqBody.email = data.email;\r\n    reqBody.licenseNumber = data.license;\r\n    reqBody.phone = data.phone;\r\n    reqBody.address = data.address;\r\n    reqBody.state = data.state;\r\n    reqBody.district = data.district;\r\n    reqBody.pincode = data.pincode;\r\n    reqBody.password = data.password;\r\n\r\n    axios\r\n      .post(\"http://localhost:8080/registerhos\", reqBody)\r\n      .then(function (response) {\r\n        console.log(response);\r\n        if (response.headers.success) {\r\n          console.log(\"works\");\r\n          dispatch(\r\n            logging({\r\n              isLoggedIn: true,\r\n              userType: props.location.type,\r\n              userToken: response.data.userToken,\r\n              userId: response.data.userId,\r\n            })\r\n          );\r\n          const cookies = new Cookies();\r\n          cookies.set(\r\n            \"Auth\",\r\n            {\r\n              userType: response.data.userType,\r\n              userToken: response.data.userToken,\r\n              userId: response.data.userId,\r\n            },\r\n            { path: \"/\" }\r\n          );\r\n          history.push(\"/home\");\r\n        } else {\r\n          if (response.headers.error == \"Email is already taken\") {\r\n            setErrors((prevErrors) => ({\r\n              ...prevErrors,\r\n              email: response.headers.error,\r\n            }));\r\n          }\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        window.alert(error.message);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <LoggedOutNavbar />\r\n\r\n      <Grid container style={{ margin: \"20px auto\" }}>\r\n        <Grid item xs={6} container justify=\"center\" alignItems=\"center\">\r\n          <img src={hospital} alt=\"hospital\" style={{ maxWidth: \"100%\" }} />\r\n        </Grid>\r\n\r\n        <Grid item xs={6} container justify=\"center\" alignItems=\"center\">\r\n          <form>\r\n            <Paper style={paperStyle} elevation={5}>\r\n              <h2 style={{ marginTop: \"10px\" }} align=\"center\">\r\n                Hospital Registration\r\n              </h2>\r\n\r\n              <TextField\r\n                label=\"Name\"\r\n                placeholder=\"Enter your full name\"\r\n                type=\"text\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"name\"\r\n                value={data.name}\r\n                onChange={handleChange}\r\n                inputProps={{\r\n                  maxLength: 30,\r\n                }}\r\n                error={errors && errors.name ? true : false}\r\n                helperText={errors && errors.name ? errors.name : null}\r\n              />\r\n\r\n              <TextField\r\n                label=\"Email\"\r\n                placeholder=\"Enter your email\"\r\n                type=\"email\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"email\"\r\n                value={data.email}\r\n                onChange={handleChange}\r\n                error={errors && errors.email ? true : false}\r\n                helperText={errors && errors.email ? errors.email : null}\r\n              />\r\n\r\n              <TextField\r\n                label=\"License Number\"\r\n                placeholder=\"Enter your license number\"\r\n                type=\"text\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"license\"\r\n                value={data.license}\r\n                onChange={handleChange}\r\n                error={errors && errors.license ? true : false}\r\n                helperText={errors && errors.license ? errors.license : null}\r\n              />\r\n\r\n              {data.phone.map((val, idx) => (\r\n                <TextField\r\n                  label={`Phone-${idx + 1}`}\r\n                  placeholder=\"Enter your phone number\"\r\n                  type=\"text\"\r\n                  fullWidth\r\n                  style={margin}\r\n                  name={`phone${idx}`}\r\n                  value={val}\r\n                  onChange={(e) => {\r\n                    handleNumberChange(e, idx);\r\n                    setTouched((prevState) => {\r\n                      let newState = [...prevState];\r\n                      newState[idx] = true;\r\n                      return newState;\r\n                    });\r\n                  }}\r\n                  key={idx}\r\n                  inputProps={{\r\n                    maxLength: 10,\r\n                  }}\r\n                  error={!data.phone[idx] && touched[idx] ? true : false}\r\n                  helperText={\r\n                    !data.phone[idx] && touched[idx] ? errors.phone : \"\"\r\n                  }\r\n                />\r\n              ))}\r\n              <div>\r\n                <ButtonGroup variant=\"text\" color=\"default\" align=\"center\">\r\n                  {data.phone.length < 5 ? (\r\n                    <Button onClick={handleAdd}>{maxLimit}</Button>\r\n                  ) : null}\r\n                  {data.phone.length === 1 ? null : (\r\n                    <Button\r\n                      onClick={handleDelete}\r\n                      style={{ visibility: `${visibility}` }}\r\n                    >\r\n                      Delete phone number\r\n                    </Button>\r\n                  )}\r\n                </ButtonGroup>\r\n              </div>\r\n\r\n              <TextField\r\n                label=\"Registered Address\"\r\n                placeholder=\"Enter your registered address\"\r\n                type=\"text\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"address\"\r\n                value={data.address}\r\n                onChange={handleChange}\r\n                error={errors && errors.address ? true : false}\r\n                helperText={errors && errors.address ? errors.address : null}\r\n              />\r\n\r\n              <FormControl\r\n                style={margin}\r\n                error={errors && errors.state ? true : false}\r\n              >\r\n                <InputLabel>Select required State</InputLabel>\r\n                <Select\r\n                  label=\"Select required State\"\r\n                  name=\"state\"\r\n                  onChange={handleChange}\r\n                  value={data.state}\r\n                >\r\n                  {states.states.map((item, id) => (\r\n                    <MenuItem value={item.state} key={id}>\r\n                      {item.state}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                <FormHelperText>\r\n                  {errors && errors.state ? errors.state : null}\r\n                </FormHelperText>\r\n              </FormControl>\r\n\r\n              <FormControl\r\n                style={margin}\r\n                error={errors && errors.district ? true : false}\r\n              >\r\n                <InputLabel>Select required District</InputLabel>\r\n                <Select\r\n                  label=\"Select required District\"\r\n                  inputProps={{ readOnly: enable }}\r\n                  name=\"district\"\r\n                  value={data.district}\r\n                  onChange={handleChange}\r\n                >\r\n                  {states.states[selectedStateIndex].districts.map(\r\n                    (item, id) => (\r\n                      <MenuItem key={id} value={item}>\r\n                        {item}\r\n                      </MenuItem>\r\n                    )\r\n                  )}\r\n                </Select>\r\n                <FormHelperText>\r\n                  {errors && errors.district ? errors.district : null}\r\n                </FormHelperText>\r\n              </FormControl>\r\n\r\n              <TextField\r\n                label=\"Pincode\"\r\n                placeholder=\"Enter your pincode\"\r\n                type=\"text\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"pincode\"\r\n                value={data.pincode}\r\n                onChange={handleChange}\r\n                inputProps={{\r\n                  maxLength: 6,\r\n                }}\r\n                error={errors && errors.pincode ? true : false}\r\n                helperText={errors && errors.pincode ? errors.pincode : null}\r\n              />\r\n\r\n              <TextField\r\n                label=\"Password\"\r\n                placeholder=\"Create your password\"\r\n                type=\"password\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"password\"\r\n                value={data.password}\r\n                onChange={handleChange}\r\n                inputProps={{\r\n                  maxLength: 30,\r\n                }}\r\n                error={errors && errors.password ? true : false}\r\n                helperText={errors && errors.password ? errors.password : null}\r\n              />\r\n\r\n              <TextField\r\n                label=\"Confirm Password\"\r\n                placeholder=\"Confirm your password\"\r\n                type=\"password\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"cPassword\"\r\n                value={data.cPassword}\r\n                onChange={handleChange}\r\n                inputProps={{\r\n                  maxLength: 30,\r\n                }}\r\n                error={errors && errors.cPassword ? true : false}\r\n                helperText={\r\n                  errors && errors.cPassword ? errors.cPassword : null\r\n                }\r\n              />\r\n\r\n              <FormControlLabel\r\n                style={margin}\r\n                control={<Checkbox onChange={handleChange} name=\"terms\" />}\r\n                label={\r\n                  errors && errors.terms\r\n                    ? errors.terms\r\n                    : \"Accept Terms and Conditions\"\r\n                }\r\n              />\r\n              <Link to=\"/terms\" style={{ color: \"grey\", fontWeight: \"bold\" }}>\r\n                Click here for terms and condition\r\n              </Link>\r\n              <Button\r\n                variant=\"contained\"\r\n                style={{\r\n                  backgroundColor: \"#e33371\",\r\n                  marginTop: \"20px\",\r\n                }}\r\n                type=\"submit\"\r\n                onClick={handleSubmit}\r\n              >\r\n                Sign Up\r\n              </Button>\r\n\r\n              <Typography align=\"center\" style={margin}>\r\n                <Link to=\"/Login\">Already a user ? Sign in</Link>\r\n              </Typography>\r\n            </Paper>\r\n          </form>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default HospitalRegistration;\r\n","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\Auth\\BloodBankRegistration.js",["335","336"],"import {\r\n  Grid,\r\n  Paper,\r\n  TextField,\r\n  Select,\r\n  MenuItem,\r\n  InputLabel,\r\n  FormControl,\r\n  Button,\r\n  FormControlLabel,\r\n  Checkbox,\r\n  Typography,\r\n  ButtonGroup,\r\n  FormHelperText,\r\n} from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport bloodbank from \"./images/bloodbank.jpg\";\r\nimport states from \"./states.json\";\r\nimport LoggedOutNavbar from \"../layouts/loggedoutNavbar\";\r\nimport axios from \"axios\";\r\nimport { logging } from \"../../redux/Actions/login\";\r\nimport Cookies from \"universal-cookie\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nfunction BloodBankRegistration(props) {\r\n  const [data, setData] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    license: \"\",\r\n    phone: [\"\"],\r\n    address: \"\",\r\n    state: \"\",\r\n    district: \"\",\r\n    pincode: \"\",\r\n    password: \"\",\r\n    cPassword: \"\",\r\n    terms: false,\r\n  });\r\n\r\n  const [errors, setErrors] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    license: \"\",\r\n    phone: [\"\"],\r\n    address: \"\",\r\n    state: \"\",\r\n    district: \"\",\r\n    pincode: \"\",\r\n    password: \"\",\r\n    cPassword: \"\",\r\n    terms: \"\",\r\n  });\r\n\r\n  const reqBody = {\r\n    name: \"\",\r\n    email: \"\",\r\n    licenseNumber: \"\",\r\n    phone: [\"\"],\r\n    address: \"\",\r\n    state: \"\",\r\n    district: \"\",\r\n    pincode: \"\",\r\n    password: \"\",\r\n  };\r\n\r\n  const [maxLimit, setMaxLimit] = useState(\"Add a phone number\");\r\n  const [enable, setEnable] = useState(true);\r\n  const [visibility, setVisibility] = useState(\"visible\");\r\n  const [selectedStateIndex, setSelectedStateIndex] = useState(0);\r\n\r\n  const paperStyle = {\r\n    height: \"auto\",\r\n    width: \"450px\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    padding: \"30px\",\r\n  };\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const margin = { marginTop: \"15px\" };\r\n\r\n  // filling the form data\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    if (name === \"terms\") {\r\n      const updatedData = { ...data };\r\n      updatedData[e.target.name] = e.target.checked;\r\n      setData(updatedData);\r\n    } else {\r\n      if (name === \"state\") {\r\n        setEnable(false);\r\n        setSelectedStateIndex(\r\n          states.states.findIndex((item) => item.state === value)\r\n        );\r\n      }\r\n\r\n      const updatedData = { ...data };\r\n      updatedData[name] = value;\r\n      setData(updatedData);\r\n    }\r\n  };\r\n\r\n  const handleNumberChange = (e, id) => {\r\n    const updatedData = { ...data };\r\n    updatedData.phone[id] = e.target.value;\r\n    setData(updatedData);\r\n  };\r\n\r\n  const handleAdd = () => {\r\n    if (data.phone.length < 5) {\r\n      setData((prevState) => ({\r\n        ...prevState,\r\n        phone: [...prevState.phone, \"\"],\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    if (data.phone.length > 1) {\r\n      setVisibility(\"visible\");\r\n      setData((prevState) => {\r\n        const newState = { ...prevState };\r\n        newState.phone.pop();\r\n        return newState;\r\n      });\r\n    }\r\n  };\r\n\r\n  // submission and validation\r\n  const validate = () => {\r\n    const strongRegex = new RegExp(\r\n      \"^(?=.[a-z])(?=.[A-Z])(?=.[0-9])(?=.[!@#$%^&*])(?=.{8,})\"\r\n    );\r\n    const errors = {};\r\n\r\n    if (\r\n      !/^(?=.{5,20}$)(?![.])(?!.*[.]{2})[a-zA-Z0-9.]+(?<![.])$/.test(\r\n        data.name.trim()\r\n      )\r\n    ) {\r\n      errors.name = \" Username is either empty or invalid \";\r\n    }\r\n    if (!/^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[A-Za-z]+$/.test(data.email.trim())) {\r\n      errors.email = \"Email is either empty or invalid\";\r\n    }\r\n    if (\r\n      !/^(?=.{5,20}$)(?![.])(?!.*[.]{2})[a-zA-Z0-9.]+(?<![.])$/.test(\r\n        data.license.trim()\r\n      )\r\n    ) {\r\n      errors.license = \" License is either empty or invalid \";\r\n    }\r\n    if (data.address.trim() === \"\") {\r\n      errors.address = \"Address cannot be empty\";\r\n    }\r\n    if (data.state === \"\") {\r\n      errors.state = \"State cannot be empty\";\r\n    }\r\n    if (data.district === \"\") {\r\n      errors.district = \"District cannot be empty\";\r\n    }\r\n    if (!/^[1-9][0-9]{5}$/.test(data.pincode.trim())) {\r\n      errors.pincode = \"Invalid pincode format\";\r\n    }\r\n    if (!strongRegex.test(data.password.trim())) {\r\n      errors.password = \"Enter a stronger password\";\r\n    }\r\n    if (data.cPassword !== data.password || data.cPassword === \"\") {\r\n      errors.cPassword = \"Password is either empty or Passwords do not match\";\r\n    }\r\n    if (!data.terms) {\r\n      errors.terms = \"Please accept our terms and conditions\";\r\n    }\r\n    if (data.phone.length >= 1 && !data.phone[0]) {\r\n      console.log(\"Working error\");\r\n      errors.phone = \"wrong number\";\r\n    }\r\n    if (data.phone.length >= 2 && !data.phone[1]) {\r\n      console.log(\"Working error\");\r\n      errors.phone = \"wrong number\";\r\n    }\r\n    if (data.phone.length >= 3 && !data.phone[2]) {\r\n      console.log(\"Working error\");\r\n      errors.phone = \"wrong number\";\r\n    }\r\n    if (data.phone.length >= 4 && !data.phone[3]) {\r\n      console.log(\"Working error\");\r\n      errors.phone = \"wrong number\";\r\n    }\r\n    if (data.phone.length >= 5 && !data.phone[4]) {\r\n      console.log(\"Working error\");\r\n      errors.phone = \"wrong number\";\r\n    }\r\n\r\n    return Object.keys(errors).length === 0 ? null : errors;\r\n  };\r\n  const [touched, setTouched] = useState([false, false, false, false, false]);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log(data);\r\n    const errors = validate();\r\n    setTouched([true, true, true, true, true]);\r\n    console.log(errors);\r\n    setErrors(errors);\r\n    if (errors) return;\r\n    console.log(\"axios call here\");\r\n\r\n    reqBody.name = data.name;\r\n    reqBody.email = data.email;\r\n    reqBody.licenseNumber = data.license;\r\n    reqBody.phone = data.phone;\r\n    reqBody.address = data.address;\r\n    reqBody.state = data.state;\r\n    reqBody.district = data.district;\r\n    reqBody.pincode = data.pincode;\r\n    reqBody.password = data.password;\r\n\r\n    axios\r\n      .post(\"http://localhost:8080/registerbb\", reqBody)\r\n      .then(function (response) {\r\n        console.log(response);\r\n        if (response.headers.success) {\r\n          console.log(\"works\");\r\n          dispatch(\r\n            logging({\r\n              isLoggedIn: true,\r\n              userType: props.location.type,\r\n              userToken: response.data.userToken,\r\n              userId: response.data.userId,\r\n            })\r\n          );\r\n          const cookies = new Cookies();\r\n          cookies.set(\r\n            \"Auth\",\r\n            {\r\n              userType: response.data.userType,\r\n              userToken: response.data.userToken,\r\n              userId: response.data.userId,\r\n            },\r\n            { path: \"/\" }\r\n          );\r\n          history.push(\"/home\");\r\n        } else {\r\n          if (response.headers.error == \"Email is already taken\") {\r\n            setErrors((prevErrors) => ({\r\n              ...prevErrors,\r\n              email: response.headers.error,\r\n            }));\r\n          }\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        window.alert(error.message);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <LoggedOutNavbar />\r\n\r\n      <Grid container style={{ margin: \"20px auto\" }}>\r\n        <Grid item xs={6} container justify=\"center\" alignItems=\"center\">\r\n          <img src={bloodbank} alt=\"hospital\" style={{ maxWidth: \"100%\" }} />\r\n        </Grid>\r\n\r\n        <Grid item xs={6} container justify=\"center\" alignItems=\"center\">\r\n          <form>\r\n            <Paper style={paperStyle} elevation={5}>\r\n              <h2 style={{ marginTop: \"10px\" }} align=\"center\">\r\n                Blood Bank Registration\r\n              </h2>\r\n\r\n              <TextField\r\n                label=\"Name\"\r\n                placeholder=\"Enter your full name\"\r\n                type=\"text\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"name\"\r\n                value={data.name}\r\n                onChange={handleChange}\r\n                inputProps={{\r\n                  maxLength: 30,\r\n                }}\r\n                error={errors && errors.name ? true : false}\r\n                helperText={errors && errors.name ? errors.name : null}\r\n              />\r\n\r\n              <TextField\r\n                label=\"Email\"\r\n                placeholder=\"Enter your email\"\r\n                type=\"email\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"email\"\r\n                value={data.email}\r\n                onChange={handleChange}\r\n                error={errors && errors.email ? true : false}\r\n                helperText={errors && errors.email ? errors.email : null}\r\n              />\r\n\r\n              <TextField\r\n                label=\"License Number\"\r\n                placeholder=\"Enter your license number\"\r\n                type=\"text\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"license\"\r\n                value={data.license}\r\n                onChange={handleChange}\r\n                error={errors && errors.license ? true : false}\r\n                helperText={errors && errors.license ? errors.license : null}\r\n              />\r\n\r\n              {data.phone.map((val, idx) => (\r\n                <TextField\r\n                  label={`Phone-${idx + 1}`}\r\n                  placeholder=\"Enter your phone number\"\r\n                  type=\"text\"\r\n                  fullWidth\r\n                  style={margin}\r\n                  name={`phone${idx}`}\r\n                  value={val}\r\n                  onChange={(e) => {\r\n                    handleNumberChange(e, idx);\r\n                    setTouched((prevState) => {\r\n                      let newState = [...prevState];\r\n                      newState[idx] = true;\r\n                      return newState;\r\n                    });\r\n                  }}\r\n                  key={idx}\r\n                  inputProps={{\r\n                    maxLength: 10,\r\n                  }}\r\n                  error={!data.phone[idx] && touched[idx] ? true : false}\r\n                  helperText={\r\n                    !data.phone[idx] && touched[idx] ? errors.phone : \"\"\r\n                  }\r\n                />\r\n              ))}\r\n              <div>\r\n                <ButtonGroup variant=\"text\" color=\"default\" align=\"center\">\r\n                  {data.phone.length < 5 ? (\r\n                    <Button onClick={handleAdd}>{maxLimit}</Button>\r\n                  ) : null}\r\n                  {data.phone.length === 1 ? null : (\r\n                    <Button\r\n                      onClick={handleDelete}\r\n                      style={{ visibility: `${visibility}` }}\r\n                    >\r\n                      Delete phone number\r\n                    </Button>\r\n                  )}\r\n                </ButtonGroup>\r\n              </div>\r\n\r\n              <TextField\r\n                label=\"Registered Address\"\r\n                placeholder=\"Enter your registered address\"\r\n                type=\"text\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"address\"\r\n                value={data.address}\r\n                onChange={handleChange}\r\n                error={errors && errors.address ? true : false}\r\n                helperText={errors && errors.address ? errors.address : null}\r\n              />\r\n\r\n              <FormControl\r\n                style={margin}\r\n                error={errors && errors.state ? true : false}\r\n              >\r\n                <InputLabel>Select required State</InputLabel>\r\n                <Select\r\n                  label=\"Select required State\"\r\n                  name=\"state\"\r\n                  onChange={handleChange}\r\n                  value={data.state}\r\n                >\r\n                  {states.states.map((item, id) => (\r\n                    <MenuItem value={item.state} key={id}>\r\n                      {item.state}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                <FormHelperText>\r\n                  {errors && errors.state ? errors.state : null}\r\n                </FormHelperText>\r\n              </FormControl>\r\n\r\n              <FormControl\r\n                style={margin}\r\n                error={errors && errors.district ? true : false}\r\n              >\r\n                <InputLabel>Select required District</InputLabel>\r\n                <Select\r\n                  label=\"Select required District\"\r\n                  inputProps={{ readOnly: enable }}\r\n                  name=\"district\"\r\n                  value={data.district}\r\n                  onChange={handleChange}\r\n                >\r\n                  {states.states[selectedStateIndex].districts.map(\r\n                    (item, id) => (\r\n                      <MenuItem key={id} value={item}>\r\n                        {item}\r\n                      </MenuItem>\r\n                    )\r\n                  )}\r\n                </Select>\r\n                <FormHelperText>\r\n                  {errors && errors.district ? errors.district : null}\r\n                </FormHelperText>\r\n              </FormControl>\r\n\r\n              <TextField\r\n                label=\"Pincode\"\r\n                placeholder=\"Enter your pincode\"\r\n                type=\"text\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"pincode\"\r\n                value={data.pincode}\r\n                onChange={handleChange}\r\n                inputProps={{\r\n                  maxLength: 6,\r\n                }}\r\n                error={errors && errors.pincode ? true : false}\r\n                helperText={errors && errors.pincode ? errors.pincode : null}\r\n              />\r\n\r\n              <TextField\r\n                label=\"Password\"\r\n                placeholder=\"Create your password\"\r\n                type=\"password\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"password\"\r\n                value={data.password}\r\n                onChange={handleChange}\r\n                inputProps={{\r\n                  maxLength: 30,\r\n                }}\r\n                error={errors && errors.password ? true : false}\r\n                helperText={errors && errors.password ? errors.password : null}\r\n              />\r\n\r\n              <TextField\r\n                label=\"Confirm Password\"\r\n                placeholder=\"Confirm your password\"\r\n                type=\"password\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"cPassword\"\r\n                value={data.cPassword}\r\n                onChange={handleChange}\r\n                inputProps={{\r\n                  maxLength: 30,\r\n                }}\r\n                error={errors && errors.cPassword ? true : false}\r\n                helperText={\r\n                  errors && errors.cPassword ? errors.cPassword : null\r\n                }\r\n              />\r\n\r\n              <FormControlLabel\r\n                style={margin}\r\n                control={<Checkbox onChange={handleChange} name=\"terms\" />}\r\n                label={\r\n                  errors && errors.terms\r\n                    ? errors.terms\r\n                    : \"Accept Terms and Conditions\"\r\n                }\r\n              />\r\n              <Link to=\"/terms\" style={{ color: \"grey\", fontWeight: \"bold\" }}>\r\n                Click here for terms and condition\r\n              </Link>\r\n              <Button\r\n                variant=\"contained\"\r\n                style={{\r\n                  backgroundColor: \"#e33371\",\r\n                  marginTop: \"20px\",\r\n                }}\r\n                type=\"submit\"\r\n                onClick={handleSubmit}\r\n              >\r\n                Sign Up\r\n              </Button>\r\n\r\n              <Typography align=\"center\" style={margin}>\r\n                <Link to=\"/Login\">Already a user ? Sign in</Link>\r\n              </Typography>\r\n            </Paper>\r\n          </form>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default BloodBankRegistration;\r\n","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\Auth\\terms.js",[],"D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\Auth\\Test.js",["337","338","339","340","341","342","343"],"import {\r\n  Grid,\r\n  Paper,\r\n  TextField,\r\n  Select,\r\n  MenuItem,\r\n  InputLabel,\r\n  FormControl,\r\n  Button,\r\n  FormControlLabel,\r\n  Checkbox,\r\n  Typography,\r\n  ButtonGroup,\r\n} from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport hospital from \"./images/hospital.jpg\";\r\nimport states from \"./states.json\";\r\nimport Joi from \"joi\";\r\nimport LoggedOutNavbar from \"../layouts/loggedoutNavbar\";\r\nimport axios from \"axios\";\r\nimport logging from \"../../redux/Actions/login\";\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport registerHospital from \"../../redux/Actions/registerHospital\";\r\n\r\nfunction BloodBankRegistration(props) {\r\n  const [data, setData] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    license: \"\",\r\n    phone: [\"\"],\r\n    address: \"\",\r\n    state: \"\",\r\n    district: \"\",\r\n    pincode: \"\",\r\n    password: \"\",\r\n    cPassword: \"\",\r\n    terms: false,\r\n  });\r\n\r\n  const [errors, setError] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    license: \"\",\r\n    phone: [\"\"],\r\n    address: \"\",\r\n    state: \"\",\r\n    district: \"\",\r\n    pincode: \"\",\r\n    password: \"\",\r\n    cPassword: \"\",\r\n    terms: \"\",\r\n  });\r\n\r\n  const [enable, setEnable] = useState(true);\r\n  const [selectedStateIndex, setSelectedStateIndex] = useState(0);\r\n\r\n  const paperStyle = {\r\n    height: \"auto\",\r\n    width: \"450px\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    padding: \"30px\",\r\n  };\r\n\r\n  const margin = { marginTop: \"15px\" };\r\n\r\n  // filling the form data\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    if (name === \"terms\") {\r\n      const updatedData = { ...data };\r\n      updatedData[e.target.name] = e.target.checked;\r\n      setData(updatedData);\r\n    } else {\r\n      if (name === \"state\") {\r\n        setEnable(false);\r\n        setSelectedStateIndex(\r\n          states.states.findIndex((item) => item.state === value)\r\n        );\r\n      }\r\n\r\n      const updatedData = { ...data };\r\n      updatedData[name] = value;\r\n      setData(updatedData);\r\n    }\r\n  };\r\n\r\n  const handleNumberChange = (e, id) => {\r\n    const updatedData = { ...data };\r\n    updatedData.phone[id] = e.target.value;\r\n    setData(updatedData);\r\n  };\r\n\r\n  const handleAdd = () => {\r\n    if (data.phone.length < 5) {\r\n      setData((prevState) => ({\r\n        ...prevState,\r\n        phone: [...prevState.phone, \"\"],\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    if (data.phone.length > 1) {\r\n      setData((prevState) => {\r\n        const newState = { ...prevState };\r\n        newState.phone.pop();\r\n        return newState;\r\n      });\r\n    }\r\n  };\r\n\r\n  // submission and validation\r\n  const validate = () => {\r\n    const strongRegex = new RegExp(\r\n      \"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,})\"\r\n    );\r\n    const errors = {};\r\n\r\n    if (\r\n      !/^(?=.{5,20}$)(?![_.])(?!.*[_.]{2})[a-zA-Z0-9._]+(?<![_.])$/.test(\r\n        data.name.trim()\r\n      )\r\n    ) {\r\n      errors.name = \" Username is either empty or invalid \";\r\n    }\r\n    if (!/^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[A-Za-z]+$/.test(data.email.trim())) {\r\n      errors.email = \"Email is either empty or invalid\";\r\n    }\r\n    if (\r\n      !/^(?=.{5,20}$)(?![_.])(?!.*[_.]{2})[a-zA-Z0-9._]+(?<![_.])$/.test(\r\n        data.license.trim()\r\n      )\r\n    ) {\r\n      errors.license = \" License is either empty or invalid \";\r\n    }\r\n    if (data.address.trim() === \"\") {\r\n      errors.address = \"Address cannot be empty\";\r\n    }\r\n    if (data.state === \"\") {\r\n      errors.state = \"State cannot be empty\";\r\n    }\r\n    if (data.district === \"\") {\r\n      errors.district = \"District cannot be empty\";\r\n    }\r\n    if (!/^[1-9][0-9]{5}$/.test(data.pincode.trim())) {\r\n      errors.pincode = \"Invalid pincode format\";\r\n    }\r\n    if (!strongRegex.test(data.password.trim())) {\r\n      errors.password = \"Enter a stronger password\";\r\n    }\r\n    if (data.cPassword !== data.password || data.cPassword === \"\") {\r\n      errors.cPassword = \"Password is either empty or Passwords do not match\";\r\n    }\r\n    if (!data.terms) {\r\n      errors.terms = \"Please accept our terms and conditions\";\r\n    }\r\n    if (data.phone.length === 0) {\r\n      errors.phone = \"Phone number is empty somewhere\";\r\n    }\r\n\r\n    return Object.keys(errors).length === 0 ? null : errors;\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log(data);\r\n    const errors = validate();\r\n    console.log(errors);\r\n    setError(errors);\r\n    if (errors) return;\r\n    console.log(\"axios call here\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <LoggedOutNavbar />\r\n\r\n      <Grid container style={{ margin: \"20px auto\" }}>\r\n        <Grid item xs={6} container justify=\"center\" alignItems=\"center\">\r\n          <img src={hospital} alt=\"hospital\" style={{ maxWidth: \"100%\" }} />\r\n        </Grid>\r\n\r\n        <Grid item xs={6} container justify=\"center\" alignItems=\"center\">\r\n          <form>\r\n            <Paper style={paperStyle} elevation={5}>\r\n              <h2 style={{ marginTop: \"10px\" }} align=\"center\">\r\n                Hospital Registration\r\n              </h2>\r\n\r\n              <TextField\r\n                label=\"Name\"\r\n                placeholder=\"Enter your full name\"\r\n                type=\"text\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"name\"\r\n                value={data.name}\r\n                onChange={handleChange}\r\n                inputProps={{\r\n                  maxLength: 30,\r\n                }}\r\n                error={errors && errors.name ? true : false}\r\n                helperText={errors && errors.name ? errors.name : null}\r\n              />\r\n\r\n              <TextField\r\n                label=\"Email\"\r\n                placeholder=\"Enter your email\"\r\n                type=\"email\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"email\"\r\n                value={data.email}\r\n                onChange={handleChange}\r\n                error={errors && errors.email ? true : false}\r\n                helperText={errors && errors.email ? errors.email : null}\r\n              />\r\n\r\n              <TextField\r\n                label=\"License Number\"\r\n                placeholder=\"Enter your license number\"\r\n                type=\"text\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"license\"\r\n                value={data.license}\r\n                onChange={handleChange}\r\n                error={errors && errors.license ? true : false}\r\n                helperText={errors && errors.license ? errors.license : null}\r\n              />\r\n\r\n              {data.phone.map((val, idx) => (\r\n                <TextField\r\n                  label={`Phone-${idx + 1}`}\r\n                  placeholder=\"Enter your phone number\"\r\n                  type=\"text\"\r\n                  fullWidth\r\n                  style={margin}\r\n                  name={`phone${idx}`}\r\n                  value={val}\r\n                  onChange={(e) => {\r\n                    handleNumberChange(e, idx);\r\n                  }}\r\n                  key={idx}\r\n                  inputProps={{\r\n                    maxLength: 10,\r\n                  }}\r\n                  error={errors && errors.phone ? true : false}\r\n                  helperText={errors && errors.phone ? errors.phone : null}\r\n                />\r\n              ))}\r\n              <div>\r\n                <ButtonGroup variant=\"text\" color=\"default\" align=\"center\">\r\n                  {data.phone.length < 5 ? (\r\n                    <Button onClick={handleAdd}>Add a phone number</Button>\r\n                  ) : null}\r\n                  {data.phone.length === 1 ? null : (\r\n                    <Button onClick={handleDelete}>Delete phone number</Button>\r\n                  )}\r\n                </ButtonGroup>\r\n              </div>\r\n\r\n              <TextField\r\n                label=\"Registered Address\"\r\n                placeholder=\"Enter your registered address\"\r\n                type=\"text\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"address\"\r\n                value={data.address}\r\n                onChange={handleChange}\r\n                error={errors && errors.address ? true : false}\r\n                helperText={errors && errors.address ? errors.address : null}\r\n              />\r\n\r\n              <FormControl style={margin}>\r\n                <InputLabel>\r\n                  {errors && errors.state ? (\r\n                    <p style={{ color: \"#dc004e\" }}>{errors.state}</p>\r\n                  ) : (\r\n                    <span>State</span>\r\n                  )}\r\n                </InputLabel>\r\n                <Select\r\n                  name=\"state\"\r\n                  onChange={handleChange}\r\n                  value={data.state}\r\n                  error={errors && errors.state ? true : false}\r\n                >\r\n                  {states.states.map((item, id) => (\r\n                    <MenuItem value={item.state} key={id}>\r\n                      {item.state}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n\r\n              <FormControl style={margin}>\r\n                <InputLabel>\r\n                  {errors && errors.district ? (\r\n                    <p style={{ color: \"#dc004e\" }}>{errors.district}</p>\r\n                  ) : (\r\n                    <span>District</span>\r\n                  )}\r\n                </InputLabel>\r\n                <Select\r\n                  inputProps={{ readOnly: enable }}\r\n                  name=\"district\"\r\n                  onChange={handleChange}\r\n                  value={data.district}\r\n                  error={errors && errors.district ? true : false}\r\n                  helperText={\r\n                    errors && errors.district ? errors.district : null\r\n                  }\r\n                >\r\n                  {states.states[selectedStateIndex].districts.map(\r\n                    (item, id) => (\r\n                      <MenuItem value={item} key={id}>\r\n                        {item}\r\n                      </MenuItem>\r\n                    )\r\n                  )}\r\n                </Select>\r\n              </FormControl>\r\n\r\n              <TextField\r\n                label=\"Pincode\"\r\n                placeholder=\"Enter your pincode\"\r\n                type=\"text\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"pincode\"\r\n                value={data.pincode}\r\n                onChange={handleChange}\r\n                inputProps={{\r\n                  maxLength: 6,\r\n                }}\r\n                error={errors && errors.pincode ? true : false}\r\n                helperText={errors && errors.pincode ? errors.pincode : null}\r\n              />\r\n\r\n              <TextField\r\n                label=\"Password\"\r\n                placeholder=\"Create your password\"\r\n                type=\"password\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"password\"\r\n                value={data.password}\r\n                onChange={handleChange}\r\n                inputProps={{\r\n                  maxLength: 30,\r\n                }}\r\n                error={errors && errors.password ? true : false}\r\n                helperText={errors && errors.password ? errors.password : null}\r\n              />\r\n\r\n              <TextField\r\n                label=\"Confirm Password\"\r\n                placeholder=\"Confirm your password\"\r\n                type=\"password\"\r\n                fullWidth\r\n                style={margin}\r\n                name=\"cPassword\"\r\n                value={data.cPassword}\r\n                onChange={handleChange}\r\n                inputProps={{\r\n                  maxLength: 30,\r\n                }}\r\n                error={errors && errors.cPassword ? true : false}\r\n                helperText={\r\n                  errors && errors.cPassword ? errors.cPassword : null\r\n                }\r\n              />\r\n\r\n              <FormControlLabel\r\n                style={margin}\r\n                control={<Checkbox onChange={handleChange} name=\"terms\" />}\r\n                label={\r\n                  errors && errors.terms\r\n                    ? errors.terms\r\n                    : \"Accept Terms and Conditions\"\r\n                }\r\n              />\r\n              <Link to=\"/terms\" style={{ color: \"grey\", fontWeight: \"bold\" }}>\r\n                Click here for terms and condition\r\n              </Link>\r\n              <Button\r\n                variant=\"contained\"\r\n                style={{\r\n                  backgroundColor: \"#e33371\",\r\n                  marginTop: \"20px\",\r\n                }}\r\n                type=\"submit\"\r\n                onClick={handleSubmit}\r\n              >\r\n                Sign Up\r\n              </Button>\r\n\r\n              <Typography align=\"center\" style={margin}>\r\n                <Link to=\"/Login\">Already a user ? Sign in</Link>\r\n              </Typography>\r\n            </Paper>\r\n          </form>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default BloodBankRegistration;\r\n","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\home\\main.js",["344","345"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Typography, Box, Container, Grid } from \"@material-ui/core/\";\r\nimport { Navbar, Footer } from \"../../layouts\";\r\nimport ServiceCard from \"./serviceCard\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport logging from \"../../../redux/Actions/login\";\r\nimport IndividualServices from \"./services/indiServices\";\r\nimport BankServices from \"./services/BankServices\";\r\nimport HospitalServices from \"./services/HospitalServices\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  hero: {\r\n    backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url('https://unblast.com/wp-content/uploads/2020/04/Female-Doctor-Vector-Illustration.jpg')`,\r\n    height: \"600px\",\r\n    backgroundPosition: \"center\",\r\n    backgroundRepeat: \"no-repeat\",\r\n    backgroundSize: \"cover\",\r\n    position: \"relative\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    color: \"#fff\",\r\n    fontSize: \"4rem\",\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      height: 300,\r\n      fontSize: \"3em\",\r\n    },\r\n  },\r\n  blogsContainer: {\r\n    marginTop: theme.spacing(8),\r\n    marginBottom: theme.spacing(8),\r\n  },\r\n}));\r\n\r\nfunction Main() {\r\n  const classes = useStyles();\r\n  const loggedInState = useSelector((state) => state.loggedIn);\r\n  console.log(loggedInState);\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n\r\n      <div className=\"Home\">\r\n        <Box className={classes.hero}>\r\n          <Box>Red Bank</Box>\r\n        </Box>\r\n        <Container maxWidth=\"lg\" className={classes.blogsContainer}>\r\n          <Grid container spacing={8} justify=\"flex-start\">\r\n            <Grid item xs={12} align=\"center\">\r\n              <Typography variant=\"h4\">Services provided</Typography>\r\n            </Grid>\r\n\r\n            {loggedInState.userType === 1 ? (\r\n              <>\r\n                {IndividualServices.map((item, idx) => (\r\n                  <Grid item xs={12} sm={6} md={3}>\r\n                    <ServiceCard\r\n                      key={idx}\r\n                      img={item.image}\r\n                      name={item.name}\r\n                      descp={item.description}\r\n                      page={item.page}\r\n                    />\r\n                  </Grid>\r\n                ))}\r\n              </>\r\n            ) : (\r\n              <>\r\n                {loggedInState.userType === 3 ? (\r\n                  <>\r\n                    {BankServices.map((item, idx) => (\r\n                      <Grid item xs={12} sm={6} md={3}>\r\n                        <ServiceCard\r\n                          key={idx}\r\n                          img={item.image}\r\n                          name={item.name}\r\n                          descp={item.description}\r\n                          page={item.page}\r\n                        />\r\n                      </Grid>\r\n                    ))}\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    {HospitalServices.map((item, idx) => (\r\n                      <Grid item xs={12} sm={6} md={3}>\r\n                        <ServiceCard\r\n                          key={idx}\r\n                          img={item.image}\r\n                          name={item.name}\r\n                          descp={item.description}\r\n                          page={item.page}\r\n                        />\r\n                      </Grid>\r\n                    ))}\r\n                  </>\r\n                )}\r\n              </>\r\n            )}\r\n          </Grid>\r\n        </Container>\r\n      </div>\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\profile\\index.js",["346"],"import React from \"react\";\r\nimport { makeStyles, Container } from \"@material-ui/core\";\r\nimport Profile from \"./profile\";\r\nimport { Navbar, Footer } from \"../../layouts\";\r\nimport PageHeader from \"./pageHeader\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <PageHeader\r\n        title=\"My Profile\"\r\n        subtitle=\"Here you can view as well as edit your profile details. Some fields ( Name, Email, License number ) kept uneditable due to security purposes \"\r\n      />\r\n      <Container maxWidth=\"md\">\r\n        <Profile />\r\n      </Container>\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\findDonors\\FindDonors.js",["347","348","349"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  makeStyles,\r\n  Paper,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Divider,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  FormHelperText,\r\n} from \"@material-ui/core\";\r\nimport { Navbar, Footer } from \"../../../layouts\";\r\nimport statesData from \"../../../Auth/states.json\";\r\nimport Table from \"./useTable\";\r\nimport Joi from \"joi\";\r\nimport axios from \"axios\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    padding: theme.spacing(5),\r\n    width: \"550px\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  papers: {\r\n    width: \"100%\",\r\n\r\n    flexDirection: \"column\",\r\n    margin: \"auto\",\r\n    padding: theme.spacing(4),\r\n  },\r\n  formControl: {\r\n    marginTop: theme.spacing(3),\r\n    minWidth: 250,\r\n  },\r\n  tableContainer: {\r\n    marginTop: theme.spacing(9),\r\n    marginBottom: theme.spacing(3),\r\n  },\r\n  tables: {\r\n    padding: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nfunction FindDonors() {\r\n  const [data, setData] = useState({\r\n    state: \"\",\r\n    district: \"\",\r\n    pincode: \"\",\r\n    bloodGroup: \"\",\r\n    address: \"\",\r\n  });\r\n\r\n  const reqBody = {};\r\n  const loggedInState = useSelector((state) => state.loggedIn);\r\n  const [errors, setError] = useState({});\r\n  const [enable, setEnable] = useState(true);\r\n  const [selectedStateIndex, setSelectedStateIndex] = useState(0);\r\n  const [donorsList, setList] = useState([]);\r\n  const classes = useStyles();\r\n  const regex = /^[0-9]*$/;\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    if (name === \"state\") {\r\n      setEnable(false);\r\n      setSelectedStateIndex(\r\n        statesData.states.findIndex((item) => item.state === value)\r\n      );\r\n    }\r\n    const updatedData = { ...data };\r\n    updatedData[name] = value;\r\n    setData(updatedData);\r\n  };\r\n\r\n  // submission and validation\r\n  const validate = () => {\r\n    const errors = {};\r\n\r\n    if (data.address.trim() === \"\") {\r\n      errors.address = \"Address cannot be empty\";\r\n    }\r\n    if (data.bloodGroup === \"\") {\r\n      errors.bloodGroup = \"Blood Group cannot be empty\";\r\n    }\r\n    if (data.state === \"\") {\r\n      errors.state = \"State cannot be empty\";\r\n    }\r\n    if (data.district === \"\") {\r\n      errors.district = \"District cannot be empty\";\r\n    }\r\n\r\n    return Object.keys(errors).length === 0 ? null : errors;\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const errors = validate();\r\n    console.log(errors);\r\n    setError(errors);\r\n    if (errors) return;\r\n\r\n    reqBody.state = data.state;\r\n    reqBody.district = data.district;\r\n    reqBody.pincode = data.pincode;\r\n    reqBody.bloodGroup = data.bloodGroup;\r\n    reqBody.address = data.address;\r\n\r\n    axios\r\n      .post(\"http://localhost:8080/finddonors/donorslist\", reqBody, {\r\n        headers: {\r\n          Authorization: \"Bearer \" + loggedInState.userToken,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setList(response.data);\r\n      })\r\n      .catch();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <Paper square elevation={5} className={classes.papers}>\r\n        <Typography variant=\"h4\">Find Donor</Typography>\r\n        <Divider />\r\n        <Typography variant=\"h6\">\r\n          Here you can search any inidividual for blood donation. Fill the\r\n          parameters and click on search.\r\n        </Typography>\r\n      </Paper>\r\n      <Container maxWidth=\"lg\">\r\n        <Grid container justify=\"center\">\r\n          <Grid item>\r\n            <form onSubmit={handleSubmit}>\r\n              <Paper className={classes.paper} elevation={5}>\r\n                <FormControl\r\n                  variant=\"outlined\"\r\n                  className={classes.formControl}\r\n                  error={errors && errors.state ? true : false}\r\n                >\r\n                  <InputLabel>Select required State</InputLabel>\r\n                  <Select\r\n                    label=\"Select required State\"\r\n                    name=\"state\"\r\n                    onChange={handleChange}\r\n                    value={data.state}\r\n                  >\r\n                    {statesData.states.map((item, id) => (\r\n                      <MenuItem value={item.state} key={id}>\r\n                        {item.state}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                  <FormHelperText>\r\n                    {errors && errors.state ? errors.state : null}\r\n                  </FormHelperText>\r\n                </FormControl>\r\n\r\n                <FormControl\r\n                  variant=\"outlined\"\r\n                  className={classes.formControl}\r\n                  error={errors && errors.district ? true : false}\r\n                >\r\n                  <InputLabel>Select required District</InputLabel>\r\n                  <Select\r\n                    label=\"Select required District\"\r\n                    inputProps={{ readOnly: enable }}\r\n                    name=\"district\"\r\n                    value={data.district}\r\n                    onChange={handleChange}\r\n                  >\r\n                    {statesData.states[selectedStateIndex].districts.map(\r\n                      (item, id) => (\r\n                        <MenuItem key={id} value={item}>\r\n                          {item}\r\n                        </MenuItem>\r\n                      )\r\n                    )}\r\n                  </Select>\r\n                  <FormHelperText>\r\n                    {errors && errors.district ? errors.district : null}\r\n                  </FormHelperText>\r\n                </FormControl>\r\n\r\n                <TextField\r\n                  className={classes.formControl}\r\n                  label=\"Enter required Pincode\"\r\n                  type=\"text\"\r\n                  name=\"pincode\"\r\n                  value={data.pincode}\r\n                  variant=\"outlined\"\r\n                  onChange={(e) => {\r\n                    if (regex.test(e.target.value)) {\r\n                      handleChange(e);\r\n                    }\r\n                  }}\r\n                  inputProps={{ maxLength: 6 }}\r\n                  error={errors && errors.pincode ? true : false}\r\n                  helperText={errors && errors.pincode ? errors.pincode : null}\r\n                />\r\n\r\n                <FormControl\r\n                  variant=\"outlined\"\r\n                  className={classes.formControl}\r\n                  error={errors && errors.bloodGroup ? true : false}\r\n                >\r\n                  <InputLabel>Select required Blood Group</InputLabel>\r\n                  <Select\r\n                    label=\"Select required Blood Group\"\r\n                    name=\"bloodGroup\"\r\n                    onChange={handleChange}\r\n                    value={data.bloodGroup}\r\n                    error={errors && errors.bloodGroup ? true : false}\r\n                    helperText={\r\n                      errors && errors.bloodGroup ? errors.bloodGroup : null\r\n                    }\r\n                  >\r\n                    <MenuItem value={\"A+\"}>A+</MenuItem>\r\n                    <MenuItem value={\"A-\"}>A-</MenuItem>\r\n                    <MenuItem value={\"B+\"}>B+</MenuItem>\r\n                    <MenuItem value={\"B-\"}>B-</MenuItem>\r\n                    <MenuItem value={\"AB+\"}>AB+</MenuItem>\r\n                    <MenuItem value={\"AB-\"}>AB-</MenuItem>\r\n                    <MenuItem value={\"O+\"}>O+</MenuItem>\r\n                    <MenuItem value={\"O-\"}>O-</MenuItem>\r\n                  </Select>\r\n                  <FormHelperText>\r\n                    {errors && errors.bloodGroup ? errors.bloodGroup : null}\r\n                  </FormHelperText>\r\n                </FormControl>\r\n\r\n                <TextField\r\n                  className={classes.formControl}\r\n                  label=\"Add the venue for the invitation\"\r\n                  multiline\r\n                  rows={7}\r\n                  name=\"address\"\r\n                  value={data.address}\r\n                  onChange={handleChange}\r\n                  variant=\"outlined\"\r\n                  error={errors && errors.address}\r\n                  helperText={errors && errors.address ? errors.address : null}\r\n                />\r\n\r\n                <Button\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  className={classes.formControl}\r\n                >\r\n                  Search\r\n                </Button>\r\n              </Paper>\r\n            </form>\r\n          </Grid>\r\n          <Grid item xs={12} className={classes.tableContainer}>\r\n            {donorsList.length === 0 ? (\r\n              <h3 align=\"center\">Results will be displayed here</h3>\r\n            ) : (\r\n              <Table list={donorsList} formData={data} />\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default FindDonors;\r\n","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\buyBlood\\BuyBlood.js",["350"],"import React, { useState } from \"react\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  makeStyles,\r\n  Paper,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  TextField,\r\n  Divider,\r\n  Typography,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport { Navbar, Footer } from \"../../../layouts/\";\r\nimport statesData from \"../../../Auth/states.json\";\r\nimport Table from \"./useTable\";\r\nimport Joi from \"joi\";\r\nimport axios from \"axios\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    padding: theme.spacing(5),\r\n    width: \"550px\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  papers: {\r\n    width: \"100%\",\r\n\r\n    flexDirection: \"column\",\r\n    margin: \"auto\",\r\n    padding: theme.spacing(4),\r\n  },\r\n  formControl: {\r\n    marginTop: theme.spacing(3),\r\n    minWidth: 250,\r\n  },\r\n  tableContainer: {\r\n    marginTop: theme.spacing(9),\r\n    marginBottom: theme.spacing(3),\r\n  },\r\n  tables: {\r\n    padding: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nfunction FindDonors() {\r\n  const [data, setData] = useState({\r\n    state: \"\",\r\n    district: \"\",\r\n    pincode: \"\",\r\n    bg: \"\",\r\n    component: \"\",\r\n    units: \"\",\r\n  });\r\n\r\n  const [list, setList] = useState([]);\r\n  const loggedInState = useSelector((state) => state.loggedIn);\r\n  const [errors, setErrors] = useState({});\r\n  const [enable, setEnable] = useState(true);\r\n  const [selectedStateIndex, setSelectedStateIndex] = useState(0);\r\n  const classes = useStyles();\r\n  const regex = /^[0-9]*$/;\r\n\r\n  const schema = {\r\n    state: Joi.required(),\r\n    district: Joi.required(),\r\n    pincode: Joi.required(),\r\n    bg: Joi.required(),\r\n    component: Joi.string().required(),\r\n    units: Joi.number().required(),\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    if (name === \"state\") {\r\n      setEnable(false);\r\n      setSelectedStateIndex(\r\n        statesData.states.findIndex((item) => item.state === value)\r\n      );\r\n    }\r\n\r\n    const allErrors = { ...errors };\r\n    const errorMsg = validateProperty(e.target);\r\n    if (errorMsg) {\r\n      allErrors[name] = errorMsg;\r\n    } else {\r\n      delete allErrors[name];\r\n    }\r\n    const updatedData = { ...data };\r\n    updatedData[name] = value;\r\n    setData(updatedData);\r\n    setErrors(allErrors);\r\n  };\r\n\r\n  const validateProperty = ({ name, value }) => {\r\n    const inputField = { [name]: value };\r\n    const fieldSchema = Joi.object({ [name]: schema[name] });\r\n    const { error } = fieldSchema.validate(inputField);\r\n    return error ? error.details[0].message : null;\r\n  };\r\n\r\n  const validate = () => {\r\n    const formSchema = Joi.object(schema);\r\n    const { error } = formSchema.validate(data, {\r\n      abortEarly: false,\r\n    });\r\n\r\n    if (!error) return null;\r\n\r\n    const allErrors = {};\r\n    for (let err of error.details) {\r\n      allErrors[err.path[0]] = err.message;\r\n    }\r\n    return allErrors;\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log(data);\r\n  };\r\n\r\n  const forAxios = (e) => {\r\n    e.preventDefault();\r\n    const errors = validate();\r\n\r\n    setErrors({ errors: errors || {} });\r\n    if (errors) return;\r\n\r\n    axios\r\n      .post(\r\n        \"http://localhost:8080/buyblood/findbb\",\r\n        {\r\n          bloodGroup: data.bg,\r\n          component: data.component,\r\n          reqUnits: data.units,\r\n          state: data.state,\r\n          district: data.district,\r\n          pincode: data.pincode,\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: \"Bearer \" + loggedInState.userToken,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        // if (response.data.success) {\r\n        console.log(response);\r\n        setList(response.data);\r\n        // }\r\n      })\r\n      .catch();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <Paper square elevation={5} className={classes.papers}>\r\n        <Typography variant=\"h4\">Buy Blood</Typography>\r\n        <Divider />\r\n        <Typography variant=\"h6\">\r\n          Here you can search nearest blood bank and buy items as per your\r\n          requirement. Fill the parameters and click on search.\r\n        </Typography>\r\n      </Paper>\r\n      <Container maxWidth=\"lg\">\r\n        <Grid container justify=\"center\">\r\n          <Grid item>\r\n            <form onSubmit={handleSubmit}>\r\n              <Paper className={classes.paper} elevation={5}>\r\n                <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                  <InputLabel>Select required Blood Group *</InputLabel>\r\n                  <Select\r\n                    label=\"Select required Blood Group\"\r\n                    name=\"bg\"\r\n                    onChange={handleChange}\r\n                    value={data.bg}\r\n                    error={errors && errors.bg ? true : false}\r\n                    helperText={errors && errors.bg ? errors.bg : null}\r\n                  >\r\n                    <MenuItem value={\"A+\"}>A+</MenuItem>\r\n                    <MenuItem value={\"A-\"}>A-</MenuItem>\r\n                    <MenuItem value={\"B+\"}>B+</MenuItem>\r\n                    <MenuItem value={\"B-\"}>B-</MenuItem>\r\n                    <MenuItem value={\"AB+\"}>AB+</MenuItem>\r\n                    <MenuItem value={\"AB-\"}>AB-</MenuItem>\r\n                    <MenuItem value={\"O+\"}>O+</MenuItem>\r\n                    <MenuItem value={\"O-\"}>O-</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n\r\n                <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                  <InputLabel>Select Component *</InputLabel>\r\n                  <Select\r\n                    label=\"Select Component\"\r\n                    name=\"component\"\r\n                    onChange={handleChange}\r\n                    value={data.component}\r\n                    error={errors && errors.component ? true : false}\r\n                    helperText={\r\n                      errors && errors.component ? errors.component : null\r\n                    }\r\n                  >\r\n                    <MenuItem value={\"Blood\"}>Blood</MenuItem>\r\n                    <MenuItem value={\"Plasma\"}>Plasma</MenuItem>\r\n                    <MenuItem value={\"Platelets\"}>Platelets</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n\r\n                <TextField\r\n                  className={classes.formControl}\r\n                  label=\"Required Units *\"\r\n                  type=\"text\"\r\n                  name=\"units\"\r\n                  value={data.units}\r\n                  variant=\"outlined\"\r\n                  onChange={handleChange}\r\n                  inputProps={{ maxLength: 4 }}\r\n                  error={errors && errors.units ? true : false}\r\n                  helperText={errors && errors.units ? errors.units : null}\r\n                />\r\n                <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                  <InputLabel>Select your State</InputLabel>\r\n                  <Select\r\n                    name=\"state\"\r\n                    value={data.state}\r\n                    onChange={handleChange}\r\n                    label=\"Select your State\"\r\n                    error={errors && errors.state ? true : false}\r\n                    helperText={errors && errors.state ? errors.state : null}\r\n                  >\r\n                    {statesData.states.map((item, id) => (\r\n                      <MenuItem key={id} value={item.state}>\r\n                        {item.state}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n\r\n                <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                  <InputLabel>Select your District</InputLabel>\r\n                  <Select\r\n                    inputProps={{ readOnly: enable }}\r\n                    name=\"district\"\r\n                    value={data.district}\r\n                    onChange={handleChange}\r\n                    label=\"Select your District\"\r\n                    error={errors && errors.district ? true : false}\r\n                    helperText={\r\n                      errors && errors.district ? errors.district : null\r\n                    }\r\n                  >\r\n                    {statesData.states[selectedStateIndex].districts.map(\r\n                      (item, id) => (\r\n                        <MenuItem key={id} value={item}>\r\n                          {item}\r\n                        </MenuItem>\r\n                      )\r\n                    )}\r\n                  </Select>\r\n                </FormControl>\r\n\r\n                <TextField\r\n                  className={classes.formControl}\r\n                  label=\"Enter your Pincode\"\r\n                  type=\"text\"\r\n                  name=\"pincode\"\r\n                  value={data.pincode}\r\n                  variant=\"outlined\"\r\n                  onChange={(e) => {\r\n                    if (regex.test(e.target.value)) {\r\n                      handleChange(e);\r\n                    }\r\n                  }}\r\n                  inputProps={{ maxLength: 6 }}\r\n                  error={errors && errors.pincode ? true : false}\r\n                  helperText={errors && errors.pincode ? errors.pincode : null}\r\n                />\r\n\r\n                <Button\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  className={classes.formControl}\r\n                  disabled={validate() ? true : false}\r\n                  onClick={forAxios}\r\n                >\r\n                  Search\r\n                </Button>\r\n              </Paper>\r\n            </form>\r\n          </Grid>\r\n          <Grid item xs={12} className={classes.tableContainer}>\r\n            {list.length === 0 ? (\r\n              <h3 align=\"center\">Results will be displayed here</h3>\r\n            ) : (\r\n              <Table\r\n                list={list}\r\n                bg={data.bg}\r\n                component={data.component}\r\n                units={data.units}\r\n              />\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default FindDonors;\r\n","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\about\\about.js",["351","352"],"import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Typography,\r\n  Box,\r\n  Container,\r\n  Grid,\r\n  Card,\r\n  CardMedia,\r\n  TextField,\r\n  Paper,\r\n  Button,\r\n  Divider,\r\n} from \"@material-ui/core/\";\r\nimport { Navbar, Footer } from \"../../layouts\";\r\nimport axios from \"axios\";\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\r\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport BloodTable from \"./bloodCompatibilityTable\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  hero: {\r\n    backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url('https://elements-cover-images-0.imgix.net/6e855666-1764-4019-be9e-998505bd3fdf?auto=compress&crop=edges&fit=crop&fm=jpeg&h=630&w=1200&s=fffbff5628fab9da0e2697d748790e92')`,\r\n    height: \"600px\",\r\n    backgroundPosition: \"center\",\r\n    backgroundRepeat: \"no-repeat\",\r\n    backgroundSize: \"cover\",\r\n    position: \"relative\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    color: \"#fff\",\r\n    fontSize: \"4rem\",\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      height: 300,\r\n      fontSize: \"3em\",\r\n    },\r\n  },\r\n  blogsContainer: {\r\n    paddingTop: theme.spacing(3),\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  blogTitle: {\r\n    fontWeight: 800,\r\n    paddingBottom: theme.spacing(3),\r\n  },\r\n  card: {\r\n    maxWidth: \"100%\",\r\n  },\r\n}));\r\n\r\nfunction Home(props) {\r\n  const [message, addMsg] = useState({\r\n    subject: \"\",\r\n    message: \"\",\r\n  });\r\n  const [errors, setError] = useState({\r\n    subject: \"\",\r\n    message: \"\",\r\n  });\r\n  const loggedInState = useSelector((state) => state.loggedIn);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    const updatedData = { ...message };\r\n    updatedData[name] = value;\r\n    addMsg(updatedData);\r\n  };\r\n\r\n  const validate = () => {\r\n    const errors = {};\r\n\r\n    if (message.subject === \"\") {\r\n      errors.subject = \"Subject cannot be empty\";\r\n    } else if (message.message === \"\") {\r\n      errors.message = \"Message cannot be empty\";\r\n    }\r\n\r\n    return Object.keys(errors).length === 0 ? null : errors;\r\n  };\r\n\r\n  const handleClick = (e) => {\r\n    e.preventDefault();\r\n    console.log(message);\r\n    const errors = validate();\r\n    console.log(errors);\r\n    setError(errors);\r\n    if (errors) return;\r\n\r\n    axios\r\n      .post(\"http://localhost:8080/contactus/addmessage\", message, {\r\n        headers: {\r\n          Authorization: \"Bearer \" + loggedInState.userToken,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          console.log(response);\r\n          window.alert(\"Your message has been Submiited!\");\r\n        }\r\n      });\r\n  };\r\n\r\n  const user = props.location.user;\r\n  const classes = useStyles();\r\n  const paperStyle = {\r\n    display: \"flex\",\r\n    width: 580,\r\n    flexDirection: \"column\",\r\n    padding: \"30px\",\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Navbar user={user} />\r\n\r\n      <div className=\"Home\">\r\n        <Box className={classes.hero}>\r\n          <Box>About Us</Box>\r\n        </Box>\r\n        <Container maxWidth=\"lg\" className={classes.blogsContainer}>\r\n          <Grid container justify=\"center\" spacing={10}>\r\n            <Grid item xs={12} align=\"center\">\r\n              <Typography variant=\"h4\">About our Portal</Typography>\r\n              <Divider />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Typography\r\n                variant=\"h5\"\r\n                align=\"center\"\r\n                style={{ padding: \"10px\" }}\r\n              >\r\n                \"Rakt daan, Mahadaan\", You might've heard this slogan a number\r\n                of times in your life, and you even might've thought \"Maybe I\r\n                can donate blood too and that way, I'll save a life\". At the\r\n                same time, someone in a hospital within your walking distance is\r\n                in urgent need of blood with your blood group the hospital\r\n                forgot to restock that particular blood group. You can save that\r\n                patient's life, but you don't know that the patient exists or is\r\n                in need of blood. The hospital could've restocked the blood, but\r\n                they didn't know they were out of stock. Clearly, there's a gap.\r\n                We intend to bridge that with{\" \"}\r\n                <p\r\n                  style={{\r\n                    fontFamily: \"Montserrat-Regular\",\r\n                    color: \"red\",\r\n                    fontSize: \"30px\",\r\n                  }}\r\n                >\r\n                  RedBank\r\n                </p>\r\n                . {\"\\n\\n\\n\"}\r\n                RedBank serves as a Typographylatform to bridge the gap between\r\n                the blood donors and recipients and to reduce the efforts\r\n                required to find the right type of blood group. with redBank ,\r\n                hospitlas can easily view and manage their inventory, blood\r\n                banks can sell blood to other users and any user can nake a\r\n                request to all the active donors who are willing to donate their\r\n                blood to save a life.\r\n              </Typography>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} align=\"center\">\r\n              <Paper style={paperStyle} elevation={5}>\r\n                <Typography variant=\"h5\">Feel free to contact us </Typography>\r\n                <TextField\r\n                  style={{ marginTop: \"10px\" }}\r\n                  className={classes.formControl}\r\n                  label=\"Subject:\"\r\n                  type=\"text\"\r\n                  onChange={handleChange}\r\n                  name=\"subject\"\r\n                  value={message.subject}\r\n                  variant=\"outlined\"\r\n                  inputProps={{ maxLength: 20 }}\r\n                  error={errors && errors.subject ? true : false}\r\n                  helperText={errors && errors.subject ? errors.subject : null}\r\n                />\r\n                <TextField\r\n                  style={{ marginTop: \"10px\" }}\r\n                  className={classes.formControl}\r\n                  label=\"Send a Message\"\r\n                  multiline\r\n                  type=\"text\"\r\n                  onChange={handleChange}\r\n                  rows={7}\r\n                  name=\"message\"\r\n                  value={message.message}\r\n                  variant=\"outlined\"\r\n                  error={errors && errors.message ? true : false}\r\n                  helperText={errors && errors.message ? errors.message : null}\r\n                />\r\n                <Button style={{ marginTop: \"10px\" }} onClick={handleClick}>\r\n                  Submit feedback\r\n                </Button>\r\n              </Paper>\r\n            </Grid>\r\n            <Grid\r\n              container\r\n              className={classes.blogsContainer}\r\n              justify=\"center\"\r\n              spacing={10}\r\n            >\r\n              <Grid item xs={12} align=\"center\">\r\n                <Typography variant=\"h4\">Learn more about donation</Typography>\r\n                <Divider />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <Typography\r\n                  variant=\"h5\"\r\n                  align=\"center\"\r\n                  style={{ padding: \"20px\" }}\r\n                >\r\n                  Blood Compatibility Table\r\n                </Typography>\r\n                <BloodTable />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <Typography\r\n                  variant=\"h5\"\r\n                  align=\"center\"\r\n                  style={{ padding: \"20px\" }}\r\n                >\r\n                  FAQs\r\n                </Typography>\r\n                <Accordion>\r\n                  <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                    <Typography>\r\n                      How does the blood donation process work?\r\n                    </Typography>\r\n                  </AccordionSummary>\r\n                  <AccordionDetails>\r\n                    <Typography>\r\n                      Donating blood is a simple thing to do, but can make a big\r\n                      difference in the lives of others. The donation process\r\n                      from the time you arrive until the time you leave takes\r\n                      about an hour. The donation itself is only about 8-10\r\n                      minutes on average.\r\n                    </Typography>\r\n                  </AccordionDetails>\r\n                </Accordion>\r\n                <Accordion>\r\n                  <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                    <Typography>\r\n                      Will it hurt when you insert the needle?\r\n                    </Typography>\r\n                  </AccordionSummary>\r\n                  <AccordionDetails>\r\n                    <Typography>\r\n                      Only for a moment. Pinch the fleshy, soft underside of\r\n                      your arm. That pinch is similar to what you will feel when\r\n                      the needle is inserted.\r\n                    </Typography>\r\n                  </AccordionDetails>\r\n                </Accordion>\r\n                <Accordion>\r\n                  <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                    <Typography>\r\n                      How long does a blood donation take?\r\n                    </Typography>\r\n                  </AccordionSummary>\r\n                  <AccordionDetails>\r\n                    <Typography>\r\n                      The entire process takes about one hour and 15 minutes;\r\n                      the actual donation of a pint of whole blood unit takes\r\n                      eight to 10 minutes. However, the time varies slightly\r\n                      with each person depending on several factors including\r\n                      the donor’s health history and attendance at the blood\r\n                      drive.\r\n                    </Typography>\r\n                  </AccordionDetails>\r\n                </Accordion>\r\n                <Accordion>\r\n                  <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                    <Typography>How often can I donate blood?</Typography>\r\n                  </AccordionSummary>\r\n                  <AccordionDetails>\r\n                    <Typography>\r\n                      You must wait at least eight weeks (56 days) between\r\n                      donations of whole blood and 16 weeks (112 days) between\r\n                      Power Red donations. Platelet apheresis donors may give\r\n                      every 7 days up to 24 times per year. Regulations are\r\n                      different for those giving blood for themselves\r\n                      (autologous donors).\r\n                    </Typography>\r\n                  </AccordionDetails>\r\n                </Accordion>\r\n\r\n                <Accordion>\r\n                  <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                    <Typography>Who can donate blood?</Typography>\r\n                  </AccordionSummary>\r\n                  <AccordionDetails>\r\n                    <Typography>\r\n                      In most states, donors must be age 17 or older. Some\r\n                      states allow donation by 16-year-olds with a signed\r\n                      parental consent form. Donors must weigh at least 110\r\n                      pounds and be in good health. Additional eligibility\r\n                      criteria apply.\r\n                    </Typography>\r\n                  </AccordionDetails>\r\n                </Accordion>\r\n\r\n                <Accordion>\r\n                  <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                    <Typography>\r\n                      Are guests or kids allowed to come to blood drives or\r\n                      donation centers with a donor?\r\n                    </Typography>\r\n                  </AccordionSummary>\r\n                  <AccordionDetails>\r\n                    <Typography>\r\n                      During this coronavirus outbreak, the Red Cross is not\r\n                      allowing guests including children to enter a blood drive\r\n                      or center to ensure we can maintain social distancing as\r\n                      we adhere to new safety precautions.\r\n                    </Typography>\r\n                  </AccordionDetails>\r\n                </Accordion>\r\n\r\n                <Accordion>\r\n                  <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                    <Typography>\r\n                      How long will it take to replenish the pint of blood I\r\n                      donate?\r\n                    </Typography>\r\n                  </AccordionSummary>\r\n                  <AccordionDetails>\r\n                    <Typography>\r\n                      The plasma from your donation is replaced within about 24\r\n                      hours. Red cells need about four to six weeks for complete\r\n                      replacement. That’s why at least eight weeks are required\r\n                      between whole blood donations.\r\n                    </Typography>\r\n                  </AccordionDetails>\r\n                </Accordion>\r\n\r\n                <Accordion>\r\n                  <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                    <Typography>\r\n                      Why does the Red Cross ask so many personal questions when\r\n                      I give blood?\r\n                    </Typography>\r\n                  </AccordionSummary>\r\n                  <AccordionDetails>\r\n                    <Typography>\r\n                      The highest priorities of the Red Cross are the safety of\r\n                      the blood supply and our blood donors. Some individuals\r\n                      may be at risk of transferring communicable disease\r\n                      through blood donation due to exposure via travel or other\r\n                      activities or may encounter problems with blood donation\r\n                      due to their health. We ask these questions to ensure that\r\n                      it is safe for patients to receive your blood and to\r\n                      ensure that it is safe for you to donate blood that day.\r\n                    </Typography>\r\n                  </AccordionDetails>\r\n                </Accordion>\r\n\r\n                <Accordion>\r\n                  <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                    <Typography>\r\n                      Can donors wear a mask at a blood drive?\r\n                    </Typography>\r\n                  </AccordionSummary>\r\n                  <AccordionDetails>\r\n                    <Typography>\r\n                      In accordance with the updated CDC guidelines, beginning\r\n                      April 15, donors will be required to wear face masks at a\r\n                      blood drive or donation center. We encourage donors to\r\n                      bring their own face masks. If a donor does not have a\r\n                      mask, the Red Cross will provide one. If a donor does not\r\n                      want to wear a mask, we ask they postpone their donation\r\n                      for a later date\r\n                    </Typography>\r\n                  </AccordionDetails>\r\n                </Accordion>\r\n\r\n                <Accordion>\r\n                  <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                    <Typography>What is plasma?</Typography>\r\n                  </AccordionSummary>\r\n                  <AccordionDetails>\r\n                    <Typography>\r\n                      Plasma is the liquid portion of your blood. It helps with\r\n                      clotting and supports immunity. It contains antibodies\r\n                      that fight off infections, so those who have recovered\r\n                      from this new coronavirus will have antibodies in their\r\n                      blood plasma that help protect them against future\r\n                      infections.\r\n                    </Typography>\r\n                  </AccordionDetails>\r\n                </Accordion>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n      </div>\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\upcomingDrive\\UpcomingDrive.js",["353"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  makeStyles,\r\n  Paper,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  Divider,\r\n  Typography,\r\n  MenuItem,\r\n  TextField,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport { Navbar, Footer } from \"../../../layouts\";\r\nimport statesData from \"../../../Auth/states.json\";\r\nimport Table from \"./useTable\";\r\nimport Joi from \"joi\";\r\nimport axios from \"axios\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    padding: theme.spacing(5),\r\n    width: \"550px\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  papers: {\r\n    width: \"100%\",\r\n\r\n    flexDirection: \"column\",\r\n    margin: \"auto\",\r\n    padding: theme.spacing(4),\r\n  },\r\n  formControl: {\r\n    marginTop: theme.spacing(3),\r\n    minWidth: 250,\r\n  },\r\n  tableContainer: {\r\n    marginTop: theme.spacing(9),\r\n    marginBottom: theme.spacing(3),\r\n  },\r\n  tables: {\r\n    padding: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nfunction UpcomingDrive() {\r\n  const [data, setData] = useState({\r\n    state: \"\",\r\n    district: \"\",\r\n    pincode: \"\",\r\n  });\r\n\r\n  const [driveList, setState] = useState([]);\r\n\r\n  const loggedInState = useSelector((state) => state.loggedIn);\r\n  const [errors, setErrors] = useState({});\r\n  const [enable, setEnable] = useState(true);\r\n  const [selectedStateIndex, setSelectedStateIndex] = useState(0);\r\n  const classes = useStyles();\r\n\r\n  const schema = {\r\n    state: Joi.string().required(),\r\n    district: Joi.string().required(),\r\n    pincode: Joi.required(),\r\n  };\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    if (name === \"state\") {\r\n      setEnable(false);\r\n      setSelectedStateIndex(\r\n        statesData.states.findIndex((item) => item.state === value)\r\n      );\r\n    }\r\n\r\n    const allErrors = { ...errors };\r\n    const errorMsg = validateProperty(e.target);\r\n    if (errorMsg) {\r\n      allErrors[name] = errorMsg;\r\n    } else {\r\n      delete allErrors[name];\r\n    }\r\n    const updatedData = { ...data };\r\n    updatedData[name] = value;\r\n    setData(updatedData);\r\n    setErrors(allErrors);\r\n  };\r\n\r\n  const validateProperty = ({ name, value }) => {\r\n    const inputField = { [name]: value };\r\n    const fieldSchema = Joi.object({ [name]: schema[name] });\r\n    const { error } = fieldSchema.validate(inputField);\r\n    return error ? error.details[0].message : null;\r\n  };\r\n\r\n  const validate = () => {\r\n    const formSchema = Joi.object(schema);\r\n    const { error } = formSchema.validate(data, {\r\n      abortEarly: false,\r\n    });\r\n\r\n    if (!error) return null;\r\n\r\n    const allErrors = {};\r\n    for (let err of error.details) {\r\n      allErrors[err.path[0]] = err.message;\r\n    }\r\n    return allErrors;\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    axios\r\n      .post(\"http://localhost:8080/upcomingdrives/fetchdriveslist\", data, {\r\n        headers: {\r\n          Authorization: \"Bearer \" + loggedInState.userToken,\r\n        },\r\n      })\r\n      .then(function (response) {\r\n        console.log(response);\r\n        setState(response.data);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <Paper square elevation={5} className={classes.papers}>\r\n        <Typography variant=\"h4\">Find Upcoming Drives</Typography>\r\n        <Divider />\r\n        <Typography variant=\"h6\">\r\n          Here you can search upcoming blood donation drives. Fill the\r\n          parameters and click on search.\r\n        </Typography>\r\n      </Paper>\r\n      <Container maxWidth=\"lg\">\r\n        <Grid container justify=\"center\">\r\n          <Grid item>\r\n            <form onSubmit={handleSubmit}>\r\n              <Paper className={classes.paper} elevation={5}>\r\n                <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                  <InputLabel>Select your State</InputLabel>\r\n                  <Select\r\n                    name=\"state\"\r\n                    value={data.state}\r\n                    onChange={handleChange}\r\n                    label=\"Select your State\"\r\n                    error={errors && errors.state ? true : false}\r\n                    helperText={errors && errors.state ? errors.state : null}\r\n                  >\r\n                    {statesData.states.map((item, id) => (\r\n                      <MenuItem key={id} value={item.state}>\r\n                        {item.state}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n\r\n                <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                  <InputLabel>Select your District</InputLabel>\r\n                  <Select\r\n                    inputProps={{ readOnly: enable }}\r\n                    name=\"district\"\r\n                    value={data.district}\r\n                    onChange={handleChange}\r\n                    label=\"Select your District\"\r\n                    error={errors && errors.district ? true : false}\r\n                    helperText={\r\n                      errors && errors.district ? errors.district : null\r\n                    }\r\n                  >\r\n                    {statesData.states[selectedStateIndex].districts.map(\r\n                      (item, id) => (\r\n                        <MenuItem key={id} value={item}>\r\n                          {item}\r\n                        </MenuItem>\r\n                      )\r\n                    )}\r\n                  </Select>\r\n                </FormControl>\r\n\r\n                <TextField\r\n                  className={classes.formControl}\r\n                  label=\"Enter your Pincode\"\r\n                  type=\"text\"\r\n                  name=\"pincode\"\r\n                  value={data.pincode}\r\n                  variant=\"outlined\"\r\n                  onChange={handleChange}\r\n                  inputProps={{ maxLength: 6 }}\r\n                  error={errors && errors.pincode ? true : false}\r\n                  helperText={errors && errors.pincode ? errors.pincode : null}\r\n                />\r\n                <Button\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  className={classes.formControl}\r\n                  disabled={validate()}\r\n                >\r\n                  Search\r\n                </Button>\r\n              </Paper>\r\n            </form>\r\n          </Grid>\r\n          <Grid item xs={12} className={classes.tableContainer}>\r\n            {driveList.length === 0 ? (\r\n              <h3 align=\"center\">Results will be displayed here</h3>\r\n            ) : (\r\n              <Table list={driveList} />\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default UpcomingDrive;\r\n","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\myCommitments\\MyCommitments.js",["354","355"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  makeStyles,\r\n  Paper,\r\n  Typography,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport { Navbar, Footer } from \"../../../layouts\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport Table from \"./table\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    width: \"100%\",\r\n\r\n    flexDirection: \"column\",\r\n    margin: \"auto\",\r\n    padding: theme.spacing(4),\r\n  },\r\n  table: {\r\n    margin: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nfunction MyCommitments() {\r\n  const classes = useStyles();\r\n  const [commitmentsList, setList] = useState([]);\r\n  const loggedInState = useSelector((state) => state.loggedIn);\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"http://localhost:8080/commitment\", {\r\n        headers: {\r\n          Authorization: \"Bearer \" + loggedInState.userToken,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        // if (response.data.success) {\r\n        console.log(response);\r\n        setList(response.data);\r\n        // }\r\n      })\r\n      .catch();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <Paper square elevation={5} className={classes.paper}>\r\n        <Typography variant=\"h4\">My Commitments</Typography>\r\n        <Divider />\r\n        <Typography variant=\"h6\">\r\n          Here you can view all the types of donations you have done since your\r\n          registration\r\n        </Typography>\r\n      </Paper>\r\n      <Container maxWidth=\"xl\">\r\n        <Grid container justify=\"center\" className={classes.table}>\r\n          <Grid item xs={12}>\r\n            <Table list={commitmentsList} />\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MyCommitments;\r\n","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\buyBlood\\product.js",["356","357"],"import React from \"react\";\r\nimport { Navbar, Footer } from \"../../../layouts/\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  makeStyles,\r\n  Paper,\r\n  Typography,\r\n  Button,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    // position:'fixed',\r\n    width: \"100%\",\r\n\r\n    flexDirection: \"column\",\r\n    margin: \"auto\",\r\n    padding: theme.spacing(4),\r\n  },\r\n  typo: {\r\n    fontWeight: \"bold\",\r\n    padding: \"10px\",\r\n  },\r\n  table: {\r\n    margin: theme.spacing(10),\r\n    width: \"80%\",\r\n  },\r\n}));\r\n\r\n// function Product({ iota }) {\r\nconst Product = (props) => {\r\n  const { bg, component, price, units, bbId } = props.location;\r\n  const history = useHistory();\r\n  const loggedInState = useSelector((state) => state.loggedIn);\r\n\r\n  console.log(props);\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClosed = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    axios\r\n      .post(\r\n        \"http://localhost:8080/buyblood/confirmbuy\",\r\n        {\r\n          customerId: loggedInState.userId,\r\n          sellerId: bbId,\r\n          date: new Date().toISOString(),\r\n          bloodGroup: bg,\r\n          component: component,\r\n          price: price,\r\n          units: units,\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: \"Bearer \" + loggedInState.userToken,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          console.log(response);\r\n          handleClosed();\r\n          history.push(\"/home\");\r\n        }\r\n      })\r\n      .catch();\r\n  };\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <Paper square elevation={5} className={classes.paper}>\r\n        <Typography variant=\"h4\">Selected Product</Typography>\r\n        <Divider />\r\n        <Typography variant=\"h6\" style={{}}>\r\n          Details about the selected product, press Buy button to confirm your\r\n          order\r\n        </Typography>\r\n      </Paper>\r\n      <Container maxWidth=\"lg\">\r\n        <Grid\r\n          container\r\n          alignContent=\"center\"\r\n          justify=\"center\"\r\n          className={classes.table}\r\n        >\r\n          <Grid item xs={12} style={{}}>\r\n            <Paper align=\"center\" square style={{ padding: \"50px\" }}>\r\n              <Container className={classes.typo}>\r\n                <Typography className={classes.typo} variant=\"h6\">\r\n                  Blood Group : {bg}\r\n                </Typography>\r\n                <Typography className={classes.typo} variant=\"h6\">\r\n                  Component :{component}\r\n                </Typography>\r\n                <Typography className={classes.typo} variant=\"h6\">\r\n                  Units Required :{units}\r\n                </Typography>\r\n                <Typography className={classes.typo} variant=\"h6\">\r\n                  Total Amount to be paid :{price * units}\r\n                </Typography>\r\n                <Button\r\n                  className={classes.typo}\r\n                  type=\"button\"\r\n                  onClick={handleClickOpen}\r\n                  variant=\"contained\"\r\n                >\r\n                  Buy\r\n                </Button>\r\n                <Dialog\r\n                  open={open}\r\n                  onClose={handleClosed}\r\n                  aria-labelledby=\"alert-dialog-title\"\r\n                  aria-describedby=\"alert-dialog-description\"\r\n                >\r\n                  <DialogTitle id=\"alert-dialog-title\">\r\n                    {\"Are You Sure?\"}\r\n                  </DialogTitle>\r\n                  <DialogContent></DialogContent>\r\n                  <DialogActions>\r\n                    <Button onClick={handleClosed} color=\"primary\">\r\n                      No\r\n                    </Button>\r\n                    <Button\r\n                      color=\"primary\"\r\n                      onClick={(e) => {\r\n                        handleSubmit();\r\n                      }}\r\n                      autoFocus\r\n                    >\r\n                      Yes\r\n                    </Button>\r\n                  </DialogActions>\r\n                </Dialog>\r\n              </Container>\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n\r\n      <Footer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Product;\r\n","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\myPurchases\\MyPurchases.js",["358"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  makeStyles,\r\n  Paper,\r\n  Typography,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport { Navbar, Footer } from \"../../../layouts\";\r\nimport axios from \"axios\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport Table from \"./table\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    width: \"100%\",\r\n\r\n    flexDirection: \"column\",\r\n    margin: \"auto\",\r\n    padding: theme.spacing(4),\r\n  },\r\n  table: {\r\n    margin: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nfunction MyPurchase() {\r\n  const [purchase, setList] = useState([]);\r\n  const loggedInState = useSelector((state) => state.loggedIn);\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"http://localhost:8080/transactions/fetchpurchaseslist\", {\r\n        headers: {\r\n          Authorization: \"Bearer \" + loggedInState.userToken,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        // if (response.data.success) {\r\n        console.log(response);\r\n        setList(response.data);\r\n        // }\r\n      })\r\n      .catch();\r\n  }, []);\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <Paper square elevation={5} className={classes.paper}>\r\n        <Typography variant=\"h4\">My Purchases</Typography>\r\n        <Divider />\r\n        <Typography variant=\"h6\">\r\n          Here you can view all the purchases you have done since your\r\n          registration\r\n        </Typography>\r\n      </Paper>\r\n      <Container maxWidth=\"xl\">\r\n        <Grid container justify=\"center\" className={classes.table}>\r\n          <Grid item xs={12}>\r\n            <Table list={purchase} />\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MyPurchase;\r\n","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\activeDonorReq\\ActiveDonorReq.js",["359","360","361"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  makeStyles,\r\n  Paper,\r\n  Typography,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport { Navbar, Footer } from \"../../../layouts\";\r\nimport axios from \"axios\";\r\n\r\nimport Table from \"./useTable\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    width: \"100%\",\r\n\r\n    flexDirection: \"column\",\r\n    margin: \"auto\",\r\n    padding: theme.spacing(4),\r\n  },\r\n  table: {\r\n    margin: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nfunction FindDonors() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <Paper square elevation={5} className={classes.paper}>\r\n        <Typography variant=\"h4\">My Donation Request</Typography>\r\n        <Divider />\r\n        <Typography variant=\"h6\">\r\n          Here you can view all your sent request for donors\r\n        </Typography>\r\n      </Paper>\r\n      <Container maxWidth=\"xl\">\r\n        <Grid container justify=\"center\" className={classes.table}>\r\n          <Grid item xs={12}>\r\n            <Table />\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default FindDonors;\r\n","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\conductDrive\\conductDrive.js",["362","363","364","365","366"],"import React, { useState } from \"react\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  makeStyles,\r\n  Paper,\r\n  FormControl,\r\n  Divider,\r\n  Typography,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  TextField,\r\n  Button,\r\n  FormHelperText,\r\n} from \"@material-ui/core\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport { Navbar, Footer } from \"../../../layouts\";\r\nimport statesData from \"../../../Auth/states.json\";\r\nimport Joi from \"joi\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport axios from \"axios\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    padding: theme.spacing(5),\r\n    width: \"650px\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  papers: {\r\n    width: \"100%\",\r\n\r\n    flexDirection: \"column\",\r\n    margin: \"auto\",\r\n    padding: theme.spacing(4),\r\n  },\r\n  formControl: {\r\n    marginTop: theme.spacing(3),\r\n    minWidth: 250,\r\n  },\r\n  tableContainer: {\r\n    marginTop: theme.spacing(9),\r\n    marginBottom: theme.spacing(3),\r\n  },\r\n  tables: {\r\n    padding: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nfunction ConductDrive() {\r\n  const [data, setData] = useState({\r\n    bloodGroups: [],\r\n    address: \"\",\r\n    state: \"\",\r\n    district: \"\",\r\n    pincode: \"\",\r\n    startTime: \"\",\r\n    startDate: \"\",\r\n    endTime: \"\",\r\n    endDate: \"\",\r\n    message: \"\",\r\n  });\r\n\r\n  const reqBody = {\r\n    bloodGroups: [],\r\n    address: \"\",\r\n    state: \"\",\r\n    district: \"\",\r\n    pincode: \"\",\r\n    startTimeStamp: \"\",\r\n    endTimeStamp: \"\",\r\n    message: \"\",\r\n  };\r\n\r\n  const regex = /^[0-9]*$/;\r\n\r\n  const loggedInState = useSelector((state) => state.loggedIn);\r\n  const [errors, setError] = useState({});\r\n  const [enable, setEnable] = useState(true);\r\n  const [selectedStateIndex, setSelectedStateIndex] = useState(0);\r\n  const [open, setOpen] = React.useState(false);\r\n  const classes = useStyles();\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    if (name === \"state\") {\r\n      setEnable(false);\r\n      setSelectedStateIndex(\r\n        statesData.states.findIndex((item) => item.state === value)\r\n      );\r\n    }\r\n    const updatedData = { ...data };\r\n    updatedData[name] = value;\r\n    setData(updatedData);\r\n  };\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClosed = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const validate = () => {\r\n    const errors = {};\r\n    const currDate = new Date();\r\n\r\n    if (data.address.trim() === \"\") {\r\n      errors.address = \"Address cannot be empty\";\r\n    }\r\n    if (data.bloodGroups.length === 0) {\r\n      errors.bloodGroups = \"Blood Group cannot be empty\";\r\n    }\r\n    if (data.state === \"\") {\r\n      errors.state = \"State cannot be empty\";\r\n    }\r\n    if (data.district === \"\") {\r\n      errors.district = \"District cannot be empty\";\r\n    }\r\n    if (data.pincode === \"\") {\r\n      errors.pincode = \"Pincode cannot be empty\";\r\n    }\r\n    if (data.startTime === \"\") {\r\n      errors.startTime = \"Start Time cannot be empty\";\r\n    }\r\n    if (data.endTime === \"\" || data.endTime < data.startTime) {\r\n      errors.endTime = \"End Time cannot be less than start time\";\r\n    }\r\n    if (data.startDate === \"\" || new Date(data.startDate) < currDate) {\r\n      errors.startDate = \"Invalid Date\";\r\n    }\r\n    if (\r\n      data.endDate === \"\" ||\r\n      new Date(data.endDate) < new Date(data.startDate)\r\n    ) {\r\n      errors.endDate = \"End Date cannot be less than Start Date\";\r\n    }\r\n\r\n    return Object.keys(errors).length === 0 ? null : errors;\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const errors = validate();\r\n    console.log(errors);\r\n    setError(errors);\r\n    if (errors) return;\r\n\r\n    reqBody.bloodGroups = data.bloodGroups;\r\n    reqBody.address = data.address;\r\n    reqBody.state = data.state;\r\n    reqBody.district = data.district;\r\n    reqBody.pincode = data.pincode;\r\n    reqBody.startTimeStamp = data.startDate + \"T\" + data.startTime + \":00.00\";\r\n    reqBody.endTimeStamp = data.endDate + \"T\" + data.endTime + \":00.00\";\r\n    reqBody.message = data.message;\r\n\r\n    axios\r\n      .post(\"http://localhost:8080/conductadrive/savedrivedetails\", reqBody, {\r\n        headers: {\r\n          Authorization: \"Bearer \" + loggedInState.userToken,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        // if (response.data.success) {\r\n        window.alert(\r\n          \"Drive has been initiated, check My Drives sections for more details\"\r\n        );\r\n        // }\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <Paper square elevation={5} className={classes.papers}>\r\n        <Typography variant=\"h4\">Conduct Blood Donation Drive</Typography>\r\n        <Divider />\r\n        <Typography variant=\"h6\">\r\n          Here you can orgainze a Blood Donation drive and send notification to\r\n          eligible donors. They will recive all the necessary details filled\r\n          here for the drive. Fields with \"*\" are mandatory.\r\n        </Typography>\r\n      </Paper>\r\n      <Container maxWidth=\"lg\">\r\n        <Grid container justify=\"center\">\r\n          <Grid item>\r\n            <form onSubmit={handleSubmit}>\r\n              <Paper className={classes.paper} elevation={5}>\r\n                <FormControl\r\n                  variant=\"outlined\"\r\n                  className={classes.formControl}\r\n                  error={errors && errors.bloodGroups ? true : false}\r\n                >\r\n                  <InputLabel>Select required Blood Group</InputLabel>\r\n                  <Select\r\n                    multiple\r\n                    label=\"Select required Blood Group\"\r\n                    name=\"bloodGroups\"\r\n                    onChange={handleChange}\r\n                    value={data.bloodGroups}\r\n                    error={errors && errors.bloodGroups ? true : false}\r\n                    helperText={\r\n                      errors && errors.bloodGroups ? errors.bloodGroups : null\r\n                    }\r\n                  >\r\n                    <MenuItem value={\"A+\"}>A+</MenuItem>\r\n                    <MenuItem value={\"A-\"}>A-</MenuItem>\r\n                    <MenuItem value={\"B+\"}>B+</MenuItem>\r\n                    <MenuItem value={\"B-\"}>B-</MenuItem>\r\n                    <MenuItem value={\"AB+\"}>AB+</MenuItem>\r\n                    <MenuItem value={\"AB-\"}>AB-</MenuItem>\r\n                    <MenuItem value={\"O+\"}>O+</MenuItem>\r\n                    <MenuItem value={\"O-\"}>O-</MenuItem>\r\n                  </Select>\r\n                  <FormHelperText>\r\n                    {errors && errors.bloodGroups ? errors.bloodGroups : null}\r\n                  </FormHelperText>\r\n                </FormControl>\r\n\r\n                <TextField\r\n                  className={classes.formControl}\r\n                  label=\"Enter your Address\"\r\n                  type=\"text\"\r\n                  name=\"address\"\r\n                  value={data.address}\r\n                  variant=\"outlined\"\r\n                  onChange={handleChange}\r\n                  error={errors && errors.address}\r\n                  helperText={errors && errors.address ? errors.address : null}\r\n                />\r\n                <FormControl\r\n                  variant=\"outlined\"\r\n                  style={{ marginTop: \"20px\" }}\r\n                  error={errors && errors.state ? true : false}\r\n                >\r\n                  <InputLabel>Select required State</InputLabel>\r\n                  <Select\r\n                    label=\"Select required State\"\r\n                    name=\"state\"\r\n                    onChange={handleChange}\r\n                    value={data.state}\r\n                  >\r\n                    {statesData.states.map((item, id) => (\r\n                      <MenuItem value={item.state} key={id}>\r\n                        {item.state}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                  <FormHelperText>\r\n                    {errors && errors.state ? errors.state : null}\r\n                  </FormHelperText>\r\n                </FormControl>\r\n\r\n                <FormControl\r\n                  variant=\"outlined\"\r\n                  style={{ marginTop: \"20px\" }}\r\n                  error={errors && errors.district ? true : false}\r\n                >\r\n                  <InputLabel>Select required District</InputLabel>\r\n                  <Select\r\n                    label=\"Select required District\"\r\n                    inputProps={{ readOnly: enable }}\r\n                    name=\"district\"\r\n                    value={data.district}\r\n                    onChange={handleChange}\r\n                  >\r\n                    {statesData.states[selectedStateIndex].districts.map(\r\n                      (item, id) => (\r\n                        <MenuItem key={id} value={item}>\r\n                          {item}\r\n                        </MenuItem>\r\n                      )\r\n                    )}\r\n                  </Select>\r\n                  <FormHelperText>\r\n                    {errors && errors.district ? errors.district : null}\r\n                  </FormHelperText>\r\n                </FormControl>\r\n\r\n                <TextField\r\n                  style={{ marginTop: \"20px\" }}\r\n                  label=\"Enter required Pincode\"\r\n                  type=\"text\"\r\n                  name=\"pincode\"\r\n                  value={data.pincode}\r\n                  variant=\"outlined\"\r\n                  onChange={(e) => {\r\n                    if (regex.test(e.target.value)) {\r\n                      handleChange(e);\r\n                    }\r\n                  }}\r\n                  inputProps={{ maxLength: 6 }}\r\n                  error={errors && errors.pincode ? true : false}\r\n                  helperText={errors && errors.pincode ? errors.pincode : null}\r\n                />\r\n\r\n                <InputLabel\r\n                  style={{ marginTop: \"20px\" }}\r\n                  error={errors && errors.startDate}\r\n                >\r\n                  Start Date\r\n                </InputLabel>\r\n                <TextField\r\n                  type=\"date\"\r\n                  name=\"startDate\"\r\n                  value={data.startDate}\r\n                  variant=\"outlined\"\r\n                  onChange={handleChange}\r\n                  inputProps={{ maxLength: 6 }}\r\n                  error={errors && errors.startDate}\r\n                  helperText={\r\n                    errors && errors.startDate ? errors.startDate : null\r\n                  }\r\n                />\r\n\r\n                <InputLabel\r\n                  style={{ marginTop: \"20px\" }}\r\n                  error={errors && errors.endDate}\r\n                >\r\n                  End Date\r\n                </InputLabel>\r\n                <TextField\r\n                  type=\"date\"\r\n                  name=\"endDate\"\r\n                  value={data.endDate}\r\n                  variant=\"outlined\"\r\n                  onChange={handleChange}\r\n                  inputProps={{ maxLength: 6 }}\r\n                  error={errors && errors.endDate}\r\n                  helperText={errors && errors.endDate ? errors.endDate : null}\r\n                />\r\n\r\n                <InputLabel\r\n                  style={{ marginTop: \"20px\" }}\r\n                  error={errors && errors.startTime}\r\n                >\r\n                  Start Time\r\n                </InputLabel>\r\n                <TextField\r\n                  type=\"time\"\r\n                  name=\"startTime\"\r\n                  value={data.startTime}\r\n                  variant=\"outlined\"\r\n                  onChange={handleChange}\r\n                  inputProps={{ maxLength: 6 }}\r\n                  error={errors && errors.startTime}\r\n                  helperText={\r\n                    errors && errors.startTime ? errors.startTime : null\r\n                  }\r\n                />\r\n\r\n                <InputLabel\r\n                  style={{ marginTop: \"20px\" }}\r\n                  error={errors && errors.endTime}\r\n                >\r\n                  End Time\r\n                </InputLabel>\r\n                <TextField\r\n                  type=\"time\"\r\n                  name=\"endTime\"\r\n                  value={data.endTime}\r\n                  variant=\"outlined\"\r\n                  onChange={handleChange}\r\n                  inputProps={{ maxLength: 6 }}\r\n                  error={errors && errors.endTime}\r\n                  helperText={errors && errors.endTime ? errors.endTime : null}\r\n                />\r\n\r\n                <TextField\r\n                  className={classes.formControl}\r\n                  label=\"Send a Message\"\r\n                  multiline\r\n                  rows={7}\r\n                  name=\"message\"\r\n                  value={data.message}\r\n                  onChange={handleChange}\r\n                  variant=\"outlined\"\r\n                  error={errors && errors.message}\r\n                  helperText={errors && errors.message ? errors.message : null}\r\n                />\r\n\r\n                <Button\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  className={classes.formControl}\r\n                >\r\n                  Send Notification\r\n                </Button>\r\n                <Dialog\r\n                  open={open}\r\n                  onClose={handleClosed}\r\n                  aria-labelledby=\"alert-dialog-title\"\r\n                  aria-describedby=\"alert-dialog-description\"\r\n                >\r\n                  <DialogTitle id=\"alert-dialog-title\">\r\n                    {\"Are You Sure, you want to logout?\"}\r\n                  </DialogTitle>\r\n                  <DialogContent></DialogContent>\r\n                  <DialogActions>\r\n                    <Button onClick={handleClosed} color=\"primary\">\r\n                      No\r\n                    </Button>\r\n                    <Button color=\"primary\" autoFocus>\r\n                      Yes\r\n                    </Button>\r\n                  </DialogActions>\r\n                </Dialog>\r\n              </Paper>\r\n            </form>\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ConductDrive;\r\n","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\myInventory\\myInventory.js",["367"],"import React, { useState } from \"react\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  makeStyles,\r\n  Paper,\r\n  Typography,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport { Navbar, Footer } from \"../../../layouts\";\r\n\r\nimport Table from \"./table\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    width: \"100%\",\r\n\r\n    flexDirection: \"column\",\r\n    margin: \"auto\",\r\n    padding: theme.spacing(4),\r\n  },\r\n  table: {\r\n    margin: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nfunction MyInventory() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <Paper square elevation={5} className={classes.paper}>\r\n        <Typography variant=\"h4\">My Inventory</Typography>\r\n        <Divider />\r\n        <Typography variant=\"h6\">\r\n          Here you can view, as well as update the stock availability of all\r\n          your components\r\n        </Typography>\r\n      </Paper>\r\n      <Container maxWidth=\"lg\">\r\n        <Grid container justify=\"center\" className={classes.table}>\r\n          <Grid item xs={12}>\r\n            <Table />\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MyInventory;","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\mysales\\mySales.js",["368"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  makeStyles,\r\n  Paper,\r\n  Typography,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport { Navbar, Footer } from \"../../../layouts\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport Table from \"./table\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    width: \"100%\",\r\n\r\n    flexDirection: \"column\",\r\n    margin: \"auto\",\r\n    padding: theme.spacing(4),\r\n  },\r\n  table: {\r\n    margin: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nfunction MySales() {\r\n  const classes = useStyles();\r\n  const [sale, setList] = useState([]);\r\n  const loggedInState = useSelector((state) => state.loggedIn);\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"http://localhost:8080/transactions/fetchsaleslist\", {\r\n        headers: {\r\n          Authorization: \"Bearer \" + loggedInState.userToken,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        // if (response.data.success) {\r\n        console.log(response);\r\n        setList(response.data);\r\n        // }\r\n      })\r\n      .catch();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <Paper square elevation={5} className={classes.paper}>\r\n        <Typography variant=\"h4\">My Sales</Typography>\r\n        <Divider />\r\n        <Typography variant=\"h6\">\r\n          Here you can view all the sale you have done and details about it\r\n        </Typography>\r\n      </Paper>\r\n      <Container maxWidth=\"xl\">\r\n        <Grid container justify=\"center\" className={classes.table}>\r\n          <Grid item xs={12}>\r\n            <Table list={sale} />\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MySales;\r\n","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\myInvites\\myInvites.js",["369","370","371","372"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  makeStyles,\r\n  Paper,\r\n  Typography,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport { Navbar, Footer } from \"../../../layouts\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport Table from \"./table\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    width: \"100%\",\r\n\r\n    flexDirection: \"column\",\r\n    margin: \"auto\",\r\n    padding: theme.spacing(4),\r\n  },\r\n  table: {\r\n    margin: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nfunction MyInvites() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <Paper square elevation={5} className={classes.paper}>\r\n        <Typography variant=\"h4\">My Invites</Typography>\r\n        <Divider />\r\n        <Typography variant=\"h6\">\r\n          Here you can view all incoming invitation to you for donation drives\r\n          and individual requests\r\n        </Typography>\r\n      </Paper>\r\n      <Container maxWidth=\"xl\">\r\n        <Grid container justify=\"center\" className={classes.table}>\r\n          <Grid item xs={12}>\r\n            <Table />\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MyInvites;\r\n","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\myDrives\\myDrives.js",["373","374","375"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  makeStyles,\r\n  Paper,\r\n  Typography,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport { Navbar, Footer } from \"../../../layouts\";\r\n\r\nimport Table from \"./table\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    width: \"100%\",\r\n\r\n    flexDirection: \"column\",\r\n    margin: \"auto\",\r\n    padding: theme.spacing(4),\r\n  },\r\n  table: {\r\n    marginTop: theme.spacing(7),\r\n  },\r\n}));\r\n\r\nfunction MyBloodDonationDrives() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <Paper square elevation={5} className={classes.paper}>\r\n        <Typography variant=\"h4\">My Blood Donation Drives</Typography>\r\n        <Divider />\r\n        <Typography variant=\"h6\">\r\n          A section showing details of all the drives you have conducted, or\r\n          which are yet to happen in the near future.\r\n        </Typography>\r\n      </Paper>\r\n      <Container maxWidth=\"xl\">\r\n        <Grid container justify=\"center\" className={classes.table}>\r\n          <Grid item xs={12}>\r\n            <Table />\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MyBloodDonationDrives;\r\n","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\myDrives\\table.js",["376","377","378","379","380"],"import React, { useState, useEffect } from \"react\";\r\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport { Button } from \"@material-ui/core/\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport axios from \"axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.common.white,\r\n    color: theme.palette.common.black,\r\n    fontWeight: \"bold\",\r\n    fontSize: 16,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nexport default function CollapsibleTable() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [drivesList, setList] = useState([]);\r\n  const [donorsList, setDonors] = useState([]);\r\n  const loggedInState = useSelector((state) => state.loggedIn);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"http://localhost:8080/mydrives/fetchdrives\", {\r\n        headers: {\r\n          Authorization: \"Bearer \" + loggedInState.userToken,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response);\r\n        if (response.data) {\r\n          setList(response.data);\r\n        }\r\n      });\r\n\r\n    setDonors([]);\r\n  }, []);\r\n\r\n  const handleDonorsList = (driveId) => {\r\n    axios\r\n      .get(`http://localhost:8080/mydrives/fetchdrivedonorlist/${driveId}`, {\r\n        headers: {\r\n          Authorization: \"Bearer \" + loggedInState.userToken,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        if (response.data[0]) {\r\n          setDonors(response.data);\r\n        }\r\n      });\r\n  };\r\n\r\n  // console.log(donorsList);\r\n\r\n  const handleCancel = (idx, driveId) => {\r\n    if (window.confirm(\"Are you sure ?\")) {\r\n      axios\r\n        .put(\r\n          \"http://localhost:8080/mydrives/canceldrive\",\r\n          {\r\n            driveId: driveId,\r\n          },\r\n          {\r\n            headers: {\r\n              Authorization: \"Bearer \" + loggedInState.userToken,\r\n            },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          console.log(response);\r\n          if (response.data.success) {\r\n            const updatedList = [...drivesList];\r\n            updatedList[idx].status = false;\r\n            setList(updatedList);\r\n          }\r\n        });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (donorsList.length !== 0) {\r\n      history.push({\r\n        pathname: \"/acceptedDonors\",\r\n        donorsList,\r\n        drivesList,\r\n        setDonors,\r\n      });\r\n    }\r\n  }, [donorsList]);\r\n\r\n  return (\r\n    <TableContainer component={Paper} className={classes.root}>\r\n      <Table>\r\n        <TableHead>\r\n          <TableRow>\r\n            <StyledTableCell align=\"center\">Drive Id</StyledTableCell>\r\n            <StyledTableCell align=\"center\">Date</StyledTableCell>\r\n            <StyledTableCell align=\"center\">Time</StyledTableCell>\r\n            <StyledTableCell align=\"center\">Address</StyledTableCell>\r\n            <StyledTableCell align=\"center\">\r\n              Blood Groups Invited\r\n            </StyledTableCell>\r\n            <StyledTableCell align=\"center\">Donors List</StyledTableCell>\r\n            <StyledTableCell align=\"center\">Status</StyledTableCell>\r\n            <StyledTableCell align=\"center\">Cancel drive</StyledTableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {drivesList.map((row, idx) => (\r\n            <TableRow key={idx}>\r\n              <TableCell align=\"center\">{row.driveId}</TableCell>\r\n              <TableCell align=\"center\">\r\n                {row.startTimestamp.split(\"T\")[0]} to{\" \"}\r\n                {row.endTimestamp.split(\"T\")[0]}\r\n              </TableCell>\r\n              <TableCell align=\"center\">\r\n                {row.startTimestamp.split(\"T\")[1].split(\":\")[0]} :\r\n                {row.startTimestamp.split(\"T\")[1].split(\":\")[1]} to{\" \"}\r\n                {row.endTimestamp.split(\"T\")[1].split(\":\")[0]} :\r\n                {row.endTimestamp.split(\"T\")[1].split(\":\")[1]}\r\n              </TableCell>\r\n              <TableCell align=\"center\">\r\n                {row.address}, {row.district}, {row.state}, {row.pincode}\r\n              </TableCell>\r\n              <TableCell align=\"center\">{row.bloodGroups}</TableCell>\r\n              <TableCell align=\"center\">\r\n                <Button\r\n                  size=\"small\"\r\n                  onClick={(e) => {\r\n                    handleDonorsList(drivesList[idx].driveId);\r\n                  }}\r\n                >\r\n                  View list\r\n                </Button>\r\n              </TableCell>\r\n              <TableCell align=\"center\">\r\n                {!drivesList[idx].status ? (\r\n                  <p style={{ color: \"red\" }}>Canceled</p>\r\n                ) : new Date(row.endDate).getTime() <= new Date().getTime() ? (\r\n                  <p style={{ color: \"grey\" }}>Completed</p>\r\n                ) : new Date(row.startDate).getTime() >=\r\n                  new Date().getTime() ? (\r\n                  <p style={{ color: \"#007CFF\" }}> Upcoming</p>\r\n                ) : (\r\n                  <p style={{ color: \"green\" }}> Active </p>\r\n                )}\r\n              </TableCell>\r\n              <TableCell align=\"center\">\r\n                {new Date(row.endDate).getTime() <= new Date().getTime() ? (\r\n                  <p>N/A</p>\r\n                ) : (\r\n                  <Button\r\n                    size=\"small\"\r\n                    variant=\"contained\"\r\n                    onClick={(e) => {\r\n                      handleCancel(idx, drivesList[idx].driveId);\r\n                    }}\r\n                    disabled={!drivesList[idx].status}\r\n                  >\r\n                    {drivesList[idx].status ? <p>Cancel</p> : <p>Canceled</p>}\r\n                  </Button>\r\n                )}\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\myInvites\\table.js",["381","382","383","384","385","386"],"import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport axios from \"axios\";\r\nimport { Modal, TextField } from \"@material-ui/core\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === \"desc\"\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"inviteTimestamp\",\r\n    label: \"Invite Made on\",\r\n  },\r\n  {\r\n    id: \"inviteType\",\r\n    label: \"Type\",\r\n  },\r\n  {\r\n    id: \"inviteId\",\r\n    label: \"Id\",\r\n  },\r\n  {\r\n    id: \"date\",\r\n    label: \"Date\",\r\n  },\r\n  {\r\n    id: \"time\",\r\n    label: \"Time\",\r\n  },\r\n  {\r\n    id: \"address\",\r\n    label: \"Address\",\r\n  },\r\n  {\r\n    id: \"inviterName\",\r\n    label: \"Inviter Name\",\r\n  },\r\n  {\r\n    id: \"inviterContact\",\r\n    label: \"Inviter Contact\",\r\n  },\r\n  {\r\n    id: \"inviterEmail\",\r\n    label: \"Inviter Email\",\r\n  },\r\n  {\r\n    id: \"accept\",\r\n    label: \"Status\",\r\n  },\r\n];\r\n\r\nconst useHeaderStyles = makeStyles((theme) => ({\r\n  head: {\r\n    fontSize: 18,\r\n    fontWeight: \"bold\",\r\n  },\r\n  body: {\r\n    fontSize: 16,\r\n  },\r\n}));\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const headerClasses = useHeaderStyles();\r\n  const { classes, order, orderBy, onRequestSort } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align=\"center\"\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n            className={headerClasses.head}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : \"asc\"}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  paper: {\r\n    width: \"100%\",\r\n    marginBottom: theme.spacing(2),\r\n    padding: theme.spacing(1),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: \"rect(0 0 0 0)\",\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: \"hidden\",\r\n    padding: 0,\r\n    position: \"absolute\",\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}));\r\n\r\nexport default function EnhancedTable() {\r\n  const classes = useStyles();\r\n  const [order, setOrder] = React.useState(\"asc\");\r\n  const [orderBy, setOrderBy] = React.useState(\"inviteType\");\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n  const [Message, setRejectionMessage] = useState(\"\");\r\n\r\n  const loggedInState = useSelector((state) => state.loggedIn);\r\n  const [List, setList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"http://localhost:8080/invites/fetchinvites\", {\r\n        headers: {\r\n          Authorization: \"Bearer \" + loggedInState.userToken,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        // if (response.data.success) {\r\n        console.log(response);\r\n        setList(response.data);\r\n        // }\r\n      })\r\n      .catch();\r\n  }, []);\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleAccept = (index) => {\r\n    // axios call\r\n\r\n    if (List[index].inviteType === \"drive\") {\r\n      axios\r\n        .put(\r\n          \"http://localhost:8080/invites/inviteresponse\",\r\n          {\r\n            eventId: List[index].driveId,\r\n            eventType: List[index].inviteType,\r\n            acceptance: 1,\r\n            rejectionMesaage: \"\",\r\n          },\r\n          {\r\n            headers: {\r\n              Authorization: \"Bearer \" + loggedInState.userToken,\r\n            },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          // if (response.data.success) {\r\n          console.log(response);\r\n          window.alert(\"accepted\");\r\n          setList((prevList) => {\r\n            const newList = [...prevList];\r\n            newList[index].status = 1;\r\n\r\n            return newList;\r\n          });\r\n          // }\r\n        })\r\n        .catch();\r\n    } else {\r\n      axios\r\n        .put(\r\n          \"http://localhost:8080/invites/inviteresponse\",\r\n          {\r\n            eventId: List[index].donationId,\r\n            eventType: List[index].inviteType,\r\n            acceptance: 1,\r\n            rejectionMesaage: \"\",\r\n          },\r\n          {\r\n            headers: {\r\n              Authorization: \"Bearer \" + loggedInState.userToken,\r\n            },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          // if (response.data.success) {\r\n          console.log(response);\r\n          window.alert(\"accepted\");\r\n          setList((prevList) => {\r\n            const newList = [...prevList];\r\n            newList[index].status = 1;\r\n            return newList;\r\n          });\r\n          // }\r\n        })\r\n        .catch();\r\n    }\r\n  };\r\n\r\n  const handleReject = (index) => {\r\n    let rejectionMessage = window.prompt(\r\n      \"Please submit your reason of rejection\"\r\n    );\r\n\r\n    setRejectionMessage(rejectionMessage);\r\n    // axios call\r\n\r\n    if (List[index].inviteType === \"drive\") {\r\n      axios\r\n        .put(\r\n          \"http://localhost:8080/invites/inviteresponse\",\r\n          {\r\n            eventId: List[index].driveId,\r\n            eventType: List[index].inviteType,\r\n            acceptance: 0,\r\n            rejectionMesaage: Message,\r\n          },\r\n          {\r\n            headers: {\r\n              Authorization: \"Bearer \" + loggedInState.userToken,\r\n            },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          // if (response.data.success) {\r\n          console.log(response);\r\n          setList((prevList) => {\r\n            const newList = [...prevList];\r\n            newList[index].status = 0;\r\n            return newList;\r\n          });\r\n          // }\r\n        })\r\n        .catch();\r\n    } else {\r\n      axios\r\n        .put(\r\n          \"http://localhost:8080/invites/inviteresponse\",\r\n          {\r\n            eventId: List[index].donationId,\r\n            eventType: List[index].inviteType,\r\n            acceptance: 0,\r\n            rejectionMesaage: Message,\r\n          },\r\n          {\r\n            headers: {\r\n              Authorization: \"Bearer \" + loggedInState.userToken,\r\n            },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          // if (response.data.success) {\r\n          console.log(response);\r\n          setList((prevList) => {\r\n            const newList = [...prevList];\r\n            newList[index].status = 0;\r\n            return newList;\r\n          });\r\n          // }\r\n        })\r\n        .catch();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <TableContainer>\r\n          <Table className={classes.table} size=\"medium\">\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onRequestSort={handleRequestSort}\r\n            />\r\n            <TableBody>\r\n              {stableSort(List, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  return (\r\n                    <TableRow hover tabIndex={-1} key={index}>\r\n                      <TableCell align=\"center\">\r\n                        {row.inviteTimestamp.split(\"T\")[0]}\r\n                      </TableCell>\r\n\r\n                      <TableCell align=\"center\">{row.inviteType}</TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {row.inviteType === \"drive\"\r\n                          ? row.driveId\r\n                          : row.donationId}\r\n                      </TableCell>\r\n\r\n                      <TableCell align=\"center\">\r\n                        {row.inviteType === \"drive\" ? (\r\n                          <p>\r\n                            {row.startTimestamp.split(\"T\")[0]} to{\" \"}\r\n                            {row.endTimestamp.split(\"T\")[0]}\r\n                          </p>\r\n                        ) : (\r\n                          <p>N/A</p>\r\n                        )}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {row.inviteType === \"drive\" ? (\r\n                          <p>\r\n                            {row.startTimestamp.split(\"T\")[1].split(\":\")[0]} :\r\n                            {row.startTimestamp.split(\"T\")[1].split(\":\")[1]} to{\" \"}\r\n                            {row.endTimestamp.split(\"T\")[1].split(\":\")[0]} :\r\n                            {row.endTimestamp.split(\"T\")[1].split(\":\")[1]}\r\n                          </p>\r\n                        ) : (\r\n                          <p>N/A</p>\r\n                        )}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {row.address},{row.district},{row.state},{row.pincode}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">{row.recipientName}</TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {row.recipientContact}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">{row.recipientEmail}</TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {List[index].status !== 2 ? (\r\n                          List[index].status === 1 ? (\r\n                            <p>Accepted</p>\r\n                          ) : List[index].status === 0 ? (\r\n                            <p>Rejected</p>\r\n                          ) : null\r\n                        ) : (\r\n                          <ButtonGroup variant=\"text\">\r\n                            <Button\r\n                              type=\"button\"\r\n                              variant=\"contained\"\r\n                              onClick={(e) => handleAccept(index)}\r\n                            >\r\n                              Accept\r\n                            </Button>\r\n                            <Button\r\n                              type=\"button\"\r\n                              variant=\"contained\"\r\n                              onClick={(e) => handleReject(index)}\r\n                              color=\"secondary\"\r\n                            >\r\n                              Ignore\r\n                            </Button>\r\n                          </ButtonGroup>\r\n                        )}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\"></TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={List.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\myInventory\\table.js",["387","388"],"import React, { useState, useEffect } from \"react\";\r\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { Button, ButtonGroup, Grid, TextField } from \"@material-ui/core/\";\r\nimport axios from \"axios\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.common.white,\r\n    color: theme.palette.common.black,\r\n    fontSize: \"18px\",\r\n    fontWeight: \"bold\",\r\n  },\r\n  body: {\r\n    fontSize: 18,\r\n  },\r\n}))(TableCell);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n  buttonGroup: {\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  root: {\r\n    height: \"540px\",\r\n    overflow: \"auto\",\r\n    \"& .MuiTextField-root\": {\r\n      width: 50,\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function CustomizedTables() {\r\n  const classes = useStyles();\r\n  const [readOnly, setStatus] = useState(true);\r\n  const [data, setData] = useState([]);\r\n  const regex = /^[0-9]*$/;\r\n  const loggedInState = useSelector((state) => state.loggedIn);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"http://localhost:8080/inventory/receieveinventory\", {\r\n        headers: {\r\n          Authorization: \"Bearer \" + loggedInState.userToken,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        // if (response.data.success) {\r\n        console.log(response.data);\r\n        setData(response.data);\r\n        // }\r\n      })\r\n      .catch();\r\n  }, []);\r\n\r\n  const handleEdit = () => {\r\n    window.alert(\"start editing\");\r\n    setStatus(false);\r\n  };\r\n\r\n  const handleSave = () => {\r\n    if (loggedInState.userType === 2) {\r\n      axios\r\n        .put(\"http://localhost:8080/inventory/updatehosinventory\", data, {\r\n          headers: {\r\n            Authorization: \"Bearer \" + loggedInState.userToken,\r\n          },\r\n        })\r\n        .then((response) => {\r\n          // if (response.data.success) {\r\n          console.log(response.data);\r\n          setData(response.data);\r\n          window.alert(\"changes successfully saved\");\r\n          setStatus(true);\r\n          // }\r\n        })\r\n        .catch();\r\n    } else {\r\n      axios\r\n        .put(\"http://localhost:8080/inventory/updatebbinventory\", data, {\r\n          headers: {\r\n            Authorization: \"Bearer \" + loggedInState.userToken,\r\n          },\r\n        })\r\n        .then((response) => {\r\n          // if (response.data.success) {\r\n          console.log(response.data);\r\n          setData(response.data);\r\n          window.alert(\"changes successfully saved\");\r\n          setStatus(true);\r\n          // }\r\n        })\r\n        .catch();\r\n    }\r\n  };\r\n\r\n  const handleChange = (idx, e) => {\r\n    const { value, name } = e.target;\r\n    const updatedData = [...data];\r\n    updatedData[idx][name] = value;\r\n    setData(updatedData);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid container justify=\"flex-end\">\r\n        <ButtonGroup color=\"secondary\" className={classes.buttonGroup}>\r\n          {readOnly ? (\r\n            <Button onClick={handleEdit}>Edit</Button>\r\n          ) : (\r\n            <ButtonGroup color=\"secondary\">\r\n              <Button onClick={handleSave}>Save</Button>\r\n            </ButtonGroup>\r\n          )}\r\n        </ButtonGroup>\r\n      </Grid>\r\n\r\n      {loggedInState.userType == 2 ? (\r\n        <TableContainer component={Paper} className={classes.root}>\r\n          <Table stickyHeader className={classes.table}>\r\n            <TableHead>\r\n              <TableRow>\r\n                <StyledTableCell align=\"center\">Component</StyledTableCell>\r\n                <StyledTableCell align=\"center\">Blood Group</StyledTableCell>\r\n                <StyledTableCell align=\"center\">\r\n                  Units available&nbsp;(ltr)\r\n                </StyledTableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            {data.map((row, idx) => (\r\n              <TableBody>\r\n                <TableRow key={idx}>\r\n                  <StyledTableCell align=\"center\" rowspan={8}>\r\n                    {row.component}\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align=\"center\">A-</StyledTableCell>\r\n                  <StyledTableCell align=\"center\">\r\n                    {readOnly ? (\r\n                      row.aNegUnits\r\n                    ) : (\r\n                      <TextField\r\n                        name=\"aNegUnits\"\r\n                        value={row.aNegUnits}\r\n                        onChange={(e) => {\r\n                          if (regex.test(e.target.value)) {\r\n                            handleChange(idx, e);\r\n                          }\r\n                        }}\r\n                      />\r\n                    )}\r\n                  </StyledTableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell align=\"center\">A+</StyledTableCell>\r\n                  <StyledTableCell align=\"center\">\r\n                    {readOnly ? (\r\n                      row.aPosUnits\r\n                    ) : (\r\n                      <TextField\r\n                        name=\"aPosUnits\"\r\n                        value={row.aPosUnits}\r\n                        onChange={(e) => {\r\n                          if (regex.test(e.target.value)) {\r\n                            handleChange(idx, e);\r\n                          }\r\n                        }}\r\n                      />\r\n                    )}\r\n                  </StyledTableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell align=\"center\">AB-</StyledTableCell>\r\n                  <StyledTableCell align=\"center\">\r\n                    {readOnly ? (\r\n                      row.abNegUnits\r\n                    ) : (\r\n                      <TextField\r\n                        name=\"abNegUnits\"\r\n                        value={row.abNegUnits}\r\n                        onChange={(e) => {\r\n                          if (regex.test(e.target.value)) {\r\n                            handleChange(idx, e);\r\n                          }\r\n                        }}\r\n                      />\r\n                    )}\r\n                  </StyledTableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell align=\"center\">AB+</StyledTableCell>\r\n                  <StyledTableCell align=\"center\">\r\n                    {readOnly ? (\r\n                      row.abPosUnits\r\n                    ) : (\r\n                      <TextField\r\n                        name=\"abPosUnits\"\r\n                        value={row.abPosUnits}\r\n                        onChange={(e) => {\r\n                          if (regex.test(e.target.value)) {\r\n                            handleChange(idx, e);\r\n                          }\r\n                        }}\r\n                      />\r\n                    )}\r\n                  </StyledTableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell align=\"center\">B-</StyledTableCell>\r\n                  <StyledTableCell align=\"center\">\r\n                    {readOnly ? (\r\n                      row.bNegUnits\r\n                    ) : (\r\n                      <TextField\r\n                        name=\"bNegUnits\"\r\n                        value={row.bNegUnits}\r\n                        onChange={(e) => {\r\n                          if (regex.test(e.target.value)) {\r\n                            handleChange(idx, e);\r\n                          }\r\n                        }}\r\n                      />\r\n                    )}\r\n                  </StyledTableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell align=\"center\">B+</StyledTableCell>\r\n                  <StyledTableCell align=\"center\">\r\n                    {readOnly ? (\r\n                      row.bPosUnits\r\n                    ) : (\r\n                      <TextField\r\n                        name=\"bPosUnits\"\r\n                        value={row.bPosUnits}\r\n                        onChange={(e) => {\r\n                          if (regex.test(e.target.value)) {\r\n                            handleChange(idx, e);\r\n                          }\r\n                        }}\r\n                      />\r\n                    )}\r\n                  </StyledTableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell align=\"center\">O-</StyledTableCell>\r\n                  <StyledTableCell align=\"center\">\r\n                    {readOnly ? (\r\n                      row.oNegUnits\r\n                    ) : (\r\n                      <TextField\r\n                        name=\"oNegUnits\"\r\n                        value={row.oNegUnits}\r\n                        onChange={(e) => {\r\n                          if (regex.test(e.target.value)) {\r\n                            handleChange(idx, e);\r\n                          }\r\n                        }}\r\n                      />\r\n                    )}\r\n                  </StyledTableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell align=\"center\">O+</StyledTableCell>\r\n                  <StyledTableCell align=\"center\">\r\n                    {readOnly ? (\r\n                      row.oPosUnits\r\n                    ) : (\r\n                      <TextField\r\n                        name=\"oPosUnits\"\r\n                        value={row.oPosUnits}\r\n                        onChange={(e) => {\r\n                          if (regex.test(e.target.value)) {\r\n                            handleChange(idx, e);\r\n                          }\r\n                        }}\r\n                      />\r\n                    )}\r\n                  </StyledTableCell>\r\n                </TableRow>\r\n              </TableBody>\r\n            ))}\r\n          </Table>\r\n        </TableContainer>\r\n      ) : (\r\n        // for blood bank\r\n        <TableContainer component={Paper} className={classes.root}>\r\n          <Table stickyHeader className={classes.table}>\r\n            <TableHead>\r\n              <TableRow>\r\n                <StyledTableCell align=\"center\">Component</StyledTableCell>\r\n                <StyledTableCell align=\"center\">Blood Group</StyledTableCell>\r\n                <StyledTableCell align=\"center\">\r\n                  Units available&nbsp;(ltr)\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"center\">\r\n                  Price/unit&nbsp;(Rs)\r\n                </StyledTableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            {data.map((row, idx) => (\r\n              <TableBody>\r\n                <TableRow key={idx}>\r\n                  <StyledTableCell align=\"center\" rowspan={8}>\r\n                    {row.component}\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align=\"center\">A-</StyledTableCell>\r\n                  <StyledTableCell align=\"center\">\r\n                    {\" \"}\r\n                    {readOnly ? (\r\n                      row.aNegUnits\r\n                    ) : (\r\n                      <TextField\r\n                        name=\"aNegUnits\"\r\n                        value={row.aNegUnits}\r\n                        onChange={(e) => {\r\n                          if (regex.test(e.target.value)) {\r\n                            handleChange(idx, e);\r\n                          }\r\n                        }}\r\n                      />\r\n                    )}\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align=\"center\">\r\n                    {\" \"}\r\n                    {readOnly ? (\r\n                      row.aNegPrice\r\n                    ) : (\r\n                      <TextField\r\n                        name=\"aNegPrice\"\r\n                        value={row.aNegPrice}\r\n                        onChange={(e) => {\r\n                          if (regex.test(e.target.value)) {\r\n                            handleChange(idx, e);\r\n                          }\r\n                        }}\r\n                      />\r\n                    )}\r\n                  </StyledTableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell align=\"center\">A+</StyledTableCell>\r\n                  <StyledTableCell align=\"center\">\r\n                    {readOnly ? (\r\n                      row.aPosUnits\r\n                    ) : (\r\n                      <TextField\r\n                        name=\"aPosUnits\"\r\n                        value={row.aPosUnits}\r\n                        onChange={(e) => {\r\n                          if (regex.test(e.target.value)) {\r\n                            handleChange(idx, e);\r\n                          }\r\n                        }}\r\n                      />\r\n                    )}\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align=\"center\">\r\n                    {readOnly ? (\r\n                      row.aPosPrice\r\n                    ) : (\r\n                      <TextField\r\n                        name=\"aPosPrice\"\r\n                        value={row.aPosPrice}\r\n                        onChange={(e) => {\r\n                          if (regex.test(e.target.value)) {\r\n                            handleChange(idx, e);\r\n                          }\r\n                        }}\r\n                      />\r\n                    )}\r\n                  </StyledTableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell align=\"center\">AB-</StyledTableCell>\r\n                  <StyledTableCell align=\"center\">\r\n                    {readOnly ? (\r\n                      row.abNegUnits\r\n                    ) : (\r\n                      <TextField\r\n                        name=\"abNegUnits\"\r\n                        value={row.abNegUnits}\r\n                        onChange={(e) => {\r\n                          if (regex.test(e.target.value)) {\r\n                            handleChange(idx, e);\r\n                          }\r\n                        }}\r\n                      />\r\n                    )}\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align=\"center\">\r\n                    {readOnly ? (\r\n                      row.abNegPrice\r\n                    ) : (\r\n                      <TextField\r\n                        name=\"abNegPrice\"\r\n                        value={row.abNegPrice}\r\n                        onChange={(e) => {\r\n                          if (regex.test(e.target.value)) {\r\n                            handleChange(idx, e);\r\n                          }\r\n                        }}\r\n                      />\r\n                    )}\r\n                  </StyledTableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell align=\"center\">AB+</StyledTableCell>\r\n                  <StyledTableCell align=\"center\">\r\n                    {readOnly ? (\r\n                      row.abPosUnits\r\n                    ) : (\r\n                      <TextField\r\n                        name=\"abPosUnits\"\r\n                        value={row.abPosUnits}\r\n                        onChange={(e) => {\r\n                          if (regex.test(e.target.value)) {\r\n                            handleChange(idx, e);\r\n                          }\r\n                        }}\r\n                      />\r\n                    )}\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align=\"center\">\r\n                    {readOnly ? (\r\n                      row.abPosPrice\r\n                    ) : (\r\n                      <TextField\r\n                        name=\"abPosPrice\"\r\n                        value={row.abPosPrice}\r\n                        onChange={(e) => {\r\n                          if (regex.test(e.target.value)) {\r\n                            handleChange(idx, e);\r\n                          }\r\n                        }}\r\n                      />\r\n                    )}\r\n                  </StyledTableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell align=\"center\">B-</StyledTableCell>\r\n                  <StyledTableCell align=\"center\">\r\n                    {readOnly ? (\r\n                      row.bNegUnits\r\n                    ) : (\r\n                      <TextField\r\n                        name=\"bNegUnits\"\r\n                        value={row.bNegUnits}\r\n                        onChange={(e) => {\r\n                          if (regex.test(e.target.value)) {\r\n                            handleChange(idx, e);\r\n                          }\r\n                        }}\r\n                      />\r\n                    )}\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align=\"center\">\r\n                    {readOnly ? (\r\n                      row.bNegPrice\r\n                    ) : (\r\n                      <TextField\r\n                        name=\"bNegPrice\"\r\n                        value={row.bNegPrice}\r\n                        onChange={(e) => {\r\n                          if (regex.test(e.target.value)) {\r\n                            handleChange(idx, e);\r\n                          }\r\n                        }}\r\n                      />\r\n                    )}\r\n                  </StyledTableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell align=\"center\">B+</StyledTableCell>\r\n                  <StyledTableCell align=\"center\">\r\n                    {readOnly ? (\r\n                      row.bPosUnits\r\n                    ) : (\r\n                      <TextField\r\n                        name=\"bPosUnits\"\r\n                        value={row.bPosUnits}\r\n                        onChange={(e) => {\r\n                          if (regex.test(e.target.value)) {\r\n                            handleChange(idx, e);\r\n                          }\r\n                        }}\r\n                      />\r\n                    )}\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align=\"center\">\r\n                    {readOnly ? (\r\n                      row.bPosPrice\r\n                    ) : (\r\n                      <TextField\r\n                        name=\"bPosPrice\"\r\n                        value={row.bPosPrice}\r\n                        onChange={(e) => {\r\n                          if (regex.test(e.target.value)) {\r\n                            handleChange(idx, e);\r\n                          }\r\n                        }}\r\n                      />\r\n                    )}\r\n                  </StyledTableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell align=\"center\">O-</StyledTableCell>\r\n                  <StyledTableCell align=\"center\">\r\n                    {readOnly ? (\r\n                      row.oNegUnits\r\n                    ) : (\r\n                      <TextField\r\n                        name=\"oNegUnits\"\r\n                        value={row.oNegUnits}\r\n                        onChange={(e) => {\r\n                          if (regex.test(e.target.value)) {\r\n                            handleChange(idx, e);\r\n                          }\r\n                        }}\r\n                      />\r\n                    )}\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align=\"center\">\r\n                    {readOnly ? (\r\n                      row.oNegPrice\r\n                    ) : (\r\n                      <TextField\r\n                        name=\"oNegPrice\"\r\n                        value={row.oNegPrice}\r\n                        onChange={(e) => {\r\n                          if (regex.test(e.target.value)) {\r\n                            handleChange(idx, e);\r\n                          }\r\n                        }}\r\n                      />\r\n                    )}\r\n                  </StyledTableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                  <StyledTableCell align=\"center\">O+</StyledTableCell>\r\n                  <StyledTableCell align=\"center\">\r\n                    {readOnly ? (\r\n                      row.oPosUnits\r\n                    ) : (\r\n                      <TextField\r\n                        name=\"oPosUnits\"\r\n                        value={row.oPosUnits}\r\n                        onChange={(e) => {\r\n                          if (regex.test(e.target.value)) {\r\n                            handleChange(idx, e);\r\n                          }\r\n                        }}\r\n                      />\r\n                    )}\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align=\"center\">\r\n                    {readOnly ? (\r\n                      row.oPosPrice\r\n                    ) : (\r\n                      <TextField\r\n                        name=\"oPosPrice\"\r\n                        value={row.oPosPrice}\r\n                        onChange={(e) => {\r\n                          if (regex.test(e.target.value)) {\r\n                            handleChange(idx, e);\r\n                          }\r\n                        }}\r\n                      />\r\n                    )}\r\n                  </StyledTableCell>\r\n                </TableRow>\r\n              </TableBody>\r\n            ))}\r\n          </Table>\r\n        </TableContainer>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\mysales\\table.js",["389","390","391","392"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === \"desc\"\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"dateOfTransaction\",\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: \"Date of Transaction\",\r\n  },\r\n  {\r\n    id: \"salesId\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Purchase Id\",\r\n  },\r\n  {\r\n    id: \"purchasedComponent\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Component Sold\",\r\n  },\r\n  {\r\n    id: \"purchasedGroup\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Blood Group Sold\",\r\n  },\r\n  {\r\n    id: \"purchasedQuantity\",\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: \"Units Sold\",\r\n  },\r\n  {\r\n    id: \"buyerName\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Buyer Name\",\r\n  },\r\n  {\r\n    id: \"buyerContact\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Buyer Contact\",\r\n  },\r\n  {\r\n    id: \"buyerEmail\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Buyer Email\",\r\n  },\r\n  {\r\n    id: \"amount\",\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: \"Amount Paid (Rs)\",\r\n  },\r\n];\r\n\r\nconst useHeaderStyles = makeStyles((theme) => ({\r\n  head: {\r\n    fontSize: 18,\r\n    fontWeight: \"bold\",\r\n  },\r\n  body: {\r\n    fontSize: 16,\r\n  },\r\n}));\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const headerClasses = useHeaderStyles();\r\n  const { classes, order, orderBy, onRequestSort } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align=\"center\"\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n            className={headerClasses.head}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : \"asc\"}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  paper: {\r\n    width: \"100%\",\r\n    marginBottom: theme.spacing(2),\r\n    padding: theme.spacing(1),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: \"rect(0 0 0 0)\",\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: \"hidden\",\r\n    padding: 0,\r\n    position: \"absolute\",\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}));\r\n\r\nexport default function EnhancedTable({ list }) {\r\n  var List = [];\r\n\r\n  list.map((item) => {\r\n    List.push(item);\r\n  });\r\n\r\n  const classes = useStyles();\r\n  const [order, setOrder] = React.useState(\"desc\");\r\n  const [orderBy, setOrderBy] = React.useState(\"dateOfTransaction\");\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <TableContainer>\r\n          <Table\r\n            className={classes.table}\r\n            aria-labelledby=\"tableTitle\"\r\n            size=\"medium\"\r\n          >\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onRequestSort={handleRequestSort}\r\n            />\r\n            <TableBody>\r\n              {stableSort(List, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  return (\r\n                    <TableRow hover tabIndex={-1} key={index}>\r\n                      <TableCell align=\"center\">\r\n                        {row.dateOfTransaction.split(\"T\")[0]}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">{row.salesId}</TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {row.purchasedComponent}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">{row.purchasedGroup}</TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {row.purchasedQuantity}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">{row.buyerName}</TableCell>\r\n                      <TableCell align=\"center\">{row.buyerContact}</TableCell>\r\n                      <TableCell align=\"center\">{row.buyerEmail}</TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {row.pricePerUnit * row.purchasedQuantity}{\" \"}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={List.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\activeDonorReq\\useTable.js",["393","394","395"],"import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport axios from \"axios\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === \"desc\"\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"requestTime\",\r\n    numeric: false,\r\n    label: \"Request Time\",\r\n    disablePadding: false,\r\n  },\r\n  {\r\n    id: \"donationId\",\r\n    numeric: false,\r\n    label: \"Request Id\",\r\n    disablePadding: false,\r\n  },\r\n  {\r\n    id: \"bloodGroup\",\r\n    numeric: false,\r\n    label: \"blood group invited\",\r\n    disablePadding: false,\r\n  },\r\n  {\r\n    id: \"address\",\r\n    numeric: false,\r\n    label: \"Selected location\",\r\n    disablePadding: false,\r\n  },\r\n  {\r\n    id: \"venue\",\r\n    numeric: false,\r\n    label: \"Venue\",\r\n    disablePadding: false,\r\n  },\r\n\r\n  {\r\n    id: \"donors\",\r\n    numeric: false,\r\n    disableSorting: true,\r\n    label: \"Invited Donors\",\r\n    disablePadding: false,\r\n  },\r\n  {\r\n    id: \"status\",\r\n    numeric: false,\r\n    label: \"Status of Request\",\r\n    disableSorting: false,\r\n    disablePadding: false,\r\n  },\r\n  {\r\n    id: \"expire\",\r\n    numeric: false,\r\n    label: \"Expire Request?\",\r\n    disableSorting: false,\r\n    disablePadding: false,\r\n  },\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const { classes, order, orderBy, onRequestSort } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            style={{ fontWeight: \"bold\" }}\r\n            align=\"center\"\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : \"asc\"}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  paper: {\r\n    width: \"100%\",\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: \"rect(0 0 0 0)\",\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: \"hidden\",\r\n    padding: 0,\r\n    position: \"absolute\",\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}));\r\n\r\nexport default function EnhancedTable() {\r\n  const loggedInState = useSelector((state) => state.loggedIn);\r\n  const [active, setList] = useState([]);\r\n  const [donorsList, setDonors] = useState([]);\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"http://localhost:8080/donationrequests/fetchrequests\", {\r\n        headers: {\r\n          Authorization: \"Bearer \" + loggedInState.userToken,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        // if (response.data.success) {\r\n        setList(response.data);\r\n        console.log(response);\r\n        // }\r\n      })\r\n      .catch();\r\n  }, []);\r\n\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const [order, setOrder] = React.useState(\"asc\");\r\n  const [orderBy, setOrderBy] = React.useState(\"requestTime\");\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleExpire = (e, idx) => {\r\n    if (window.confirm(\"Are you sure ?\")) {\r\n      var updatedList = [...active];\r\n      updatedList[idx].status = false;\r\n      setList(updatedList);\r\n\r\n      axios\r\n        .put(\r\n          \"http://localhost:8080/donationrequests/expirerequest\",\r\n          {\r\n            donationId: active[idx].donationId,\r\n          },\r\n          {\r\n            headers: {\r\n              Authorization: \"Bearer \" + loggedInState.userToken,\r\n            },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          // if (response.data.success) {\r\n          console.log(response);\r\n          // }\r\n        })\r\n        .catch();\r\n    }\r\n  };\r\n\r\n  const handleView = (idx) => {\r\n    // history.push(\"/inviteesList\");\r\n    axios\r\n      .get(\r\n        `http://localhost:8080/donationrequests/fetchdonationdonorlist/${active[idx].donationId}`,\r\n        {\r\n          headers: {\r\n            Authorization: \"Bearer \" + loggedInState.userToken,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        console.log(response);\r\n        if (response.data[0]) {\r\n          setDonors(response.data);\r\n        }\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (donorsList.length !== 0) {\r\n      history.push({\r\n        pathname: \"/inviteesList\",\r\n        donorsList,\r\n        active,\r\n        setDonors,\r\n      });\r\n    }\r\n  }, [donorsList]);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <TableContainer>\r\n          <Table className={classes.table}>\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onRequestSort={handleRequestSort}\r\n            />\r\n            <TableBody>\r\n              {stableSort(active, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  return (\r\n                    <TableRow hover key={index}>\r\n                      <TableCell align=\"center\">\r\n                        {row.requestTime.split(\"T\")[0]} at{\"   \"}\r\n                        {row.requestTime.split(\"T\")[1].split(\":\")[0]} :\r\n                        {row.requestTime.split(\"T\")[1].split(\":\")[1]}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">{row.donationId}</TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {row.bloodGroup ? row.bloodGroup : <p>NA</p>}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {row.district}, {row.state}, {row.pincode}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">{row.address}</TableCell>\r\n\r\n                      <TableCell align=\"center\">\r\n                        <Button\r\n                          onClick={(e) => {\r\n                            handleView(index);\r\n                          }}\r\n                        >\r\n                          View List\r\n                        </Button>\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {row.status ? <p>Active</p> : <p>Expired</p>}\r\n                      </TableCell>\r\n\r\n                      <TableCell align=\"center\">\r\n                        <Button\r\n                          type=\"button\"\r\n                          variant=\"contained\"\r\n                          disabled={!active[index].status}\r\n                          onClick={(e) => {\r\n                            handleExpire(e, index);\r\n                          }}\r\n                        >\r\n                          Expire\r\n                        </Button>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={active.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\myPurchases\\table.js",["396","397","398","399","400","401"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\n\r\nfunction createData(name, date, bg, component, units, contact, amount) {\r\n  return { name, date, bg, component, units, contact, amount };\r\n}\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === \"desc\"\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"dateOfTransaction\",\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: \"Date of purchase\",\r\n  },\r\n  {\r\n    id: \"purchaseId\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Purchase Id\",\r\n  },\r\n  {\r\n    id: \"soldComponent\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Component purchased\",\r\n  },\r\n  {\r\n    id: \"soldGroup\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Blood Group purchased\",\r\n  },\r\n  {\r\n    id: \"soldQuantity\",\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: \"Units purchased\",\r\n  },\r\n  {\r\n    id: \"sellerName\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Seller Name\",\r\n  },\r\n  {\r\n    id: \"sellerContact\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Seller Contact\",\r\n  },\r\n  {\r\n    id: \"sellerEmail\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Seller Email\",\r\n  },\r\n  {\r\n    id: \"amount\",\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: \"Amount Paid (Rs)\",\r\n  },\r\n];\r\n\r\nconst useHeaderStyles = makeStyles((theme) => ({\r\n  head: {\r\n    fontSize: 17,\r\n    fontWeight: \"bold\",\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}));\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const headerClasses = useHeaderStyles();\r\n  const { classes, order, orderBy, onRequestSort } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align=\"center\"\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n            className={headerClasses.head}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : \"asc\"}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  paper: {\r\n    width: \"100%\",\r\n    marginBottom: theme.spacing(2),\r\n    padding: theme.spacing(1),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: \"rect(0 0 0 0)\",\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: \"hidden\",\r\n    padding: 0,\r\n    position: \"absolute\",\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}));\r\n\r\nexport default function EnhancedTable({ list }) {\r\n  var List = [];\r\n  list.map((item) => {\r\n    List.push(item);\r\n  });\r\n\r\n  const classes = useStyles();\r\n  const [order, setOrder] = React.useState(\"asc\");\r\n  const [orderBy, setOrderBy] = React.useState(\"date\");\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const emptyRows =\r\n    rowsPerPage - Math.min(rowsPerPage, List.length - page * rowsPerPage);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <TableContainer>\r\n          <Table\r\n            className={classes.table}\r\n            aria-labelledby=\"tableTitle\"\r\n            size=\"medium\"\r\n          >\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onRequestSort={handleRequestSort}\r\n            />\r\n            <TableBody>\r\n              {stableSort(List, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  return (\r\n                    <TableRow hover tabIndex={-1} key={index}>\r\n                      <TableCell align=\"center\">\r\n                        {row.dateOfTransaction.split(\"T\")[0]}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">{row.purchaseId}</TableCell>\r\n                      <TableCell align=\"center\">{row.soldComponent}</TableCell>\r\n                      <TableCell align=\"center\">{row.soldGroup}</TableCell>\r\n                      <TableCell align=\"center\">{row.soldQuantity}</TableCell>\r\n                      <TableCell align=\"center\">{row.sellerName}</TableCell>\r\n                      <TableCell align=\"center\">{row.sellerContact}</TableCell>\r\n                      <TableCell align=\"center\">{row.sellerEmail}</TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {row.pricePerUnit * row.soldQuantity}{\" \"}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={List.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\myCommitments\\table.js",["402","403","404","405"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === \"desc\"\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"commitmentDate\",\r\n    label: \"Date and Time\",\r\n  },\r\n  {\r\n    id: \"commitmentType\",\r\n    label: \"Commitment type\",\r\n  },\r\n  {\r\n    id: \"driveId\",\r\n    label: \"Event Id\",\r\n  },\r\n  {\r\n    id: \"address\",\r\n    label: \"Event Address\",\r\n  },\r\n  {\r\n    id: \"recipientType\",\r\n    label: \"Recipient Type\",\r\n  },\r\n  {\r\n    id: \"recipientName\",\r\n    label: \"Recipient Name\",\r\n  },\r\n  {\r\n    id: \"recipientContact\",\r\n    label: \"Recipient Contact\",\r\n  },\r\n  {\r\n    id: \"recipientEmail\",\r\n    label: \"Recipient Email\",\r\n  },\r\n  {\r\n    id: \"from\",\r\n    label: \"From\",\r\n  },\r\n  {\r\n    id: \"to\",\r\n    label: \"To\",\r\n  },\r\n  {\r\n    id: \"completed\",\r\n    label: \"status\",\r\n  },\r\n];\r\n\r\nconst useHeaderStyles = makeStyles((theme) => ({\r\n  head: {\r\n    fontSize: 18,\r\n    fontWeight: \"bold\",\r\n  },\r\n  body: {\r\n    fontSize: 16,\r\n  },\r\n}));\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const headerClasses = useHeaderStyles();\r\n  const { classes, order, orderBy, onRequestSort } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align=\"center\"\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n            className={headerClasses.head}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : \"asc\"}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  paper: {\r\n    width: \"100%\",\r\n    marginBottom: theme.spacing(2),\r\n    padding: theme.spacing(1),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: \"rect(0 0 0 0)\",\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: \"hidden\",\r\n    padding: 0,\r\n    position: \"absolute\",\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}));\r\n\r\nexport default function EnhancedTable({ list }) {\r\n  var List = [];\r\n  list.map((item) => {\r\n    List.push(item);\r\n  });\r\n\r\n  const classes = useStyles();\r\n  const [order, setOrder] = React.useState(\"asc\");\r\n  const [orderBy, setOrderBy] = React.useState(\"Id\");\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <TableContainer>\r\n          <Table\r\n            className={classes.table}\r\n            aria-labelledby=\"tableTitle\"\r\n            size=\"medium\"\r\n          >\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onRequestSort={handleRequestSort}\r\n            />\r\n            <TableBody>\r\n              {stableSort(List, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  return (\r\n                    <TableRow hover tabIndex={-1} key={row.Id}>\r\n                      <TableCell align=\"center\">\r\n                        {row.commitmentType === \"donation\"\r\n                          ? row.commitment_timeStamp.split(\"T\")[0]\r\n                          : row.dateTime.split(\"T\")[0]}\r\n                      </TableCell>\r\n                      <TableCell id={index} align=\"center\">\r\n                        {row.commitmentType}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {row.commitmentType === \"donation\"\r\n                          ? row.donationId\r\n                          : row.driveId}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {row.recipientAddress}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">{row.recipientType}</TableCell>\r\n                      <TableCell align=\"center\">{row.recipientName}</TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {row.recipientContact}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">{row.recipientEmail}</TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {row.commitmentType === \"donation\" ? (\r\n                          <p>N/A</p>\r\n                        ) : (\r\n                          <p>\r\n                            {row.startTimeStamp.split(\"T\")[0]},{\" \"}\r\n                            {row.startTimeStamp.split(\"T\")[1].split(\":\")[0]}:{\" \"}\r\n                            {row.startTimeStamp.split(\"T\")[1].split(\":\")[1]}{\" \"}\r\n                          </p>\r\n                        )}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {row.commitmentType === \"donation\" ? (\r\n                          <p>N/A</p>\r\n                        ) : (\r\n                          <p>\r\n                            {row.endTimeStamp.split(\"T\")[0]},{\" \"}\r\n                            {row.endTimeStamp.split(\"T\")[1].split(\":\")[0]}:{\" \"}\r\n                            {row.endTimeStamp.split(\"T\")[1].split(\":\")[1]}{\" \"}\r\n                          </p>\r\n                        )}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {row.status ? <p>Complete</p> : <p>Incomplete</p>}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={List.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\layouts\\loggedoutNavbar.js",["406","407","408"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Logo from \"./logo.svg\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  logo:{\r\n    height:40,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nfunction LoggedOutNavbar() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" style={{background: '#E94364'}}>\r\n      <Toolbar to=\"/\" component={Link} variant=\"dense\">\r\n        <img src={Logo} alt=\"logo\" className={classes.logo} />\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoggedOutNavbar;","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\redux\\Types\\registration.js",[],"D:\\Nineleaps\\New folder\\RedBank-Web\\src\\redux\\Types\\login.js",[],"D:\\Nineleaps\\New folder\\RedBank-Web\\src\\redux\\Actions\\login.js",[],"D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\layouts\\index.js",[],"D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\upcomingDrive\\useTable.js",["409","410","411","412","413","414","415","416","417","418","419","420","421","422","423","424","425","426","427"],"import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport clsx from \"clsx\";\r\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === \"desc\"\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"name\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Organiser Name\",\r\n  },\r\n  {\r\n    id: \"date\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Date\",\r\n  },\r\n  {\r\n    id: \"time\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Time\",\r\n  },\r\n  {\r\n    id: \"address\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Address\",\r\n  },\r\n  {\r\n    id: \"contact\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Contact\",\r\n  },\r\n  {\r\n    id: \"bloodGroups\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Invited Blood Groups\",\r\n  },\r\n  {\r\n    id: \"register\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Register here\",\r\n  },\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const { classes, order, orderBy, onRequestSort } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            style={{ fontWeight: \"bold\" }}\r\n            align=\"center\"\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : \"asc\"}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === \"light\"\r\n      ? {\r\n          color: \"theme.palette.secondary.main\",\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: \"1 1 100%\",\r\n  },\r\n}));\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  paper: {\r\n    width: \"100%\",\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: \"rect(0 0 0 0)\",\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: \"hidden\",\r\n    padding: 0,\r\n    position: \"absolute\",\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}));\r\n\r\nexport default function EnhancedTable({ list }) {\r\n  // console.log(props.list)\r\n  // const [list, setState] =useState(props.list);\r\n  var List = [];\r\n  list.map((item) => {\r\n    List.push(item);\r\n  });\r\n\r\n  const loggedInState = useSelector((state) => state.loggedIn);\r\n  const classes = useStyles();\r\n  const [order, setOrder] = React.useState(\"asc\");\r\n  const [orderBy, setOrderBy] = React.useState(\"contact\");\r\n\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleRegister = (driveId) => {\r\n    axios\r\n      .post(\r\n        \"http://localhost:8080/upcomingdrives/registerfordrive\",\r\n        {\r\n          driveId: \"DRV01\",\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: \"Bearer \" + loggedInState.userToken,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        if (response.data.success) {\r\n          console.log(response);\r\n          window.alert(\"Successfully Registered\");\r\n        } else {\r\n          console.log(response);\r\n          window.alert(\"You are already Registered\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <TableContainer>\r\n          <Table className={classes.table} size=\"medium\">\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onRequestSort={handleRequestSort}\r\n            />\r\n            <TableBody>\r\n              {stableSort(List, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  return (\r\n                    <TableRow hover tabIndex={-1} key={row.driveId}>\r\n                      <TableCell align=\"center\">{row.name}</TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {row.startTimestamp.split(\"T\")[0]} --{\" \"}\r\n                        {row.endTimestamp.split(\"T\")[0]}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {row.startTimestamp.split(\"T\")[1].split(\":\")[0]} :\r\n                        {row.startTimestamp.split(\"T\")[1].split(\":\")[1]} --{\" \"}\r\n                        {row.endTimestamp.split(\"T\")[1].split(\":\")[0]} :\r\n                        {row.endTimestamp.split(\"T\")[1].split(\":\")[1]}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {row.address}, {row.district}, {row.state},{row.pincode}\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">{row.contact}</TableCell>\r\n                      <TableCell align=\"center\">{row.bloodGroups}</TableCell>\r\n                      <TableCell align=\"center\">\r\n                        <Button onClick={(e) => handleRegister(row.driveId)}>\r\n                          Register\r\n                        </Button>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={List.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\buyBlood\\useTable.js",["428","429","430","431","432","433","434","435","436","437"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport clsx from \"clsx\";\r\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n// import Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === \"desc\"\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  { id: \"bbId\", numeric: false, disablePadding: false, label: \"Blood Bank Id\" },\r\n  {\r\n    id: \"name\",\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: \"Name\",\r\n  },\r\n  { id: \"contact\", numeric: false, disablePadding: false, label: \"Contact\" },\r\n  { id: \"price\", numeric: false, disablePadding: false, label: \"Price (Rs.)\" },\r\n  { id: \"actions\", label: \"Actions\", disableSorting: false },\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const { classes, order, orderBy, onRequestSort } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align=\"center\"\r\n            style={{ paddingLeft: \"20px\", fontWeight: \"bold\" }}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : \"asc\"}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === \"light\"\r\n      ? {\r\n          color: \"theme.palette.secondary.main\",\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: \"1 1 100%\",\r\n  },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n  const classes = useToolbarStyles();\r\n  const { numSelected, data } = props;\r\n\r\n  return (\r\n    <Toolbar\r\n      className={clsx(classes.root, {\r\n        [classes.highlight]: numSelected > 0,\r\n      })}\r\n    >\r\n      <Typography\r\n        className={classes.title}\r\n        variant=\"h6\"\r\n        id=\"tableTitle\"\r\n        component=\"div\"\r\n      >\r\n        List of all available Blood Banks\r\n      </Typography>\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  paper: {\r\n    width: \"100%\",\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: \"rect(0 0 0 0)\",\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: \"hidden\",\r\n    padding: 0,\r\n    position: \"absolute\",\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}));\r\n\r\nexport default function EnhancedTable({ list, bg, component, units }) {\r\n  var List = [];\r\n  list.map((item) => {\r\n    List.push(item);\r\n  });\r\n  console.log(List);\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const [order, setOrder] = React.useState(\"asc\");\r\n  const [orderBy, setOrderBy] = React.useState(\"contact\");\r\n  const [selected, setSelected] = React.useState([]);\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n  // const [ buybtn , setOpenPopup ] = useState(null);\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  // const [iota, setBuybtn] = React.useState({\r\n  //   bg: bg,\r\n  //   component: component,\r\n  //   units: units,\r\n  //   amount: units * List.price,\r\n  // });\r\n\r\n  const handleClick = (event, price, bbId) => {\r\n    event.preventDefault();\r\n    history.push({\r\n      pathname: \"/BuyBlood/Product\",\r\n      bg,\r\n      component,\r\n      price,\r\n      units,\r\n      bbId,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <EnhancedTableToolbar />\r\n        <TableContainer>\r\n          <Table\r\n            className={classes.table}\r\n            aria-labelledby=\"tableTitle\"\r\n            size=\"medium\"\r\n            aria-label=\"enhanced table\"\r\n          >\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onRequestSort={handleRequestSort}\r\n            />\r\n            <TableBody>\r\n              {stableSort(List, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      role=\"checkbox\"\r\n                      tabIndex={-1}\r\n                      key={row.bbId}\r\n                    >\r\n                      <TableCell align=\"center\">{row.bbId}</TableCell>\r\n                      <TableCell align=\"center\">{row.bbName}</TableCell>\r\n                      <TableCell align=\"center\">{row.phoneNo}</TableCell>\r\n                      <TableCell align=\"center\">{row.price}</TableCell>\r\n                      <TableCell align=\"center\">\r\n                        <Button\r\n                          onClick={(event) => {\r\n                            handleClick(event, row.price, row.bbId);\r\n                          }}\r\n                          type=\"button\"\r\n                          variant=\"contained\"\r\n                        >\r\n                          Buy\r\n                        </Button>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={List.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\findDonors\\useTable.js",["438","439","440"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport clsx from \"clsx\";\r\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport axios from \"axios\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === \"desc\"\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: \"userid\",\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: \"User Id\",\r\n  },\r\n  {\r\n    id: \"name\",\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: \"Name\",\r\n  },\r\n\r\n  { id: \"address\", numeric: true, disablePadding: false, label: \"Address\" },\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const {\r\n    classes,\r\n    onSelectAllClick,\r\n    order,\r\n    orderBy,\r\n    numSelected,\r\n    rowCount,\r\n    onRequestSort,\r\n  } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ \"aria-label\": \"select all desserts\" }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            style={{ fontWeight: \"bold\" }}\r\n            align=\"center\"\r\n            padding={headCell.disablePadding ? \"none\" : \"default\"}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : \"asc\"}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === \"light\"\r\n      ? {\r\n          color: \"theme.palette.secondary.main\",\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  title: {\r\n    flex: \"1 1 100%\",\r\n  },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n  const classes = useToolbarStyles();\r\n  const { numSelected, data, formData } = props;\r\n  const loggedInState = useSelector((state) => state.loggedIn);\r\n  const reqBody = {};\r\n\r\n  function handleSend() {\r\n    // add form data to axios call\r\n    // data -> array of selected ids\r\n    // formData -> form data\r\n    reqBody.address = formData.address;\r\n    reqBody.state = formData.state;\r\n    reqBody.district = formData.district;\r\n    reqBody.pincode = formData.pincode;\r\n    reqBody.address = formData.address;\r\n    reqBody.bloodGroup = formData.bloodGroup;\r\n    reqBody.idList = data;\r\n\r\n    console.log(formData);\r\n\r\n    axios\r\n      .post(\"http://localhost:8080/finddonors/sendnotification\", reqBody, {\r\n        headers: {\r\n          Authorization: \"Bearer \" + loggedInState.userToken,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        // if (response.data.success) {\r\n        // console.log(response);\r\n        // }\r\n        console.log(\"works\");\r\n      })\r\n      .catch();\r\n  }\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClosed = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <Toolbar\r\n      className={clsx(classes.root, {\r\n        [classes.highlight]: numSelected > 0,\r\n      })}\r\n    >\r\n      {numSelected > 0 ? (\r\n        <Typography\r\n          className={classes.title}\r\n          color=\"inherit\"\r\n          variant=\"subtitle1\"\r\n          component=\"div\"\r\n        >\r\n          {numSelected} selected\r\n        </Typography>\r\n      ) : (\r\n        <Typography\r\n          className={classes.title}\r\n          variant=\"h6\"\r\n          id=\"tableTitle\"\r\n          component=\"div\"\r\n        >\r\n          List of all available Donors\r\n        </Typography>\r\n      )}\r\n\r\n      {numSelected > 0 ? (\r\n        <>\r\n          <Tooltip title=\"Send Notification\">\r\n            <Button variant=\"contained\" onClick={handleClickOpen}>\r\n              Send\r\n            </Button>\r\n          </Tooltip>\r\n          <Dialog\r\n            open={open}\r\n            onClose={handleClosed}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n          >\r\n            <DialogTitle id=\"alert-dialog-title\">{\"Are You Sure?\"}</DialogTitle>\r\n            <DialogActions>\r\n              <Button onClick={handleClosed} color=\"primary\">\r\n                No\r\n              </Button>\r\n              <Button\r\n                onClick={() => {\r\n                  window.alert(\"Notification Sent\");\r\n                  handleSend();\r\n                  handleClosed();\r\n                  // make a axios call for second find donors api\r\n                }}\r\n                color=\"primary\"\r\n                autoFocus\r\n              >\r\n                Yes\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </>\r\n      ) : null}\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n  numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  paper: {\r\n    width: \"100%\",\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: \"rect(0 0 0 0)\",\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: \"hidden\",\r\n    padding: 0,\r\n    position: \"absolute\",\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}));\r\n\r\nexport default function EnhancedTable({ list, formData }) {\r\n  var List = [];\r\n  list.map((item) => {\r\n    List.push(item);\r\n  });\r\n\r\n  const classes = useStyles();\r\n  const [order, setOrder] = React.useState(\"asc\");\r\n  const [orderBy, setOrderBy] = React.useState(\"contact\");\r\n  const [selected, setSelected] = React.useState([]);\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = List.map((n) => n.userId);\r\n      setSelected(newSelecteds);\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const isSelected = (userId) => selected.indexOf(userId) !== -1;\r\n\r\n  const emptyRows =\r\n    rowsPerPage - Math.min(rowsPerPage, List.length - page * rowsPerPage);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <EnhancedTableToolbar\r\n          numSelected={selected.length}\r\n          data={selected}\r\n          formData={formData}\r\n        />\r\n        <TableContainer>\r\n          <Table\r\n            className={classes.table}\r\n            aria-labelledby=\"tableTitle\"\r\n            size=\"medium\"\r\n            aria-label=\"enhanced table\"\r\n          >\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onSelectAllClick={handleSelectAllClick}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={List.length}\r\n            />\r\n            <TableBody>\r\n              {stableSort(List, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  const isItemSelected = isSelected(row.userId);\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      onClick={(event) => handleClick(event, row.userId)}\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={row.userId}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          checked={isItemSelected}\r\n                          inputProps={{ \"aria-labelledby\": labelId }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell align=\"center\">{row.userId}</TableCell>\r\n                      <TableCell align=\"center\">{row.name}</TableCell>\r\n                      <TableCell align=\"center\">\r\n                        {row.address}, {row.district}, {row.state},{\" \"}\r\n                        {row.pincode}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={List.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\profile\\profile.js",["441","442"],"import React from \"react\";\r\nimport ProfileForm from \"./profileForm\";\r\nimport OrgForm from \"./orgForm\";\r\nimport { makeStyles, Paper } from \"@material-ui/core\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paperStyle: {\r\n    margin: theme.spacing(5),\r\n    padding: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nfunction Profile() {\r\n  const classes = useStyles();\r\n  const loggedInState = useSelector((state) => state.loggedIn);\r\n  return (\r\n    <>\r\n      <Paper className={classes.paperStyle} elevation={5}>\r\n        <ProfileForm />\r\n        {/* {loggedInState.userType === 0 ? <ProfileForm /> : <>\r\n          {loggedInState.userType === 1 ? <OrgForm /> : <OrgForm />}\r\n          </>} */}\r\n      </Paper>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Profile;\r\n","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\home\\services\\HospitalServices.js",["443","444"],"import saleImg from \"./images/mySales.jpg\"\r\nimport buyImg from \"./images/cart2.jpg\"\r\nimport findDonorImg from \"./images/findDonor.jpg\"\r\nimport commitmentImg from \"./images/myCommitments.jpg\"\r\nimport invitesImg from \"./images/myInvites.jpg\"\r\nimport sentRequestImg from \"./images/sentRequests.jpg\"\r\nimport upcomingDriveImg from \"./images/upcomingDrives.jpg\"\r\n\r\n\r\n\r\nconst HospitalServices = [\r\n    {\r\n      image: buyImg,\r\n      name: \"Buy Blood\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"BuyBlood\",\r\n    },\r\n    {\r\n      image: findDonorImg,\r\n      name: \"Find Donors\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"FindDonors\",\r\n    },\r\n    {\r\n      image: commitmentImg,\r\n      name: \"My Commitments\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"MyCommitments\",\r\n    },\r\n    {\r\n      image: saleImg,\r\n      name: \"My Purchases\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"MyPurchases\",\r\n    },\r\n    {\r\n      image: sentRequestImg,\r\n      name: \"Sent Request\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"ActiveDonorReq\",\r\n    },\r\n    \r\n    {\r\n      image: saleImg,\r\n      name: \"My Inventory\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"MyInventory\",\r\n    },\r\n    {\r\n      image: saleImg,\r\n      name: \"Conduct a Drive\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"ConductDrive\",\r\n    },\r\n    {\r\n      image: saleImg,\r\n      name: \"My Drives\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"MyDrives\",\r\n    },\r\n  ];\r\n  \r\n  \r\n \r\n  \r\nexport default HospitalServices;\r\n  ","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\home\\services\\BankServices.js",["445","446"],"import saleImg from \"./images/mySales.jpg\"\r\nimport buyImg from \"./images/cart2.jpg\"\r\nimport findDonorImg from \"./images/findDonor.jpg\"\r\nimport commitmentImg from \"./images/myCommitments.jpg\"\r\nimport invitesImg from \"./images/myInvites.jpg\"\r\nimport sentRequestImg from \"./images/sentRequests.jpg\"\r\nimport upcomingDriveImg from \"./images/upcomingDrives.jpg\"\r\n\r\nconst BankServices = [\r\n    {\r\n      image: buyImg,\r\n      name: \"Buy Blood\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"BuyBlood\",\r\n    },\r\n    {\r\n      image: findDonorImg,\r\n      name: \"Find Donors\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"FindDonors\",\r\n    },\r\n    {\r\n      image: commitmentImg,\r\n      name: \"My Commitments\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"MyCommitments\",\r\n    },\r\n    {\r\n      image: saleImg,\r\n      name: \"My Purchases\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"MyPurchases\",\r\n    },\r\n    {\r\n      image: sentRequestImg,\r\n      name: \"Sent Request\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"ActiveDonorReq\",\r\n    },\r\n    {\r\n      image: saleImg,\r\n      name: \"My Inventory\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"MyInventory\",\r\n    },\r\n    {\r\n      image: saleImg,\r\n      name: \"Conduct a Drive\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"ConductDrive\",\r\n    },\r\n    {\r\n      image: saleImg,\r\n      name: \"My Drives\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"MyDrives\",\r\n    },\r\n    {\r\n      image: saleImg,\r\n      name: \"My Sales\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"MySales\",\r\n    },\r\n  ];\r\n\r\n\r\n  const BloodBankServices = [\r\n    {\r\n      image: buyImg,\r\n      name: \"Buy Blood\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"BuyBlood\",\r\n    },\r\n    {\r\n      image: findDonorImg,\r\n      name: \"Find Donors\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"FindDonors\",\r\n    },\r\n    {\r\n      image: commitmentImg,\r\n      name: \"My Commitments\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"MyCommitments\",\r\n    },\r\n    {\r\n      image: saleImg,\r\n      name: \"My Purchases\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"MyPurchases\",\r\n    },\r\n    {\r\n      image: sentRequestImg,\r\n      name: \"Sent Request\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"ActiveDonorReq\",\r\n    },\r\n    {\r\n      image: upcomingDriveImg,\r\n      name: \"Upcoming Drives\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"ActiveDonorReq\",\r\n    },\r\n    {\r\n      image: saleImg,\r\n      name: \"My Inventory\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"MyInventory\",\r\n    },\r\n    {\r\n      image: saleImg,\r\n      name: \"Conduct a Drive\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"ConductDrive\",\r\n    },\r\n    {\r\n      image: saleImg,\r\n      name: \"My Drives\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"MyDrives\",\r\n    },\r\n    {\r\n      image: saleImg,\r\n      name: \"My Sales\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"MySales\",\r\n    },\r\n    {\r\n   \r\n   image: invitesImg,\r\n      name: \"My Invites\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"MyInvites\",\r\n    },\r\n  ];\r\n\r\n  const HospitalServices = [\r\n    {\r\n      image: buyImg,\r\n      name: \"Buy Blood\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"BuyBlood\",\r\n    },\r\n    {\r\n      image: findDonorImg,\r\n      name: \"Find Donors\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"FindDonors\",\r\n    },\r\n    {\r\n      image: commitmentImg,\r\n      name: \"My Commitments\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"MyCommitments\",\r\n    },\r\n    {\r\n      image: saleImg,\r\n      name: \"My Purchases\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"MyPurchases\",\r\n    },\r\n    {\r\n      image: sentRequestImg,\r\n      name: \"Sent Request\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"ActiveDonorReq\",\r\n    },\r\n    {\r\n      image: upcomingDriveImg,\r\n      name: \"Upcoming Drives\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"ActiveDonorReq\",\r\n    },\r\n    {\r\n      image: saleImg,\r\n      name: \"My Inventory\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"MyInventory\",\r\n    },\r\n    {\r\n      image: saleImg,\r\n      name: \"Conduct a Drive\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"ConductDrive\",\r\n    },\r\n    {\r\n      image: saleImg,\r\n      name: \"My Drives\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"MyDrives\",\r\n    },\r\n    {\r\n      image: saleImg,\r\n      name: \"My Sales\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"MySales\",\r\n    },\r\n    {\r\n   \r\n   image: invitesImg,\r\n      name: \"My Invites\",\r\n      description:\r\n        \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n      page: \"MyInvites\",\r\n    },\r\n  ];\r\n\r\nexport default BankServices;","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\home\\services\\indiServices.js",["447"],"import React from \"react\";\r\nimport saleImg from \"./images/mySales.jpg\";\r\nimport buyImg from \"./images/cart2.jpg\";\r\nimport findDonorImg from \"./images/findDonor.jpg\";\r\nimport commitmentImg from \"./images/myCommitments.jpg\";\r\nimport invitesImg from \"./images/myInvites.jpg\";\r\nimport sentRequestImg from \"./images/sentRequests.jpg\";\r\nimport upcomingDriveImg from \"./images/upcomingDrives.jpg\";\r\n\r\nconst IndividualServices = [\r\n  {\r\n    image: buyImg,\r\n    name: \"Buy Blood\",\r\n    description:\r\n      \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n    page: \"BuyBlood\",\r\n  },\r\n  {\r\n    image: findDonorImg,\r\n    name: \"Find Donors\",\r\n    description:\r\n      \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n    page: \"FindDonors\",\r\n  },\r\n  {\r\n    image: commitmentImg,\r\n    name: \"My Commitments\",\r\n    description:\r\n      \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n    page: \"MyCommitments\",\r\n  },\r\n  {\r\n    image: saleImg,\r\n    name: \"My Purchases\",\r\n    description:\r\n      \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n    page: \"MyPurchases\",\r\n  },\r\n  {\r\n    image: sentRequestImg,\r\n    name: \"Sent Request\",\r\n    description:\r\n      \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n    page: \"ActiveDonorReq\",\r\n  },\r\n  {\r\n    image: upcomingDriveImg,\r\n    name: \"Upcoming Drives\",\r\n    description:\r\n      \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n    page: \"ActiveDonorReq\",\r\n  },\r\n  {\r\n    image: invitesImg,\r\n    name: \"My Invites\",\r\n    description:\r\n      \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n    page: \"MyInvites\",\r\n  },\r\n];\r\n\r\nexport default IndividualServices;\r\n","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\layouts\\footer.js",[],"D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\layouts\\navbar.js",["448","449","450"],"D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\profile\\pageHeader.js",["451"],"import {\r\n  Card,\r\n  makeStyles,\r\n  Paper,\r\n  Typography,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: \"#CCCCCC\",\r\n  },\r\n  PageHeader: {\r\n    diplay: \"flex\",\r\n    padding: theme.spacing(6),\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n\r\n  PageTitle: {\r\n    paddingLeft: theme.spacing(4),\r\n    \"& .MuiTypography-h6\": {\r\n      opacity: \"0.6\",\r\n    },\r\n  },\r\n}));\r\n\r\nfunction PageHeader(props) {\r\n  const classes = useStyles();\r\n  const { title, subtitle } = props;\r\n  return (\r\n    <Paper elevation={5} square className={classes.root}>\r\n      <div className={classes.PageHeader}>\r\n        <div className={classes.PageTitle}>\r\n          <Typography variant=\"h3\" component=\"div\">\r\n            {title}\r\n          </Typography>\r\n          <Divider />\r\n          <Typography variant=\"h6\" component=\"div\">\r\n            {subtitle}\r\n          </Typography>\r\n        </div>\r\n      </div>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nexport default PageHeader;\r\n","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\profile\\orgForm.js",["452"],"import React, { useState } from \"react\";\r\nimport {\r\n  Grid,\r\n  TextField,\r\n  makeStyles,\r\n  Button,\r\n  ButtonGroup,\r\n} from \"@material-ui/core\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& .MuiFormControl-root\": {\r\n      width: \"80%\",\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  div1: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nconst initialValues = {\r\n  name: \"Aditya Tomar\",\r\n  email: \"adityatomar765@gmail.com\",\r\n  phone: \"812736191\",\r\n  license: \"ABV1234\",\r\n  address: \"79/3-A, address line 1\",\r\n  state: \"Uttarakhand\",\r\n  district: \"Dehradun\",\r\n  pincode: \"248001\",\r\n  password: \"aditya\",\r\n};\r\n\r\nfunction OrgForm() {\r\n  const classes = useStyles();\r\n  const [values, setValues] = useState(initialValues);\r\n  const [enableReadOnly, setEdit] = useState(true);\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const [inputPassword, setPassword] = React.useState(\"\");\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setValues({\r\n      ...values,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const handleEdit = () => {\r\n    window.alert(\"You can start editing !\");\r\n    setEdit(false);\r\n  };\r\n\r\n  const handleSave = () => {\r\n    window.alert(\"Changes have been saved !\");\r\n    setEdit(true);\r\n    console.log(values);\r\n  };\r\n\r\n  const handlePasswordChange = () => {\r\n    var currPassword = window.prompt(\"Please enter current Password :\");\r\n\r\n    if (currPassword === values.password) {\r\n      handleClickOpen();\r\n    } else {\r\n      window.alert(\"wrong password\");\r\n    }\r\n  };\r\n\r\n  const handleInputPassword = (e) => {\r\n    setPassword(e.taget.value);\r\n  };\r\n  return (\r\n    <>\r\n      <form className={classes.root}>\r\n        <Grid container>\r\n          <Grid item xs={6}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              label=\"Full name\"\r\n              name=\"name\"\r\n              value={values.name}\r\n              onChange={handleChange}\r\n              InputProps={{\r\n                readOnly: true,\r\n              }}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              label=\"Email\"\r\n              name=\"email\"\r\n              value={values.email}\r\n              onChange={handleChange}\r\n              InputProps={{\r\n                readOnly: true,\r\n              }}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              label=\"Address\"\r\n              name=\"address\"\r\n              value={values.address}\r\n              onChange={handleChange}\r\n              InputProps={{\r\n                readOnly: enableReadOnly,\r\n              }}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              label=\"State\"\r\n              name=\"state\"\r\n              value={values.state}\r\n              onChange={handleChange}\r\n              InputProps={{\r\n                readOnly: enableReadOnly,\r\n              }}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              label=\"Password\"\r\n              name=\"password\"\r\n              value={values.password}\r\n              onChange={handleChange}\r\n              type=\"password\"\r\n              InputProps={{\r\n                readOnly: true,\r\n              }}\r\n            />\r\n            <div className={classes.div1}>\r\n              <Button onClick={handlePasswordChange}>\r\n                change your password ?\r\n              </Button>\r\n            </div>\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              label=\"Phone number\"\r\n              name=\"phone\"\r\n              value={values.phone}\r\n              onChange={handleChange}\r\n              type=\"number\"\r\n              InputProps={{\r\n                readOnly: enableReadOnly,\r\n              }}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              label=\"License\"\r\n              name=\"license\"\r\n              value={values.license}\r\n              onChange={handleChange}\r\n              InputProps={{\r\n                readOnly: true,\r\n              }}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              label=\"District\"\r\n              name=\"district\"\r\n              value={values.district}\r\n              onChange={handleChange}\r\n              InputProps={{\r\n                readOnly: enableReadOnly,\r\n              }}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              label=\"Pincode\"\r\n              name=\"pincode\"\r\n              value={values.pincode}\r\n              onChange={handleChange}\r\n              type=\"number\"\r\n              InputProps={{\r\n                readOnly: enableReadOnly,\r\n              }}\r\n            />\r\n            <div className={classes.div1}>\r\n              <ButtonGroup\r\n                variant=\"contained\"\r\n                aria-label=\"contained primary button group\"\r\n              >\r\n                <Button color=\"secondary\" onClick={handleEdit}>\r\n                  Edit\r\n                </Button>\r\n                <Button onClick={handleSave}>Save</Button>\r\n              </ButtonGroup>\r\n            </div>\r\n\r\n            <Dialog\r\n              open={open}\r\n              onClose={handleClose}\r\n              aria-labelledby=\"alert-dialog-title\"\r\n              aria-describedby=\"alert-dialog-description\"\r\n            >\r\n              <DialogTitle id=\"alert-dialog-title\">\r\n                {\"Reset Password\"}\r\n              </DialogTitle>\r\n              <DialogContent>\r\n                <TextField\r\n                  label=\"enter new password\"\r\n                  value={inputPassword}\r\n                  onchange={handleInputPassword}\r\n                />\r\n              </DialogContent>\r\n              <DialogActions>\r\n                <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n                  Change\r\n                </Button>\r\n              </DialogActions>\r\n            </Dialog>\r\n          </Grid>\r\n        </Grid>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\nexport default OrgForm;\r\n","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\profile\\profileForm.js",["453","454","455","456","457","458","459","460","461","462"],"import React, { useState } from \"react\";\r\nimport {\r\n  Grid,\r\n  TextField,\r\n  makeStyles,\r\n  Button,\r\n  ButtonGroup,\r\n  Typography,\r\n  Container,\r\n} from \"@material-ui/core\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport {\r\n  Card,\r\n  CardActionArea,\r\n  CardContent,\r\n  CardActions,\r\n  CardMedia,\r\n} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    marginTop: theme.spacing(1),\r\n    padding: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nconst initialValues = {\r\n  name: \"Aditya Tomar\",\r\n  email: \"adityatomar765@gmail.com\",\r\n  phone: \"812736191\",\r\n  bg: \"B+\",\r\n  dob: \"06-09-1998\",\r\n  address: \"79/3-A, address line 1\",\r\n  state: \"Uttarakhand\",\r\n  district: \"Dehradun\",\r\n  pincode: \"248001\",\r\n  password: \"aditya\",\r\n};\r\n\r\nfunction ProfileForm() {\r\n  const classes = useStyles();\r\n  const [values, setValues] = useState(initialValues);\r\n  const [enableReadOnly, setEdit] = useState(true);\r\n\r\n  const handleEdit = () => {\r\n    window.alert(\"You can start editing !\");\r\n    setEdit(false);\r\n  };\r\n\r\n  const handleSave = () => {\r\n    window.alert(\"Changes have been saved !\");\r\n    setEdit(true);\r\n    console.log(values);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid container>\r\n        <Grid container align=\"center\" className={classes.container}>\r\n          <Grid item xs={12} sm={5}>\r\n            <CardMedia\r\n              image=\"https://avatarfiles.alphacoders.com/164/thumb-164819.png\"\r\n              style={{ height: 150, width: 150 }}\r\n              component=\"img\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={5}>\r\n            <CardContent>\r\n              <Typography variant=\"h6\">Username : {values.name}</Typography>\r\n              <Typography variant=\"h6\">User Id : #F132GH</Typography>\r\n            </CardContent>\r\n            <CardActions>\r\n              <Button variant=\"outlined\" color=\"secondary\" size=\"small\">\r\n                Active Donor\r\n              </Button>\r\n            </CardActions>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container align=\"center\" className={classes.container}>\r\n          <Grid item xs={12} sm={4}>\r\n            <Typography variant=\"h5\">\r\n              {\" \"}\r\n              Donation Made: <span style={{ color: \"#e94394\" }}> 6</span>\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} sm={4}>\r\n            <Typography variant=\"h5\">\r\n              Commitment Made: <span style={{ color: \"blue\" }}> 6</span>\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} sm={4}>\r\n            <Typography variant=\"h5\">\r\n              Drive Attended: <span style={{ color: \"green\" }}> 6</span>\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid item xs={8} sm={12} align=\"center\">\r\n          <Typography variant=\"h4\">About</Typography>\r\n        </Grid>\r\n\r\n        <Grid container className={classes.container} align=\"center\">\r\n          <Grid item xs={12} sm={12}>\r\n            <Typography variant=\"h5\">Email : {values.email}</Typography>\r\n            <Typography variant=\"h5\">Phone : {values.phone}</Typography>\r\n            <Typography variant=\"h5\">Date of Birth : {values.dob}</Typography>\r\n            <Typography variant=\"h5\">Blood Group : {values.bg}</Typography>\r\n            <Typography variant=\"h5\">Address : {values.address}</Typography>\r\n            <Typography variant=\"h5\">State : {values.state}</Typography>\r\n            <Typography variant=\"h5\">District : {values.disrtict}</Typography>\r\n            <Typography variant=\"h5\">Pincode : {values.pincode}</Typography>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid align=\"center\" item xs={12}>\r\n          <ButtonGroup\r\n            variant=\"contained\"\r\n            aria-label=\"contained primary button group\"\r\n            size=\"small\"\r\n          >\r\n            {enableReadOnly ? (\r\n              <Button color=\"secondary\" onClick={handleEdit}>\r\n                Edit profile\r\n              </Button>\r\n            ) : (\r\n              <Button color=\"secondary\" onClick={handleSave}>\r\n                Save Changes\r\n              </Button>\r\n            )}\r\n\r\n            <Button>Change your password</Button>\r\n          </ButtonGroup>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\nexport default ProfileForm;\r\n","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\redux\\Actions\\registerBloodBank.js",[],["463","464"],"D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\home\\serviceCard.js",["465","466","467","468"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Typography,\r\n  Box,\r\n  Container,\r\n  Grid,\r\n  Card,\r\n  CardMedia,\r\n  CardActionArea,\r\n  CardContent,\r\n  CardActions,\r\n  Button,\r\n  Divider,\r\n} from \"@material-ui/core/\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    maxWidth: 345,\r\n  },\r\n}));\r\n\r\nfunction ServiceCard({ img, name, descp, page }) {\r\n  const classes = useStyles();\r\n  console.log(img)\r\n  const history = useHistory();\r\n\r\n  const handleClick = () => {\r\n    history.push({\r\n      pathname: page,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card className={classes.root}>\r\n        <CardActionArea>\r\n          <CardMedia\r\n            component=\"img\"\r\n            image={img}\r\n            height=\"150\"\r\n          />\r\n          <CardContent>\r\n            <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n              {name}\r\n            </Typography>\r\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n              {descp}\r\n            </Typography>\r\n          </CardContent>\r\n        </CardActionArea>\r\n        <CardActions>\r\n          <Button size=\"small\" color=\"secondary\" onClick={handleClick}>\r\n            Click\r\n          </Button>\r\n        </CardActions>\r\n      </Card>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ServiceCard;\r\n","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\redux\\Actions\\registerHospital.js",[],"D:\\Nineleaps\\New folder\\RedBank-Web\\src\\redux\\Actions\\registerIndividual.js",[],"D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\myDrives\\acceptedDonors.js",["469"],"import { withStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button, Container } from \"@material-ui/core/\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { Typography } from \"@material-ui/core/\";\r\nimport { Navbar, Footer } from \"../../../layouts\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport axios from \"axios\";\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.common.white,\r\n    color: theme.palette.common.black,\r\n    fontWeight: \"bold\",\r\n    fontSize: 16,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    marginTop: theme.spacing(3),\r\n    padding: theme.spacing(3),\r\n  },\r\n  container: {\r\n    marginTop: theme.spacing(7),\r\n  },\r\n}));\r\n\r\nexport default function AcceptedDonors(props) {\r\n  const { donorsList, setDonors, drivesList } = props.location;\r\n  const classes = useStyles();\r\n  const loggedInState = useSelector((state) => state.loggedIn);\r\n\r\n  console.log(props.location);\r\n\r\n  const handleClick = (idx) => {\r\n    if (window.confirm(\"Are you sure ?\")) {\r\n      axios\r\n        .put(\r\n          \"http://localhost:8080/mydrives/drivedonorverification\",\r\n          {\r\n            driveId: drivesList[idx].driveId,\r\n            userId: donorsList[idx].userId,\r\n          },\r\n          {\r\n            headers: {\r\n              Authorization: \"Bearer \" + loggedInState.userToken,\r\n            },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          console.log(response);\r\n          var updatedList = [...donorsList];\r\n          updatedList[idx].donationStatus = false;\r\n          setDonors(updatedList);\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <Container maxWidth=\"lg\" className={classes.container}>\r\n        <Typography variant=\"h4\" align=\"center\">\r\n          List of all Donors\r\n        </Typography>\r\n        <TableContainer component={Paper} className={classes.root}>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <StyledTableCell align=\"center\">Donor Id</StyledTableCell>\r\n                <StyledTableCell align=\"center\">Donor Name</StyledTableCell>\r\n                <StyledTableCell align=\"center\">Blood Group</StyledTableCell>\r\n                <StyledTableCell align=\"center\">\r\n                  Donation Status\r\n                </StyledTableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {donorsList.map((row, idx) => (\r\n                <TableRow key={idx}>\r\n                  <TableCell align=\"center\">{row.userId}</TableCell>\r\n                  <TableCell align=\"center\">{row.name}</TableCell>\r\n                  <TableCell align=\"center\">{row.bloodGroup}</TableCell>\r\n                  <TableCell align=\"center\">\r\n                    <Button\r\n                      disabled={donorsList[idx].donationStatus}\r\n                      variant=\"contained\"\r\n                      color=\"secondary\"\r\n                      onClick={(e) => handleClick(idx)}\r\n                    >\r\n                      Given ?\r\n                    </Button>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Container>\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\myanalytics\\MyAnalytics.js",["470","471","472"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  makeStyles,\r\n  Paper,\r\n  Typography,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport { Navbar, Footer } from \"../../../layouts\";\r\nimport BarChart from \"./barChart\";\r\nimport LineChart from \"./lineChart\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    width: \"100%\",\r\n    flexDirection: \"column\",\r\n    margin: \"auto\",\r\n    padding: theme.spacing(1),\r\n  },\r\n  charts: {\r\n    margin: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nfunction MyAnalytics() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <Paper square elevation={5} className={classes.paper}>\r\n        <Typography variant=\"h4\">My Analytics</Typography>\r\n        <Divider />\r\n        <Typography variant=\"h6\">\r\n          Here you can view statistics about your data that is present with us\r\n        </Typography>\r\n      </Paper>\r\n      <Container maxWidth=\"lg\">\r\n        <Grid container justify=\"center\" className={classes.charts} spacing={5}>\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\">Sales and Revenue stats:</Typography>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} sm={6}>\r\n            <BarChart title=\"MAY\" />\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <BarChart title=\"JUNE\" />\r\n          </Grid>\r\n\r\n          <Grid item xs={12} sm={6}>\r\n            <BarChart title=\"JULY\" />\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <BarChart title=\"AUGUST\" />\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container justify=\"center\" className={classes.charts} spacing={5}>\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\">Inventory stats :</Typography>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} sm={4}>\r\n            <LineChart title=\"BLOOD\" />\r\n          </Grid>\r\n          <Grid item xs={12} sm={4}>\r\n            <LineChart title=\"PLASMA\" />\r\n          </Grid>\r\n          <Grid item xs={12} sm={4}>\r\n            <LineChart title=\"PLATELETS\" />\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MyAnalytics;\r\n","D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\myanalytics\\barChart.js",[],"D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\myanalytics\\lineChart.js",[],"D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\about\\bloodCompatibilityTable.js",[],"D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\NotFound.js",[],"D:\\Nineleaps\\New folder\\RedBank-Web\\src\\Components\\screen\\services\\activeDonorReq\\inviteesList.js",["473","474","475","476"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  makeStyles,\r\n  Paper,\r\n  Typography,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport { Navbar, Footer } from \"../../../layouts\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport axios from \"axios\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    width: \"100%\",\r\n\r\n    flexDirection: \"column\",\r\n    margin: \"auto\",\r\n    padding: theme.spacing(4),\r\n  },\r\n  table: {\r\n    margin: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nfunction FindDonors(props) {\r\n  const classes = useStyles();\r\n  const { donorsList, setDonors, active } = props.location;\r\n  const loggedInState = useSelector((state) => state.loggedIn);\r\n\r\n  const handleClick = (idx) => {\r\n    if (window.confirm(\"Are you sure ?\")) {\r\n      axios\r\n        .put(\r\n          \"http://localhost:8080/donationrequests/donationdonorverification\",\r\n          {\r\n            donationId: active[idx].donationId,\r\n            userId: donorsList[idx].userId,\r\n          },\r\n          {\r\n            headers: {\r\n              Authorization: \"Bearer \" + loggedInState.userToken,\r\n            },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          console.log(response);\r\n          var updatedList = [...donorsList];\r\n          updatedList[idx].donationStatus = true;\r\n          setDonors(updatedList);\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <Paper square elevation={5} className={classes.paper}>\r\n        <Typography variant=\"h4\">Invitees List</Typography>\r\n        <Divider />\r\n        <Typography variant=\"h6\">\r\n          list of the Invitees of the selected Request\r\n        </Typography>\r\n      </Paper>\r\n      <Container maxWidth=\"lg\">\r\n        <Grid container justify=\"center\" className={classes.table}>\r\n          <Grid item xs={12}>\r\n            <TableContainer component={Paper} className={classes.root}>\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell align=\"center\">Donor Id</TableCell>\r\n                    <TableCell align=\"center\">Donor Name</TableCell>\r\n                    <TableCell align=\"center\">Blood Group</TableCell>\r\n                    <TableCell align=\"center\">Donation Status</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {donorsList.map((row, idx) => (\r\n                    <TableRow key={idx}>\r\n                      <TableCell align=\"center\">{row.userId}</TableCell>\r\n                      <TableCell align=\"center\">{row.name}</TableCell>\r\n                      <TableCell align=\"center\">{row.bloodGroup}</TableCell>\r\n                      <TableCell align=\"center\">\r\n                        <Button\r\n                          disabled={donorsList[idx].donationStatus}\r\n                          variant=\"contained\"\r\n                          color=\"secondary\"\r\n                          onClick={(e) => handleClick(idx)}\r\n                        >\r\n                          Given ?\r\n                        </Button>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default FindDonors;\r\n",{"ruleId":"477","replacedBy":"478"},{"ruleId":"479","replacedBy":"480"},{"ruleId":"481","severity":1,"message":"482","line":39,"column":8,"nodeType":"483","messageId":"484","endLine":39,"endColumn":16},{"ruleId":"481","severity":1,"message":"485","line":7,"column":8,"nodeType":"483","messageId":"484","endLine":7,"endColumn":11},{"ruleId":"481","severity":1,"message":"486","line":2,"column":10,"nodeType":"483","messageId":"484","endLine":2,"endColumn":14},{"ruleId":"481","severity":1,"message":"485","line":6,"column":8,"nodeType":"483","messageId":"484","endLine":6,"endColumn":11},{"ruleId":"481","severity":1,"message":"487","line":1,"column":17,"nodeType":"483","messageId":"484","endLine":1,"endColumn":25},{"ruleId":"481","severity":1,"message":"486","line":2,"column":10,"nodeType":"483","messageId":"484","endLine":2,"endColumn":14},{"ruleId":"481","severity":1,"message":"488","line":6,"column":8,"nodeType":"483","messageId":"484","endLine":6,"endColumn":13},{"ruleId":"481","severity":1,"message":"489","line":9,"column":9,"nodeType":"483","messageId":"484","endLine":9,"endColumn":16},{"ruleId":"481","severity":1,"message":"485","line":19,"column":8,"nodeType":"483","messageId":"484","endLine":19,"endColumn":11},{"ruleId":"481","severity":1,"message":"490","line":21,"column":10,"nodeType":"483","messageId":"484","endLine":21,"endColumn":21},{"ruleId":"481","severity":1,"message":"491","line":22,"column":8,"nodeType":"483","messageId":"484","endLine":22,"endColumn":26},{"ruleId":"481","severity":1,"message":"485","line":20,"column":8,"nodeType":"483","messageId":"484","endLine":20,"endColumn":11},{"ruleId":"481","severity":1,"message":"492","line":68,"column":20,"nodeType":"483","messageId":"484","endLine":68,"endColumn":31},{"ruleId":"493","severity":1,"message":"494","line":249,"column":38,"nodeType":"495","messageId":"496","endLine":249,"endColumn":40},{"ruleId":"481","severity":1,"message":"492","line":68,"column":20,"nodeType":"483","messageId":"484","endLine":68,"endColumn":31},{"ruleId":"493","severity":1,"message":"494","line":249,"column":38,"nodeType":"495","messageId":"496","endLine":249,"endColumn":40},{"ruleId":"481","severity":1,"message":"497","line":16,"column":16,"nodeType":"483","messageId":"484","endLine":16,"endColumn":26},{"ruleId":"481","severity":1,"message":"485","line":19,"column":8,"nodeType":"483","messageId":"484","endLine":19,"endColumn":11},{"ruleId":"481","severity":1,"message":"488","line":21,"column":8,"nodeType":"483","messageId":"484","endLine":21,"endColumn":13},{"ruleId":"481","severity":1,"message":"498","line":22,"column":8,"nodeType":"483","messageId":"484","endLine":22,"endColumn":15},{"ruleId":"481","severity":1,"message":"490","line":24,"column":10,"nodeType":"483","messageId":"484","endLine":24,"endColumn":21},{"ruleId":"481","severity":1,"message":"499","line":24,"column":23,"nodeType":"483","messageId":"484","endLine":24,"endColumn":34},{"ruleId":"481","severity":1,"message":"500","line":25,"column":8,"nodeType":"483","messageId":"484","endLine":25,"endColumn":24},{"ruleId":"481","severity":1,"message":"499","line":6,"column":10,"nodeType":"483","messageId":"484","endLine":6,"endColumn":21},{"ruleId":"481","severity":1,"message":"498","line":7,"column":8,"nodeType":"483","messageId":"484","endLine":7,"endColumn":15},{"ruleId":"481","severity":1,"message":"501","line":2,"column":10,"nodeType":"483","messageId":"484","endLine":2,"endColumn":20},{"ruleId":"481","severity":1,"message":"502","line":1,"column":17,"nodeType":"483","messageId":"484","endLine":1,"endColumn":26},{"ruleId":"481","severity":1,"message":"485","line":20,"column":8,"nodeType":"483","messageId":"484","endLine":20,"endColumn":11},{"ruleId":"481","severity":1,"message":"499","line":22,"column":10,"nodeType":"483","messageId":"484","endLine":22,"endColumn":21},{"ruleId":"481","severity":1,"message":"499","line":21,"column":10,"nodeType":"483","messageId":"484","endLine":21,"endColumn":21},{"ruleId":"481","severity":1,"message":"503","line":8,"column":3,"nodeType":"483","messageId":"484","endLine":8,"endColumn":7},{"ruleId":"481","severity":1,"message":"504","line":9,"column":3,"nodeType":"483","messageId":"484","endLine":9,"endColumn":12},{"ruleId":"481","severity":1,"message":"502","line":1,"column":27,"nodeType":"483","messageId":"484","endLine":1,"endColumn":36},{"ruleId":"481","severity":1,"message":"499","line":12,"column":10,"nodeType":"483","messageId":"484","endLine":12,"endColumn":21},{"ruleId":"505","severity":1,"message":"506","line":47,"column":6,"nodeType":"507","endLine":47,"endColumn":8,"suggestions":"508"},{"ruleId":"481","severity":1,"message":"509","line":15,"column":8,"nodeType":"483","messageId":"484","endLine":15,"endColumn":25},{"ruleId":"481","severity":1,"message":"499","line":19,"column":10,"nodeType":"483","messageId":"484","endLine":19,"endColumn":21},{"ruleId":"505","severity":1,"message":"506","line":46,"column":6,"nodeType":"507","endLine":46,"endColumn":8,"suggestions":"510"},{"ruleId":"481","severity":1,"message":"487","line":1,"column":17,"nodeType":"483","messageId":"484","endLine":1,"endColumn":25},{"ruleId":"481","severity":1,"message":"502","line":1,"column":27,"nodeType":"483","messageId":"484","endLine":1,"endColumn":36},{"ruleId":"481","severity":1,"message":"488","line":11,"column":8,"nodeType":"483","messageId":"484","endLine":11,"endColumn":13},{"ruleId":"481","severity":1,"message":"511","line":17,"column":8,"nodeType":"483","messageId":"484","endLine":17,"endColumn":20},{"ruleId":"481","severity":1,"message":"485","line":20,"column":8,"nodeType":"483","messageId":"484","endLine":20,"endColumn":11},{"ruleId":"481","severity":1,"message":"509","line":24,"column":8,"nodeType":"483","messageId":"484","endLine":24,"endColumn":25},{"ruleId":"481","severity":1,"message":"499","line":27,"column":10,"nodeType":"483","messageId":"484","endLine":27,"endColumn":21},{"ruleId":"481","severity":1,"message":"512","line":105,"column":9,"nodeType":"483","messageId":"484","endLine":105,"endColumn":24},{"ruleId":"481","severity":1,"message":"487","line":1,"column":17,"nodeType":"483","messageId":"484","endLine":1,"endColumn":25},{"ruleId":"505","severity":1,"message":"506","line":47,"column":6,"nodeType":"507","endLine":47,"endColumn":8,"suggestions":"513"},{"ruleId":"481","severity":1,"message":"487","line":1,"column":17,"nodeType":"483","messageId":"484","endLine":1,"endColumn":25},{"ruleId":"481","severity":1,"message":"502","line":1,"column":27,"nodeType":"483","messageId":"484","endLine":1,"endColumn":36},{"ruleId":"481","severity":1,"message":"488","line":10,"column":8,"nodeType":"483","messageId":"484","endLine":10,"endColumn":13},{"ruleId":"481","severity":1,"message":"490","line":12,"column":10,"nodeType":"483","messageId":"484","endLine":12,"endColumn":21},{"ruleId":"481","severity":1,"message":"487","line":1,"column":17,"nodeType":"483","messageId":"484","endLine":1,"endColumn":25},{"ruleId":"481","severity":1,"message":"502","line":1,"column":27,"nodeType":"483","messageId":"484","endLine":1,"endColumn":36},{"ruleId":"481","severity":1,"message":"488","line":10,"column":8,"nodeType":"483","messageId":"484","endLine":10,"endColumn":13},{"ruleId":"481","severity":1,"message":"514","line":3,"column":8,"nodeType":"483","messageId":"484","endLine":3,"endColumn":11},{"ruleId":"481","severity":1,"message":"515","line":4,"column":8,"nodeType":"483","messageId":"484","endLine":4,"endColumn":16},{"ruleId":"481","severity":1,"message":"499","line":15,"column":10,"nodeType":"483","messageId":"484","endLine":15,"endColumn":21},{"ruleId":"505","severity":1,"message":"506","line":57,"column":6,"nodeType":"507","endLine":57,"endColumn":8,"suggestions":"516"},{"ruleId":"505","severity":1,"message":"517","line":109,"column":6,"nodeType":"507","endLine":109,"endColumn":18,"suggestions":"518"},{"ruleId":"481","severity":1,"message":"519","line":4,"column":10,"nodeType":"483","messageId":"484","endLine":4,"endColumn":17},{"ruleId":"481","severity":1,"message":"520","line":14,"column":8,"nodeType":"483","messageId":"484","endLine":14,"endColumn":24},{"ruleId":"481","severity":1,"message":"521","line":15,"column":8,"nodeType":"483","messageId":"484","endLine":15,"endColumn":14},{"ruleId":"481","severity":1,"message":"522","line":18,"column":10,"nodeType":"483","messageId":"484","endLine":18,"endColumn":15},{"ruleId":"481","severity":1,"message":"523","line":18,"column":17,"nodeType":"483","messageId":"484","endLine":18,"endColumn":26},{"ruleId":"505","severity":1,"message":"506","line":197,"column":6,"nodeType":"507","endLine":197,"endColumn":8,"suggestions":"524"},{"ruleId":"505","severity":1,"message":"506","line":63,"column":6,"nodeType":"507","endLine":63,"endColumn":8,"suggestions":"525"},{"ruleId":"493","severity":1,"message":"494","line":127,"column":31,"nodeType":"495","messageId":"496","endLine":127,"endColumn":33},{"ruleId":"481","severity":1,"message":"519","line":4,"column":10,"nodeType":"483","messageId":"484","endLine":4,"endColumn":17},{"ruleId":"481","severity":1,"message":"520","line":14,"column":8,"nodeType":"483","messageId":"484","endLine":14,"endColumn":24},{"ruleId":"481","severity":1,"message":"521","line":15,"column":8,"nodeType":"483","messageId":"484","endLine":15,"endColumn":14},{"ruleId":"526","severity":1,"message":"527","line":184,"column":19,"nodeType":"528","messageId":"529","endLine":184,"endColumn":21},{"ruleId":"481","severity":1,"message":"499","line":15,"column":10,"nodeType":"483","messageId":"484","endLine":15,"endColumn":21},{"ruleId":"505","severity":1,"message":"506","line":184,"column":6,"nodeType":"507","endLine":184,"endColumn":8,"suggestions":"530"},{"ruleId":"505","severity":1,"message":"531","line":263,"column":6,"nodeType":"507","endLine":263,"endColumn":18,"suggestions":"532"},{"ruleId":"481","severity":1,"message":"519","line":4,"column":10,"nodeType":"483","messageId":"484","endLine":4,"endColumn":17},{"ruleId":"481","severity":1,"message":"520","line":14,"column":8,"nodeType":"483","messageId":"484","endLine":14,"endColumn":24},{"ruleId":"481","severity":1,"message":"521","line":15,"column":8,"nodeType":"483","messageId":"484","endLine":15,"endColumn":14},{"ruleId":"481","severity":1,"message":"533","line":17,"column":10,"nodeType":"483","messageId":"484","endLine":17,"endColumn":20},{"ruleId":"526","severity":1,"message":"527","line":187,"column":19,"nodeType":"528","messageId":"529","endLine":187,"endColumn":21},{"ruleId":"481","severity":1,"message":"534","line":212,"column":9,"nodeType":"483","messageId":"484","endLine":212,"endColumn":18},{"ruleId":"481","severity":1,"message":"519","line":4,"column":10,"nodeType":"483","messageId":"484","endLine":4,"endColumn":17},{"ruleId":"481","severity":1,"message":"520","line":14,"column":8,"nodeType":"483","messageId":"484","endLine":14,"endColumn":24},{"ruleId":"481","severity":1,"message":"521","line":15,"column":8,"nodeType":"483","messageId":"484","endLine":15,"endColumn":14},{"ruleId":"526","severity":1,"message":"527","line":173,"column":19,"nodeType":"528","messageId":"529","endLine":173,"endColumn":21},{"ruleId":"481","severity":1,"message":"535","line":5,"column":8,"nodeType":"483","messageId":"484","endLine":5,"endColumn":18},{"ruleId":"481","severity":1,"message":"536","line":6,"column":8,"nodeType":"483","messageId":"484","endLine":6,"endColumn":18},{"ruleId":"481","severity":1,"message":"537","line":7,"column":8,"nodeType":"483","messageId":"484","endLine":7,"endColumn":16},{"ruleId":"481","severity":1,"message":"487","line":1,"column":17,"nodeType":"483","messageId":"484","endLine":1,"endColumn":25},{"ruleId":"481","severity":1,"message":"538","line":3,"column":8,"nodeType":"483","messageId":"484","endLine":3,"endColumn":12},{"ruleId":"481","severity":1,"message":"539","line":13,"column":8,"nodeType":"483","messageId":"484","endLine":13,"endColumn":15},{"ruleId":"481","severity":1,"message":"535","line":14,"column":8,"nodeType":"483","messageId":"484","endLine":14,"endColumn":18},{"ruleId":"481","severity":1,"message":"540","line":16,"column":8,"nodeType":"483","messageId":"484","endLine":16,"endColumn":16},{"ruleId":"481","severity":1,"message":"536","line":17,"column":8,"nodeType":"483","messageId":"484","endLine":17,"endColumn":18},{"ruleId":"481","severity":1,"message":"541","line":18,"column":8,"nodeType":"483","messageId":"484","endLine":18,"endColumn":15},{"ruleId":"481","severity":1,"message":"520","line":19,"column":8,"nodeType":"483","messageId":"484","endLine":19,"endColumn":24},{"ruleId":"481","severity":1,"message":"521","line":20,"column":8,"nodeType":"483","messageId":"484","endLine":20,"endColumn":14},{"ruleId":"481","severity":1,"message":"542","line":21,"column":8,"nodeType":"483","messageId":"484","endLine":21,"endColumn":16},{"ruleId":"481","severity":1,"message":"543","line":23,"column":8,"nodeType":"483","messageId":"484","endLine":23,"endColumn":14},{"ruleId":"481","severity":1,"message":"544","line":24,"column":8,"nodeType":"483","messageId":"484","endLine":24,"endColumn":21},{"ruleId":"481","severity":1,"message":"545","line":25,"column":8,"nodeType":"483","messageId":"484","endLine":25,"endColumn":21},{"ruleId":"481","severity":1,"message":"509","line":26,"column":8,"nodeType":"483","messageId":"484","endLine":26,"endColumn":25},{"ruleId":"481","severity":1,"message":"546","line":27,"column":8,"nodeType":"483","messageId":"484","endLine":27,"endColumn":19},{"ruleId":"481","severity":1,"message":"497","line":28,"column":10,"nodeType":"483","messageId":"484","endLine":28,"endColumn":20},{"ruleId":"481","severity":1,"message":"499","line":30,"column":10,"nodeType":"483","messageId":"484","endLine":30,"endColumn":21},{"ruleId":"481","severity":1,"message":"547","line":148,"column":7,"nodeType":"483","messageId":"484","endLine":148,"endColumn":23},{"ruleId":"526","severity":1,"message":"527","line":196,"column":19,"nodeType":"528","messageId":"529","endLine":196,"endColumn":21},{"ruleId":"481","severity":1,"message":"536","line":17,"column":8,"nodeType":"483","messageId":"484","endLine":17,"endColumn":18},{"ruleId":"481","severity":1,"message":"541","line":18,"column":8,"nodeType":"483","messageId":"484","endLine":18,"endColumn":15},{"ruleId":"481","severity":1,"message":"520","line":19,"column":8,"nodeType":"483","messageId":"484","endLine":19,"endColumn":24},{"ruleId":"481","severity":1,"message":"521","line":20,"column":8,"nodeType":"483","messageId":"484","endLine":20,"endColumn":14},{"ruleId":"481","severity":1,"message":"486","line":22,"column":10,"nodeType":"483","messageId":"484","endLine":22,"endColumn":14},{"ruleId":"481","severity":1,"message":"542","line":24,"column":8,"nodeType":"483","messageId":"484","endLine":24,"endColumn":16},{"ruleId":"481","severity":1,"message":"548","line":132,"column":24,"nodeType":"483","messageId":"484","endLine":132,"endColumn":28},{"ruleId":"526","severity":1,"message":"527","line":178,"column":19,"nodeType":"528","messageId":"529","endLine":178,"endColumn":21},{"ruleId":"481","severity":1,"message":"549","line":186,"column":10,"nodeType":"483","messageId":"484","endLine":186,"endColumn":18},{"ruleId":"481","severity":1,"message":"550","line":186,"column":20,"nodeType":"483","messageId":"484","endLine":186,"endColumn":31},{"ruleId":"481","severity":1,"message":"499","line":23,"column":10,"nodeType":"483","messageId":"484","endLine":23,"endColumn":21},{"ruleId":"526","severity":1,"message":"527","line":289,"column":19,"nodeType":"528","messageId":"529","endLine":289,"endColumn":21},{"ruleId":"481","severity":1,"message":"534","line":346,"column":9,"nodeType":"483","messageId":"484","endLine":346,"endColumn":18},{"ruleId":"481","severity":1,"message":"551","line":3,"column":8,"nodeType":"483","messageId":"484","endLine":3,"endColumn":15},{"ruleId":"481","severity":1,"message":"552","line":16,"column":9,"nodeType":"483","messageId":"484","endLine":16,"endColumn":22},{"ruleId":"481","severity":1,"message":"553","line":5,"column":8,"nodeType":"483","messageId":"484","endLine":5,"endColumn":18},{"ruleId":"481","severity":1,"message":"554","line":7,"column":8,"nodeType":"483","messageId":"484","endLine":7,"endColumn":24},{"ruleId":"481","severity":1,"message":"555","line":76,"column":9,"nodeType":"483","messageId":"484","endLine":76,"endColumn":26},{"ruleId":"481","severity":1,"message":"556","line":157,"column":9,"nodeType":"483","messageId":"484","endLine":157,"endColumn":25},{"ruleId":"481","severity":1,"message":"557","line":1,"column":8,"nodeType":"483","messageId":"484","endLine":1,"endColumn":13},{"ruleId":"481","severity":1,"message":"502","line":1,"column":27,"nodeType":"483","messageId":"484","endLine":1,"endColumn":36},{"ruleId":"481","severity":1,"message":"537","line":12,"column":3,"nodeType":"483","messageId":"484","endLine":12,"endColumn":11},{"ruleId":"481","severity":1,"message":"509","line":24,"column":8,"nodeType":"483","messageId":"484","endLine":24,"endColumn":25},{"ruleId":"481","severity":1,"message":"503","line":2,"column":3,"nodeType":"483","messageId":"484","endLine":2,"endColumn":7},{"ruleId":"481","severity":1,"message":"509","line":12,"column":8,"nodeType":"483","messageId":"484","endLine":12,"endColumn":25},{"ruleId":"481","severity":1,"message":"523","line":4,"column":3,"nodeType":"483","messageId":"484","endLine":4,"endColumn":12},{"ruleId":"481","severity":1,"message":"558","line":9,"column":3,"nodeType":"483","messageId":"484","endLine":9,"endColumn":12},{"ruleId":"481","severity":1,"message":"543","line":11,"column":8,"nodeType":"483","messageId":"484","endLine":11,"endColumn":14},{"ruleId":"481","severity":1,"message":"544","line":12,"column":8,"nodeType":"483","messageId":"484","endLine":12,"endColumn":21},{"ruleId":"481","severity":1,"message":"545","line":13,"column":8,"nodeType":"483","messageId":"484","endLine":13,"endColumn":21},{"ruleId":"481","severity":1,"message":"509","line":14,"column":8,"nodeType":"483","messageId":"484","endLine":14,"endColumn":25},{"ruleId":"481","severity":1,"message":"546","line":15,"column":8,"nodeType":"483","messageId":"484","endLine":15,"endColumn":19},{"ruleId":"481","severity":1,"message":"503","line":17,"column":3,"nodeType":"483","messageId":"484","endLine":17,"endColumn":7},{"ruleId":"481","severity":1,"message":"559","line":18,"column":3,"nodeType":"483","messageId":"484","endLine":18,"endColumn":17},{"ruleId":"481","severity":1,"message":"560","line":46,"column":18,"nodeType":"483","messageId":"484","endLine":46,"endColumn":27},{"ruleId":"477","replacedBy":"561"},{"ruleId":"479","replacedBy":"562"},{"ruleId":"481","severity":1,"message":"514","line":5,"column":3,"nodeType":"483","messageId":"484","endLine":5,"endColumn":6},{"ruleId":"481","severity":1,"message":"558","line":6,"column":3,"nodeType":"483","messageId":"484","endLine":6,"endColumn":12},{"ruleId":"481","severity":1,"message":"563","line":7,"column":3,"nodeType":"483","messageId":"484","endLine":7,"endColumn":7},{"ruleId":"481","severity":1,"message":"564","line":14,"column":3,"nodeType":"483","messageId":"484","endLine":14,"endColumn":10},{"ruleId":"481","severity":1,"message":"499","line":12,"column":10,"nodeType":"483","messageId":"484","endLine":12,"endColumn":21},{"ruleId":"481","severity":1,"message":"487","line":1,"column":17,"nodeType":"483","messageId":"484","endLine":1,"endColumn":25},{"ruleId":"481","severity":1,"message":"502","line":1,"column":27,"nodeType":"483","messageId":"484","endLine":1,"endColumn":36},{"ruleId":"481","severity":1,"message":"488","line":10,"column":8,"nodeType":"483","messageId":"484","endLine":10,"endColumn":13},{"ruleId":"481","severity":1,"message":"487","line":1,"column":17,"nodeType":"483","messageId":"484","endLine":1,"endColumn":25},{"ruleId":"481","severity":1,"message":"502","line":1,"column":27,"nodeType":"483","messageId":"484","endLine":1,"endColumn":36},{"ruleId":"481","severity":1,"message":"565","line":15,"column":8,"nodeType":"483","messageId":"484","endLine":15,"endColumn":23},{"ruleId":"481","severity":1,"message":"499","line":19,"column":10,"nodeType":"483","messageId":"484","endLine":19,"endColumn":21},"no-native-reassign",["566"],"no-negated-in-lhs",["567"],"no-unused-vars","'NotFound' is defined but never used.","Identifier","unusedVar","'Joi' is defined but never used.","'Link' is defined but never used.","'useState' is defined but never used.","'axios' is defined but never used.","'history' is assigned a value but never used.","'useSelector' is defined but never used.","'registerIndividual' is defined but never used.","'setMaxLimit' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useHistory' is defined but never used.","'logging' is defined but never used.","'useDispatch' is defined but never used.","'registerHospital' is defined but never used.","'makeStyles' is defined but never used.","'useEffect' is defined but never used.","'Card' is defined but never used.","'CardMedia' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loggedInState.userToken'. Either include it or remove the dependency array.","ArrayExpression",["568"],"'DialogContentText' is defined but never used.",["569"],"'DateFnsUtils' is defined but never used.","'handleClickOpen' is assigned a value but never used.",["570"],"'Box' is defined but never used.","'Collapse' is defined but never used.",["571"],"React Hook useEffect has missing dependencies: 'drivesList' and 'history'. Either include them or remove the dependency array.",["572"],"'lighten' is defined but never used.","'FormControlLabel' is defined but never used.","'Switch' is defined but never used.","'Modal' is defined but never used.","'TextField' is defined but never used.",["573"],["574"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["575"],"React Hook useEffect has missing dependencies: 'active' and 'history'. Either include them or remove the dependency array.",["576"],"'createData' is defined but never used.","'emptyRows' is assigned a value but never used.","'Typography' is defined but never used.","'IconButton' is defined but never used.","'MenuIcon' is defined but never used.","'clsx' is defined but never used.","'Toolbar' is defined but never used.","'Checkbox' is defined but never used.","'Tooltip' is defined but never used.","'SendIcon' is defined but never used.","'Dialog' is defined but never used.","'DialogActions' is defined but never used.","'DialogContent' is defined but never used.","'DialogTitle' is defined but never used.","'useToolbarStyles' is assigned a value but never used.","'data' is assigned a value but never used.","'selected' is assigned a value but never used.","'setSelected' is assigned a value but never used.","'OrgForm' is defined but never used.","'loggedInState' is assigned a value but never used.","'invitesImg' is defined but never used.","'upcomingDriveImg' is defined but never used.","'BloodBankServices' is assigned a value but never used.","'HospitalServices' is assigned a value but never used.","'React' is defined but never used.","'Container' is defined but never used.","'CardActionArea' is defined but never used.","'setValues' is assigned a value but never used.",["566"],["567"],"'Grid' is defined but never used.","'Divider' is defined but never used.","'TablePagination' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"577","fix":"578"},{"desc":"577","fix":"579"},{"desc":"577","fix":"580"},{"desc":"577","fix":"581"},{"desc":"582","fix":"583"},{"desc":"577","fix":"584"},{"desc":"577","fix":"585"},{"desc":"577","fix":"586"},{"desc":"587","fix":"588"},"Update the dependencies array to be: [loggedInState.userToken]",{"range":"589","text":"590"},{"range":"591","text":"590"},{"range":"592","text":"590"},{"range":"593","text":"590"},"Update the dependencies array to be: [donorsList, drivesList, history]",{"range":"594","text":"595"},{"range":"596","text":"590"},{"range":"597","text":"590"},{"range":"598","text":"590"},"Update the dependencies array to be: [active, donorsList, history]",{"range":"599","text":"600"},[1107,1109],"[loggedInState.userToken]",[1073,1075],[1094,1096],[1769,1771],[3032,3044],"[donorsList, drivesList, history]",[5188,5190],[1825,1827],[4828,4830],[6882,6894],"[active, donorsList, history]"]